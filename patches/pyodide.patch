diff --git a/Dockerfile b/Dockerfile
index 40288019..5282f18e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,5 +1,5 @@
-FROM node:14.16.1-buster-slim AS node-image
-FROM python:3.11.2-slim-buster
+FROM node:20.1.0-bullseye-slim AS node-image
+FROM python:3.11.2-slim-bullseye
 
 # Requirements for building packages
 RUN apt-get update \
@@ -7,8 +7,8 @@ RUN apt-get update \
         bzip2 ccache f2c g++ gfortran git make \
         patch pkg-config swig unzip wget xz-utils \
         autoconf autotools-dev automake texinfo dejagnu \
-        build-essential prelink autoconf libtool libltdl-dev \
-        gnupg2 libdbus-glib-1-2 sudo sqlite3 \
+        build-essential autoconf libtool libltdl-dev \
+        gnupg2 libdbus-glib-1-2 sudo sqlite3 clang libclang-dev cmake \
         ninja-build jq xxd \
   && rm -rf /var/lib/apt/lists/*
 
@@ -31,7 +31,8 @@ ADD requirements.txt docs/requirements-doc.txt /
 ADD pyodide-build /pyodide-build
 
 WORKDIR /
-RUN pip3 --no-cache-dir install -r requirements.txt \
+RUN pip3 --no-cache-dir install "pydantic<2" \
+    && pip3 --no-cache-dir install -r requirements.txt \
     && pip3 --no-cache-dir install -r requirements-doc.txt \
     && rm -rf requirements.txt requirements-doc.txt pyodide-build
 
diff --git a/Makefile.envs b/Makefile.envs
index d023781b..1f200fe0 100644
--- a/Makefile.envs
+++ b/Makefile.envs
@@ -160,7 +160,7 @@ export STDLIB_MODULE_CFLAGS= $(SIDE_MODULE_CFLAGS) -I Include/ -I . -I Include/i
 # For RUST
 export CARGO_BUILD_TARGET=wasm32-unknown-emscripten
 export CARGO_TARGET_WASM32_UNKNOWN_EMSCRIPTEN_LINKER=emcc
-export RUST_TOOLCHAIN=nightly-2022-06-26
+export RUST_TOOLCHAIN=nightly-2023-04-29
 export PYO3_CROSS_LIB_DIR=${CPYTHONINSTALL}/lib
 export PYO3_CROSS_INCLUDE_DIR=${PYTHONINCLUDE}
 
diff --git a/packages/Cartopy/meta.yaml b/packages/Cartopy/meta.yaml
new file mode 100644
index 00000000..866a41ba
--- /dev/null
+++ b/packages/Cartopy/meta.yaml
@@ -0,0 +1,39 @@
+package:
+  name: Cartopy
+  version: 0.21.1
+  top-level:
+    - cartopy
+source:
+  url: https://files.pythonhosted.org/packages/e8/11/ed3e364b3910f0951821e6b5a03a03ce425464b72aa3da08d47b78ae17bd/Cartopy-0.21.1.tar.gz
+  sha256: 89d5649712c8582231c6e11825a04c85f6f0cee94dbb89e4db23eabca1cc250a
+  patches:
+    - patches/0001-setup-geos-config.patch
+test:
+  imports:
+    - cartopy
+    - cartopy.trace
+    - cartopy.mpl.geoaxes
+    - cartopy.crs
+requirements:
+  host:
+    - geos
+    - numpy
+  run:
+    - shapely
+    - pyshp
+    - pyproj
+    - geos
+    - matplotlib
+    - scipy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    export GEOS_CONFIG=${WASM_LIBRARY_DIR}/bin/geos-config
+    echo ${GEOS_CONFIG}
+
+about:
+  home: http://scitools.org.uk/cartopy
+  PyPI: https://pypi.org/project/Cartopy/
+  summary: A library providing cartographic tools for python
+  license: LGPL-3.0-or-later
diff --git a/packages/Cartopy/patches/0001-setup-geos-config.patch b/packages/Cartopy/patches/0001-setup-geos-config.patch
new file mode 100644
index 00000000..f5eb270c
--- /dev/null
+++ b/packages/Cartopy/patches/0001-setup-geos-config.patch
@@ -0,0 +1,20 @@
+diff --git a/setup.py b/setup.py
+index 8e061479..c1b592ff 100644
+--- a/setup.py
++++ b/setup.py
+@@ -81,11 +81,12 @@ def file_walk_relative(top, remove=''):
+ 
+ # GEOS
+ try:
+-    geos_version = subprocess.check_output(['geos-config', '--version'])
++    geos_config = os.environ.get("GEOS_CONFIG", "/src/packages/.libs/bin/geos-config")
++    geos_version = subprocess.check_output([geos_config, '--version'])
+     geos_version = tuple(int(v) for v in geos_version.split(b'.')
+                          if 'dev' not in str(v))
+-    geos_includes = subprocess.check_output(['geos-config', '--includes'])
+-    geos_clibs = subprocess.check_output(['geos-config', '--clibs'])
++    geos_includes = subprocess.check_output([geos_config, '--includes'])
++    geos_clibs = subprocess.check_output([geos_config, '--clibs'])
+ except (OSError, ValueError, subprocess.CalledProcessError):
+     warnings.warn(
+         'Unable to determine GEOS version. Ensure you have %s or later '
diff --git a/packages/Cartopy/test_cartopy.py b/packages/Cartopy/test_cartopy.py
new file mode 100644
index 00000000..6dfc8934
--- /dev/null
+++ b/packages/Cartopy/test_cartopy.py
@@ -0,0 +1,25 @@
+import pathlib
+
+import pytest
+from pytest_pyodide import run_in_pyodide
+
+
+@pytest.mark.driver_timeout(60)
+@run_in_pyodide(packages=["cartopy"])
+def test_imports(selenium):
+    import cartopy
+    import cartopy.trace
+
+    assert False
+
+
+@pytest.mark.driver_timeout(60)
+@run_in_pyodide(packages=["cartopy", "matplotlib"])
+def test_matplotlib(selenium):
+    import cartopy.crs as ccrs
+    import matplotlib.pyplot as plt
+
+    ax = plt.axes(projection=ccrs.PlateCarree())
+    ax.coastlines()
+
+    plt.show()
diff --git a/packages/MetPy/meta.yaml b/packages/MetPy/meta.yaml
new file mode 100644
index 00000000..f1169c46
--- /dev/null
+++ b/packages/MetPy/meta.yaml
@@ -0,0 +1,26 @@
+package:
+  name: MetPy
+  version: 1.5.1
+  top-level:
+    - metpy
+source:
+  url: https://files.pythonhosted.org/packages/6d/bf/9794cba86ef63644d41799d0dfe4031f430e937245a5f3f1e66508a6c8fb/MetPy-1.5.1-py3-none-any.whl
+  sha256: a654a1aae77422ad340c06daaa70bd34f0ca5325f4ff202796d2dce48e53e776
+requirements:
+  run:
+    - matplotlib
+    - numpy
+    - pandas
+    - pint
+    - pooch
+    - pyproj
+    - scipy
+    - traitlets
+    - xarray
+about:
+  home: https://github.com/Unidata/MetPy
+  PyPI: https://pypi.org/project/MetPy
+  summary:
+    Collection of tools for reading, visualizing and performing calculations
+    with weather data.
+  license: BSD-3-Clause
diff --git a/packages/basemap-data/meta.yaml b/packages/basemap-data/meta.yaml
new file mode 100644
index 00000000..c839d187
--- /dev/null
+++ b/packages/basemap-data/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: basemap-data
+  version: 1.3.2
+  top-level:
+    - basemap_data
+source:
+  url: https://files.pythonhosted.org/packages/2c/c3/63fdb885308c999206c7a497d79a50891581626da7dc491d432d2732bb46/basemap_data-1.3.2-py2.py3-none-any.whl
+  sha256: 26e794556c496b26f7714658cdbea5c68cb47d6a8a9fb0e674844fa89c56fc59
+about:
+  home: https://matplotlib.org/basemap
+  PyPI: https://pypi.org/project/basemap-data
+  summary: Data assets for matplotlib basemap
+  license: GNU Lesser General Public License v3 or later (LGPLv3+)
diff --git a/packages/basemap/meta.yaml b/packages/basemap/meta.yaml
new file mode 100644
index 00000000..d2ab4d7f
--- /dev/null
+++ b/packages/basemap/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: basemap
+  version: 1.3.7
+  top-level:
+    - mpl_toolkits
+source:
+  url: https://files.pythonhosted.org/packages/01/7e/d4fab0d8a5e0a90611131261f5cc092de51fb810d9a36ce59b8834de6012/basemap-1.3.7.zip
+  sha256: 251afbed8a32cedb0194ef3809918ea961453faba8adb4e5730d8b5b2c1fd368
+requirements:
+  host:
+    - geos
+  run:
+    - basemap-data
+    - numpy
+    - cycler
+    - distutils
+    - pyparsing
+    - matplotlib
+    - pyproj
+    - pyshp
+
+build:
+  vendor-sharedlib: true
+  cflags: -Wno-int-conversion -Wno-incompatible-function-pointer-types
+  script: |
+    export GEOS_DIR=${WASM_LIBRARY_DIR}
+about:
+  home: https://matplotlib.org/basemap
+  PyPI: https://pypi.org/project/basemap
+  summary: Plot data on map projections with matplotlib
+  license: MIT
diff --git a/packages/cattrs/meta.yaml b/packages/cattrs/meta.yaml
new file mode 100644
index 00000000..5c64f582
--- /dev/null
+++ b/packages/cattrs/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: cattrs
+  version: 23.1.2
+  top-level:
+    - cattr
+    - cattrs
+source:
+  url: https://files.pythonhosted.org/packages/3a/ba/05df14efaa0624fac6b1510e87f5ce446208d2f6ce50270a89b6268aebfe/cattrs-23.1.2-py3-none-any.whl
+  sha256: b2bb14311ac17bed0d58785e5a60f022e5431aca3932e3fc5cc8ed8639de50a4
+requirements:
+  run:
+    - attrs
+about:
+  home: https://github.com/python-attrs/cattrs
+  PyPI: https://pypi.org/project/cattrs
+  summary: Composable complex class support for attrs and dataclasses.
+  license: MIT
diff --git a/packages/cfgrib/meta.yaml b/packages/cfgrib/meta.yaml
new file mode 100644
index 00000000..8fd06581
--- /dev/null
+++ b/packages/cfgrib/meta.yaml
@@ -0,0 +1,24 @@
+package:
+  name: cfgrib
+  version: 0.9.10.4
+  top-level:
+    - cfgrib
+source:
+  url: https://files.pythonhosted.org/packages/69/b4/5389e5b3240d24aa1210ba698b3c5c8c800e1a83842af9b1effa52b4a389/cfgrib-0.9.10.4.tar.gz
+  sha256: b490078192aa13ec89c77296110355521442325866b16a996f4b3cf421542909
+  patches:
+    - patches/0001-dataset-inferred-dtype.patch
+requirements:
+  run:
+    - attrs
+    - click
+    - eccodes
+    - numpy
+    - xarray
+about:
+  home: https://github.com/ecmwf/cfgrib
+  PyPI: https://pypi.org/project/cfgrib
+  summary:
+    Python interface to map GRIB files to the NetCDF Common Data Model following
+    the CF Convention using ecCodes.
+  license: Apache License Version 2.0
diff --git a/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch b/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch
new file mode 100644
index 00000000..2104d93a
--- /dev/null
+++ b/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch
@@ -0,0 +1,50 @@
+diff --git a/cfgrib/dataset.py b/cfgrib/dataset.py
+index e4f91ec..f81afb7 100644
+--- a/cfgrib/dataset.py
++++ b/cfgrib/dataset.py
+@@ -330,11 +330,11 @@ class OnDiskArray:
+     ] = attr.attrib(repr=False)
+     missing_value: float
+     geo_ndim: int = attr.attrib(default=1, repr=False)
+-    dtype = np.dtype("float32")
++    dtype: np.dtype = attr.attrib(default=np.dtype("float32"), repr=False)
+ 
+     def build_array(self) -> np.ndarray:
+         """Helper method used to test __getitem__"""
+-        array = np.full(self.shape, fill_value=np.nan, dtype="float32")
++        array = np.full(self.shape, fill_value=np.nan, dtype=self.dtype)
+         for header_indexes, message_ids in self.field_id_index.items():
+             # NOTE: fill a single field as found in the message
+             message = self.index.get_field(message_ids[0])  # type: ignore
+@@ -348,7 +348,7 @@ class OnDiskArray:
+         header_item_list = expand_item(item[: -self.geo_ndim], self.shape)
+         header_item = [{ix: i for i, ix in enumerate(it)} for it in header_item_list]
+         array_field_shape = tuple(len(i) for i in header_item_list) + self.shape[-self.geo_ndim :]
+-        array_field = np.full(array_field_shape, fill_value=np.nan, dtype="float32")
++        array_field = np.full(array_field_shape, fill_value=np.nan, dtype=self.dtype)
+         for header_indexes, message_ids in self.field_id_index.items():
+             try:
+                 array_field_indexes = [it[ix] for it, ix in zip(header_item, header_indexes)]
+@@ -566,12 +566,22 @@ def build_variable_components(
+                     extra_coords_data[coord_name][header_value] = coord_value
+         offsets[tuple(header_indexes)] = message_ids
+     missing_value = data_var_attrs.get("missingValue", messages.MISSING_VAUE_INDICATOR)
++    if len(offsets) > 0:
++        # Infer the dtype from the first data message
++        header_indexes, message_ids = next(iter(offsets.items()))
++        message = index.get_field(message_ids[0])
++        values = get_values_in_order(message, np.empty(shape)[header_indexes].shape)
++        dtype = values.dtype
++    else:
++        # Fall back to a reasonable default dtype
++        dtype = np.dtype("float32")
+     on_disk_array = OnDiskArray(
+         index=index,
+         shape=shape,
+         field_id_index=offsets,
+         missing_value=missing_value,
+         geo_ndim=len(geo_dims),
++        dtype=dtype,
+     )
+ 
+     if "time" in coord_vars and "step" in coord_vars:
diff --git a/packages/charset-normalizer/meta.yaml b/packages/charset-normalizer/meta.yaml
new file mode 100644
index 00000000..7fa67812
--- /dev/null
+++ b/packages/charset-normalizer/meta.yaml
@@ -0,0 +1,15 @@
+package:
+  name: charset-normalizer
+  version: 3.1.0
+  top-level:
+    - charset_normalizer
+source:
+  url: https://files.pythonhosted.org/packages/ef/81/14b3b8f01ddaddad6cdec97f2f599aa2fa466bd5ee9af99b08b7713ccd29/charset_normalizer-3.1.0-py3-none-any.whl
+  sha256: 3d9098b479e78c85080c98e1e35ff40b4a31d8953102bb0fd7d1b6f8a2111a3d
+about:
+  home: https://github.com/Ousret/charset_normalizer
+  PyPI: https://pypi.org/project/charset-normalizer
+  summary:
+    The Real First Universal Charset Detector. Open, modern and actively maintained
+    alternative to Chardet.
+  license: MIT
diff --git a/packages/cmcrameri/meta.yaml b/packages/cmcrameri/meta.yaml
new file mode 100644
index 00000000..9ea051b9
--- /dev/null
+++ b/packages/cmcrameri/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: cmcrameri
+  version: "1.5"
+  top-level:
+    - cmcrameri
+source:
+  url: https://files.pythonhosted.org/packages/12/ec/de245dfecc864e342dcf411e83d61c25e5f50102c4918d5ddf9f92778a2b/cmcrameri-1.5-py3-none-any.whl
+  sha256: c8af03345cd5d8d9f0f0f55d3cd29434fb279553ad44581c7dc9c74747f9a733
+about:
+  home: "https://github.com/callumrollo/cmcrameri"
+  PyPI: https://pypi.org/project/cmcrameri
+  summary: Perceptually uniform colormaps by Fabio Crameri
+  license: MIT
diff --git a/packages/dask/meta.yaml b/packages/dask/meta.yaml
new file mode 100644
index 00000000..72e2ee63
--- /dev/null
+++ b/packages/dask/meta.yaml
@@ -0,0 +1,25 @@
+package:
+  name: dask
+  version: 2023.5.0
+  top-level:
+    - dask
+source:
+  url: https://files.pythonhosted.org/packages/07/93/32d3e317fec6d0fc130284f922ad9bd13d9ae0d52245e6ff6e57647e924c/dask-2023.5.0-py3-none-any.whl
+  sha256: 32b34986519b7ddc0947c8ca63c2fc81b964e4c208dfb5cbf9f4f8aec92d152b
+test:
+  imports:
+    - dask
+requirements:
+  run:
+    - click
+    - cloudpickle
+    - importlib_metadata
+    - Jinja2
+    - packaging
+    - pyyaml
+    - toolz
+about:
+  home: https://github.com/dask/dask/
+  PyPI: https://pypi.org/project/dask
+  summary: Parallel PyData with Task Scheduling
+  license: BSD
diff --git a/packages/defusedxml/meta.yaml b/packages/defusedxml/meta.yaml
new file mode 100644
index 00000000..15342db7
--- /dev/null
+++ b/packages/defusedxml/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: defusedxml
+  version: 0.7.1
+  top-level:
+    - defusedxml
+source:
+  url: https://files.pythonhosted.org/packages/07/6c/aa3f2f849e01cb6a001cd8554a88d4c77c5c1a31c95bdf1cf9301e6d9ef4/defusedxml-0.7.1-py2.py3-none-any.whl
+  sha256: a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61
+about:
+  home: https://github.com/tiran/defusedxml
+  PyPI: https://pypi.org/project/defusedxml
+  summary: XML bomb protection for Python stdlib modules
+  license: PSFL
diff --git a/packages/eccodes/meta.yaml b/packages/eccodes/meta.yaml
new file mode 100644
index 00000000..791a9f52
--- /dev/null
+++ b/packages/eccodes/meta.yaml
@@ -0,0 +1,29 @@
+package:
+  name: eccodes
+  version: 1.5.2
+  top-level:
+    - eccodes
+    - gribapi
+source:
+  url: https://files.pythonhosted.org/packages/af/b9/57d55d70ca6fbf9ce8dc096904d6bd4984d6eaacfff20c771245d99e1f1b/eccodes-1.5.2.tar.gz
+  sha256: f7cce47fc9b1df3ed9eea21c4060fa572e07a4d0f014f6fd1f74683df9b45801
+  patches:
+    - patches/0001-shared-library-include.patch
+requirements:
+  run:
+    - attrs
+    - cffi
+    - findlibs
+    - numpy
+  host:
+    - libeccodes
+build:
+  vendor-sharedlib: true
+  script: |
+    cp ${WASM_LIBRARY_DIR}/lib/libeccodes.so gribapi/
+    cp -r ${WASM_LIBRARY_DIR}/share/eccodes/definitions gribapi/
+about:
+  home: https://github.com/ecmwf/eccodes-python
+  PyPI: https://pypi.org/project/eccodes
+  summary: Python interface to the ecCodes GRIB and BUFR decoder/encoder
+  license: Apache License Version 2.0
diff --git a/packages/eccodes/patches/0001-shared-library-include.patch b/packages/eccodes/patches/0001-shared-library-include.patch
new file mode 100644
index 00000000..671f423a
--- /dev/null
+++ b/packages/eccodes/patches/0001-shared-library-include.patch
@@ -0,0 +1,45 @@
+diff --git a/gribapi/bindings.py b/gribapi/bindings.py
+index 91f6d6a..2504873 100644
+--- a/gribapi/bindings.py
++++ b/gribapi/bindings.py
+@@ -15,8 +15,10 @@
+ #
+ 
+ from __future__ import absolute_import, division, print_function, unicode_literals
++from pathlib import Path
+ 
+ import logging
++import os
+ import pkgutil
+ 
+ import cffi
+@@ -25,14 +27,10 @@ __version__ = "1.6.0"
+ 
+ LOG = logging.getLogger(__name__)
+ 
+-try:
+-    import ecmwflibs as findlibs
+-except ImportError:
+-    import findlibs
++definitions_path = str(Path(__file__).parent / "definitions")
++os.environ["ECCODES_DEFINITION_PATH"] = definitions_path
+ 
+-library_path = findlibs.find("eccodes")
+-if library_path is None:
+-    raise RuntimeError("Cannot find the ecCodes library")
++library_path = str(Path(__file__).parent / "libeccodes.so")
+ 
+ # default encoding for ecCodes strings
+ ENC = "ascii"
+diff --git a/setup.py b/setup.py
+index 5df68df..d58dd3a 100644
+--- a/setup.py
++++ b/setup.py
+@@ -55,6 +55,7 @@ setuptools.setup(
+     url="https://github.com/ecmwf/eccodes-python",
+     packages=setuptools.find_packages(),
+     include_package_data=True,
++    package_data={'gribapi': ['libeccodes.so', "definitions/*", "definitions/**/*"]},
+     install_requires=install_requires,
+     tests_require=[
+         "pytest",
diff --git a/packages/esgf-pyclient/meta.yaml b/packages/esgf-pyclient/meta.yaml
new file mode 100644
index 00000000..821b5d3b
--- /dev/null
+++ b/packages/esgf-pyclient/meta.yaml
@@ -0,0 +1,21 @@
+package:
+  name: esgf-pyclient
+  version: 0.3.1
+  top-level:
+    - pyesgf
+source:
+  url: https://files.pythonhosted.org/packages/03/54/60ba51d47ef18907d1a643a0f75dd4c2ac24e5bbefaa02d8ade0b4f20fbf/esgf-pyclient-0.3.1.tar.gz
+  sha256: d79fafc6ec2a1eff9645e098554103f1e9f3c270947b1ac4f4a8a07fece59f3b
+requirements:
+  run:
+    - defusedxml
+    - Jinja2
+    - requests
+    - requests_cache
+    - webob
+    - myproxyclient
+about:
+  home: http://esgf-pyclient.readthedocs.org
+  PyPI: https://pypi.org/project/esgf-pyclient
+  summary: A library interacting with ESGF services within Python
+  license: BSD
diff --git a/packages/esmpy/meta.yaml b/packages/esmpy/meta.yaml
new file mode 100644
index 00000000..59e948b3
--- /dev/null
+++ b/packages/esmpy/meta.yaml
@@ -0,0 +1,65 @@
+package:
+  name: esmpy
+  version: 8.4.2
+  top-level:
+    - esmpy
+source:
+  url: https://github.com/esmf-org/esmf/archive/refs/tags/v8.4.2.tar.gz
+  sha256: 969304efa518c7859567fa6e65efd960df2b4f6d72dbf2c3f29e39e4ab5ae594
+  patches:
+    - patches/0001-remove-fragments.patch
+    - patches/0002-include-shared-library.patch
+requirements:
+  host:
+    - numpy
+    - libesmf
+  run:
+    - numpy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    cd ..
+    mv esmpy-8.4.2/src/addon/esmpy .
+    rm -rf esmpy-8.4.2
+    mv esmpy esmpy-8.4.2
+    cd esmpy-8.4.2
+
+    cp ${WASM_LIBRARY_DIR}/lib/libesmf_fullylinked.so src/esmpy/
+    cp ${WASM_LIBRARY_DIR}/lib/esmf.mk src/esmpy/
+    
+about:
+  home: https://github.com/esmf-org/esmf
+  summary: ESMPy is a Python interface to the Earth System Modeling Framework (ESMF) regridding utility.
+  license: |
+    Earth System Modeling Framework
+
+    Copyright (c) 2002-2023 University Corporation for Atmospheric Research,
+    Massachusetts Institute of Technology, Geophysical Fluid Dynamics Laboratory,
+    University of Michigan, National Centers for Environmental Prediction,
+    Los Alamos National Laboratory, Argonne National Laboratory,
+    NASA Goddard Space Flight Center.
+    All rights reserved.
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to
+    deal with the Software without restriction, including without limitation the
+    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+    sell copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+      1. Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimers.
+      2. Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimers in the
+        documentation and/or other materials provided with the distribution.
+      3. Neither the names of the organizations developing this software, nor
+        the names of its contributors may be used to endorse or promote products
+        derived from this Software without specific prior written permission.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+    CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+    WITH THE SOFTWARE.
diff --git a/packages/esmpy/patches/0001-remove-fragments.patch b/packages/esmpy/patches/0001-remove-fragments.patch
new file mode 100644
index 00000000..2eb7f203
--- /dev/null
+++ b/packages/esmpy/patches/0001-remove-fragments.patch
@@ -0,0 +1,512 @@
+diff --git a/src/addon/esmpy/src/esmpy/fragments/dump_esmf_internal_info.py b/src/addon/esmpy/src/esmpy/fragments/dump_esmf_internal_info.py
+deleted file mode 100644
+index ed9b5f33b1..0000000000
+--- a/src/addon/esmpy/src/esmpy/fragments/dump_esmf_internal_info.py
++++ /dev/null
+@@ -1,151 +0,0 @@
+-# This file contains old routines to dump internal ESMF info from ESMPy Grid and Field objects
+-# This code is likely obsolete, but was useful in the original development process ..
+-#    so it is being kept for a rainy day situation
+-
+-def dump_gridinfo(self, stagger):
+-
+-    [x,y,z] = [0,1,2]
+-
+-    print "bounds - low, high"
+-    print self.lower_bounds[stagger], \
+-                self.upper_bounds[stagger]
+-    print "shape - [x, y, z] or [lat, lon]"
+-    print self.coords[stagger][0].shape
+-
+-    if self.rank == 2:
+-        return [self.coords[stagger][x], self.coords[stagger][y]]
+-    elif self.rank == 3:
+-        return [self.coords[stagger][x], self.coords[stagger][y], self.coords[stagger][z]]
+-
+-def dump_gridinfo_lower(self, stagger):
+-    [x, y, z] = [0, 1, 2]
+-
+-    print "bounds - low, high"
+-    print self.lower_bounds[stagger], \
+-                self.upper_bounds[stagger]
+-    print "shape - [x, y, z] or [lat, lon]"
+-    print self.coords[stagger][0].shape
+-
+-    # retrieve buffers to esmf coordinate memory
+-    gridptrX = self.get_grid_coords_from_esmc(x, stagger)
+-    gridptrY = self.get_grid_coords_from_esmc(y, stagger)
+-
+-    #print esmf_coords
+-    if self.rank == 2:
+-        return [gridptrX, gridptrY]
+-    elif self.rank == 3:
+-        gridptrZ = self.get_grid_coords_from_esmc(z, stagger)
+-        return [gridptrX, gridptrY, gridptrZ]
+-
+-def dump_gridinfo_ctypes(self, stagger, dim=2):
+-
+-    # find the size of the local coordinates at this stagger location
+-    from operator import mul
+-    size = reduce(mul,self.size[stagger])
+-    [x, y, z] = [0, 1, 2]
+-
+-    # get the pointer to the underlying ESMF data array for coordinates
+-
+-    xptr = ESMP_GridGetCoordPtr(self, x, staggerloc=stagger)
+-
+-    import ctypes;
+-    buffer_from_memory = ctypes.pythonapi.PyBuffer_FromMemory
+-    buffer_from_memory.restype = ctypes.py_object
+-    xbuffer = buffer_from_memory(xptr, int(8*size))
+-    '''
+-    xbuffer = np.core.multiarray.int_asbuffer(
+-        ct.addressof(xptr.contents),
+-        np.dtype(constants._ESMF2PythonType[self.type]).itemsize*size)
+-    '''
+-    xcoords = np.frombuffer(xbuffer, np.float64)
+-    #xcoordarray = numpy.ndarray((nrows, ncols), dtype=numpy.float32, order='F',
+-    #                 buffer=buf)
+-
+-    yptr = ESMP_GridGetCoordPtr(self, y, staggerloc=stagger)
+-    ybuffer = np.core.multiarray.int_asbuffer(
+-        ct.addressof(yptr.contents),
+-        np.dtype(constants._ESMF2PythonType[self.type]).itemsize*size)
+-    ycoords = np.frombuffer(ybuffer, constants._ESMF2PythonType[self.type])
+-
+-    print "DIAGNOSTICS:"
+-    print "self.type = ", self.type
+-    print "constants._ESMF2PythonType", constants._ESMF2PythonType[self.type]
+-    print "constants._ESMF2PythonType.itemsize", constants._ESMF2PythonType[self.type].itemsize
+-
+-
+-    # find the size of the local coordinates at this stagger location
+-    from operator import mul
+-    size = reduce(mul,self.size[stagger])
+-
+-    # these appear to both return bounds information only
+-    lb, ub = ESMP_GridGetCoordBounds(self, staggerloc=stagger)
+-
+-    print "Bounds:"
+-    print "  ESMPy.Grid:    ", size
+-    print "  ESMPy.ctypes1: ", lb, ub
+-
+-
+-    print "Coordinates:"
+-    I = ub[x]-lb[x]
+-    J = ub[y]-lb[y]
+-    if dim == 3:
+-        K = ub[z]-lb[z]
+-
+-    coordcount = 0
+-    if dim == 2:
+-        for i in range(I):
+-            for j in range(J):
+-                ind = i*J + j
+-
+-                if  (1e-10 > xcoords[ind] and xcoords[ind] != 0) or \
+-                    xcoords[ind] > 360 or \
+-                    -90 > ycoords[ind] or \
+-                    (ycoords[ind] > -1e-10 and 1e-10 > ycoords[ind] and ycoords[ind] != 0) or \
+-                    ycoords[ind] > 90:
+-
+-                    print "[", i, ", ", j, "] = [", xcoords[ind], ", ", ycoords[ind], "]"
+-
+-                coordcount += 1
+-    elif dim == 3:
+-        zptr = ESMP_GridGetCoordPtr(self, z, staggerloc=stagger)
+-        zbuffer = np.core.multiarray.int_asbuffer(
+-            ct.addressof(zptr.contents),
+-            np.dtype(constants._ESMF2PythonType[self.type]).itemsize*size)
+-        zcoords = np.frombuffer(zbuffer, constants._ESMF2PythonType[self.type])
+-
+-        for i in xrange(I):
+-            for j in xrange(J):
+-                for k in xrange(K):
+-                    ind = i*I + j*J + k
+-                    if  (1e-10 > xcoords[ind] and xcoords[ind] != 0) or \
+-                        xcoords[ind] > 360 or \
+-                        -90 > ycoords[ind] or \
+-                        (ycoords[ind] > -1e-10 and 1e-10 > ycoords[ind] and ycoords[ind] != 0) or \
+-                        ycoords[ind] > 90:
+-
+-                        print "[", i, ", ", j, "] = [", xcoords[ind], ", ", ycoords[ind], "]"
+-                    coordcount += 1
+-
+-    print "Coordcount = ", coordcount
+-    '''
+-    # create a numpy array to point to the ESMF allocation
+-    # reshape the numpy array of coordinates using Fortran ordering in Grid
+-    gridCoordP = np.reshape(gridCoordP, self.size[stagger], order='F')
+-    '''
+-
+-def _dump_field_coords_(self):
+-    from operator import mul
+-
+-    # retrieve buffers to esmf coordinate memory
+-    field_data = ESMP_FieldGetPtr(self.struct)
+-
+-    # find the reduced size of the coordinate arrays
+-    size = reduce(mul,self.grid.size[self.staggerloc])
+-
+-    # loop through and alias esmf data to numpy arrays
+-    buffer = np.core.multiarray.int_asbuffer(
+-        ct.addressof(field_data.contents),
+-        np.dtype(constants._ESMF2PythonType[self.type]).itemsize*size)
+-    esmf_coords = np.frombuffer(buffer, constants._ESMF2PythonType[self.type])
+-
+-    print esmf_coords
+diff --git a/src/addon/esmpy/src/esmpy/fragments/extras.py b/src/addon/esmpy/src/esmpy/fragments/extras.py
+deleted file mode 100644
+index 9d357fceb2..0000000000
+--- a/src/addon/esmpy/src/esmpy/fragments/extras.py
++++ /dev/null
+@@ -1,191 +0,0 @@
+-# $Id$
+-
+-"""
+-utilities module - most of these routines are not yet implemented.
+-"""
+-
+-#### IMPORT LIBRARIES #########################################################
+-
+-import ctypes as ct
+-import numpy as np
+-
+-from constants import *
+-from loadESMF import _ESMF
+-
+-#### CLASS DEFINITIONS ########################################################
+-
+-# shallow type 
+-#class ESMP_ArraySpec(Structure):
+-#    _fields_ = [("shallowMem", c_char*192)]
+-#    _fields_ = [("shallowMem", create_string_buffer(192))]
+-
+-
+-#### STATE ####################################################################
+-
+-_ESMF.ESMC_StateCreate.restype = c_void_p
+-_ESMF.ESMC_StateCreate.argtypes = [c_char_p, POINTER(c_int)]
+-def ESMP_StateCreate(name):
+-    """
+-    Preconditions: ESMP has been initialized.
+-    Postconditions: An ESMP_State has been created.
+-    Arguments:
+-        RETURN ESMP_State :: state
+-        string                        :: name
+-    """
+-    lrc = c_int(INIT)
+-    state = _ESMF.ESMC_StateCreate(name,byref(lrc))
+-    rc = lrc.value
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_StateCreate() failed with rc = '+str(rc))
+-    return state
+-
+-_ESMF.ESMC_StateDestroy.restype = c_int
+-_ESMF.ESMC_StateDestroy.argtypes = [c_void_p]
+-def ESMP_StateDestroy(state):
+-    """
+-    Preconditions: An ESMP_State has been created.
+-    Postconditions: The 'state' has been destroyed.
+-    Arguments:
+-        ESMP_State :: state
+-    """
+-    ptr = POINTER(c_void_p)
+-    stateptr = ptr(c_void_p(state))
+-    rc = _ESMF.ESMC_StateDestroy(stateptr)
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_StateDestroy() failed with rc = '+str(rc))
+-    return
+-
+-_ESMF.ESMC_StatePrint.restype = c_int
+-_ESMF.ESMC_StatePrint.argtypes = [c_void_p]
+-def ESMP_StatePrint(state):
+-    """
+-    Preconditions: An ESMP_State has been created.
+-    Postconditions: The contents of 'state' are printed to standard out.
+-    Arguments:
+-        ESMP_State :: state
+-    """
+-    rc = _ESMF.ESMC_StatePrint(state)
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_StatePrint() failed with rc = '+str(rc))
+-    return
+-
+-#### ARRAYSPEC ################################################################
+-
+-_ESMF.ESMC_ArraySpecGet.restype = c_int
+-_ESMF.ESMC_ArraySpecGet.argtypes = [c_void_p, POINTER(c_int), POINTER(c_uint)]
+-def ESMP_ArraySpecGet(arrayspec, rank, typekind):
+-    '''
+-    Preconditions: ESMP has been initialized and 'arrayspec' has been Set.
+-    Postconditions: Information about 'arrayspec' has been returned in the form
+-                    of a tuple containing: [rank, typekind].
+-    Arguments:
+-        RETURN integer       :: rank
+-        RETURN TypeKind      :: typekind
+-        type(ESMP_ArraySpec) :: arrayspec
+-    '''
+-    las = create_string_buffer(192)
+-    las.value = arrayspec.shallowMem
+-    lrank = c_int(INIT)
+-    ltk = c_uint(INIT)
+-    rc = _ESMF.ESMC_ArraySpecGet(las, byref(lrank), byref(ltk))
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_ArraySpecGet() failed with rc = '+str(rc))
+-    rank = lrank.value
+-    typekind.tk = ltk.value
+-    return rank, typekind
+-
+-_ESMF.ESMC_ArraySpecSet.restype = c_int
+-_ESMF.ESMC_ArraySpecSet.argtypes = [c_void_p, c_int, c_uint]
+-def ESMP_ArraySpecSet(arrayspec, rank, typekind):
+-    '''
+-    KNOWN BUG: This function is not yet implemented.
+-    Preconditions: ESMP has been initialized
+-    Postconditions: An ESMP_ArraySpec object has been setup.
+-    Arguments:
+-        RETURN ESMP_ArraySpec :: arrayspec
+-        integer               :: rank
+-        TypeKind              :: typekind
+-    '''
+-    las = create_string_buffer(192)
+-    
+-    rc = _ESMF.ESMC_ArraySpecSet(byref(las), rank, typekind.tk)
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_ArraySpecSet() failed with rc = '+str(rc))
+-    arrayspec.shallowMem = las.value
+-    print 'sizeof(arrayspec) = '+str(sizeof(arrayspec))
+-    print 'arrayspec = '+str(arrayspec)
+-    print 'sizeof(las) = '+str(sizeof(las))
+-    print 'las = '+str(las)
+-    print "\n"
+-    
+-    return arrayspec
+-
+-#### MESH ################################################################
+-
+-_ESMF.ESMC_MeshVTKHeader.restype = c_int
+-_ESMF.ESMC_MeshVTKHeader.argtypes = [c_char_p, POINTER(c_int), \
+-                                     POINTER(c_int), POINTER(c_int)]
+-def ESMP_MeshVTKHeader(fname, num_elem, num_node, conn_size):
+-    """
+-    KNOWN BUG: This function is not yet implemented.
+-    Preconditions: An ESMP_Mesh has been created and 'fname' is a handle to a 
+-                   valid (set of) vtk file(s).
+-    Postconditions: The header information for 'fname' is returned in a tuple
+-                    containing [num_elem, num_node, conn_size].
+-    Arguments:
+-        RETURN integer :: num_elem
+-        RETURN integer :: num_node
+-        RETURN integer :: conn_size
+-        character      :: fname
+-    """
+-    nes = c_int(INIT)
+-    nns = c_int(INIT)
+-    cns = c_int(INIT)
+-    rc = _ESMF.ESMC_MeshVTKHeader(c_char_p(fname), byref(nes), byref(nns), byref(cns))
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_MeshVTKHeader() failed with rc = '+str(rc))
+-    num_elem = nes.value
+-    num_node = nns.value
+-    conn_size = cns.value
+-    return num_elem, num_node, conn_size
+-    
+-_ESMF.ESMC_MeshVTKBody.restype = c_int
+-_ESMF.ESMC_MeshVTKBody.argtypes = [c_char_p, POINTER(c_int), \
+-                                   POINTER(c_double), POINTER(c_int), \
+-                                   POINTER(c_int), POINTER(c_int), \
+-                                   POINTER(c_int)]
+-def ESMP_MeshVTKBody(fname, nodeId, nodeCoord, nodeOwner,\
+-                     elemId, elemType, elemConn):
+-    """
+-    KNOWN BUG: This function is not yet implemented.
+-    Preconditions: An ESMP_Mesh has been created and 'fname' is a handle to a 
+-                   valid (set of) vtk file(s).
+-    Postconditions: The body information for 'fname' is returned in a tuple
+-                    containing [nodeId, nodeCoord, nodeOwner, 
+-                    elemId, elemType, elemConn].
+-    Arguments:
+-        RETURN integer :: nodeId
+-        RETURN double  :: nodeCoord
+-        RETURN integer :: nodeOwner
+-        RETURN integer :: elemId
+-        RETURN integer :: elemType
+-        RETURN integer :: elemConn
+-        character      :: fname
+-    """
+-    nis = c_int(INIT)
+-    ncs = c_double(INIT)
+-    nos = c_int(INIT)
+-    eis = c_int(INIT)
+-    ets = c_int(INIT)
+-    ecs = c_int(INIT)
+-    rc = _ESMF.ESMC_MeshVTKBody(fname, byref(nis), byref(ncs), byref(nos), \
+-                                byref(eis), byref(ets), byref(ecs))
+-    if rc != _ESMP_SUCCESS:
+-        raise NameError('ESMC_MeshVTKBody() failed with rc = '+str(rc))
+-    nodeId = nis.value
+-    nodeCoord = ncs.value
+-    nodeOwner = nos.value
+-    elemId = eis.value
+-    elemType = ets.value
+-    elemConn = ecs.value
+-    return nodeId, nodeCoord, nodeOwner, elemId, elemType, elemConn
+diff --git a/src/addon/esmpy/src/esmpy/fragments/remap.py b/src/addon/esmpy/src/esmpy/fragments/remap.py
+deleted file mode 100755
+index dc4206668f..0000000000
+--- a/src/addon/esmpy/src/esmpy/fragments/remap.py
++++ /dev/null
+@@ -1,152 +0,0 @@
+-# $Id$
+-#===============================================================================
+-#                                                        remap.py
+-# 
+-# This is a driver python script for the ESMF_RegridWeightGen application
+-# CAUTION: this is extremely outdated
+-#===============================================================================
+-
+-# ================================================================================
+-# ================================================================================
+-# 
+-# Dependencies
+-# ------------
+-# 
+-# 
+-# 
+-# ESMF must be built and installed for this python module to run properly.
+-# If ESMF is not on your system you can download, build and install it by 
+-# following the instructions in the "MORE HELP" section below.
+-# 
+-# The ESMF library must be built with NetCDF, and LAPACK support to enable
+-# full functionality with this module.
+-# 
+-# If ESMF is already installed on the system you are using, you 
+-# should only have to set the ESMFMKFILE environment variable.
+-# This environment variable should be pointed to the esmf.mk file in the ESMF
+-# installation.
+-# 
+-# The PYTHONPATH environment variable must also be set to the top-level
+-# ESMP directory, then this module is accessed with: 
+-# 
+-#    from src import remap
+-# 
+-# ================================================================================
+-# ================================================================================
+-# 
+-# Use
+-# ---
+-# 
+-# There are three required input parameters to this python interface, and one 
+-# optional parameter.    These are listed below, with descriptions and
+-# default values if applicable:
+-# 
+-# srcgrid - The source grid, in NetCDF format, to be used in the remapping
+-# weight generation.
+-# 
+-# dstgrid - The destination grid, in NetCDF format, to be used in the remapping
+-# weight generation.
+-# 
+-# weights - The name of the NetCDF file into which the remapping weights will be
+-# written.    
+-# 
+-# method - The interpolation method to be used to generate the weights.    The 
+-# default method is "bilinear", other methods are "patch" and "conserve".    The
+-# "patch" option specifies a patch recovery based finite element interpolation, 
+-# and "conserve" specifies and area weighted first order locally conservative
+-# method.
+-# 
+-# Some examples of how to use this interface are:
+-# 
+-# remap(source, destination, myweightsfile)
+-# 
+-# remap(source, destination, myweightsfile, conserve)
+-# 
+-# ================================================================================
+-# ================================================================================
+-# 
+-# More Help
+-# ------------
+-# 
+-# Details about the ESMF_RegridWeightGen application that is driven by the
+-# interface can be found in the ESMF Reference Manual:
+-# http://www.earthsystemmodeling.org/esmf_releases/public/ESMF_5_2_0r/ESMF_refdoc/node3.html
+-# 
+-# Information about the ESMF project can be found at the ESMF web site:
+-#                     http://www.earthsystemmodeling.org
+-#     
+-# Software documentation for the last public release is at:
+-#                     http://www.earthsystemmodeling.org -> Users -> Documentation
+-#     
+-# Software documentation for all releases is at:
+-#                     http://www.earthsystemmodeling.org -> Download -> View All Releases
+-#     
+-# The ESMF library source code is also available for download at:
+-#                     http://sourceforge.net/projects/esmf
+-#     
+-# Please contact esmf_support@ucar.edu with any questions or problems.
+-#     
+-# ================================================================================
+-
+-def remap(srcgrid, dstgrid, weights, method='bilinear'):
+-    import os
+-    import re
+-    import sys
+-        
+-    # current running executable directory
+-    RUNDIR = os.getcwd()
+-    
+-    #TODO is this in the esmf.mk?
+-    # find out how many procs to use on this machine
+-    if os.environ.get('ESMF_NUM_PROCS'):
+-        NUM_PROCS = os.environ.get('ESMF_NUM_PROCS')
+-    else:
+-        print "ESMF_NUM_PROCS not defined in user environment, using default ESMF_NUM_PROCS=1"
+-        NUM_PROCS = "1"
+-    
+-    # read the esmf.mk and get the location of the executable and the OS for 
+-    # this system
+-    if os.environ.get('ESMFMKFILE'):
+-        esmfmkfile = open(os.environ.get('ESMFMKFILE'))
+-    else:
+-        print "ESMFMKFILE is not defined!"
+-        sys.exit
+-    
+-    for line in esmfmkfile:
+-        if re.search(".*ESMF_APPSDIR.*", line) != None:
+-            ap_match = line 
+-    
+-    esmfmkfile.close()
+-    
+-    # clean up the executable name string for proper usage
+-    ap_match = ap_match.split("=")[1]
+-    APP = ap_match.strip()+"/ESMF_RegridWeightGen"
+-    
+-    # TODO: use 'bilinear' instead of 'b' for filename
+-    # TODO: this could be a dict
+-    options = ''
+-    file = ''
+-    # methods
+-    if method == 'bilinear':
+-        options = ''
+-        file = 'b'
+-    elif method == 'patch':
+-        options = '-m patch'
+-        file = 'p'
+-    elif method == 'conserve':
+-        options = '-m conserve'
+-        file = 'c'
+-    else:
+-        print 'Method: '+method+' is not supported!'
+-        sys.exit
+-    
+-    # TODO: what is this cruft?
+-    #weights = weights.split('.')[0]
+-    #weights = weights+"_"+file+".nc"
+-    #srcgrid = "/export/shared/grids/ll1deg_grid.nc"
+-    #dstgrid = "/export/shared/grids/ll2.5deg_grid.nc"
+-    #options = ""
+-    #weights = "srcgrid_to_dstgrid_b.nc"
+-    
+-    return os.system("mpirun -np "+NUM_PROCS+" "+APP+" "+options+\
+-                     " -s "+srcgrid+" -d "+dstgrid+" -w "+weights+" > RegridWeightGen.out")
diff --git a/packages/esmpy/patches/0002-include-shared-library.patch b/packages/esmpy/patches/0002-include-shared-library.patch
new file mode 100644
index 00000000..4e658627
--- /dev/null
+++ b/packages/esmpy/patches/0002-include-shared-library.patch
@@ -0,0 +1,48 @@
+diff --git a/src/addon/esmpy/pyproject.toml b/src/addon/esmpy/pyproject.toml
+index 18576c255b..fc2353229b 100644
+--- a/src/addon/esmpy/pyproject.toml
++++ b/src/addon/esmpy/pyproject.toml
+@@ -37,6 +37,9 @@ version = "placeholder" # this is a placeholder for the version pulled with git-
+ where = ["src"]
+ exclude = ["doc*"]
+ 
++[tool.setuptools.package-data]
++esmpy = ["esmf.mk", "libesmf_fullylinked.so"]
++
+ [tool.pytest.ini_options]
+ testpaths = [
+     "src/esmpy/test/test_api",
+diff --git a/src/addon/esmpy/src/esmpy/interface/loadESMF.py b/src/addon/esmpy/src/esmpy/interface/loadESMF.py
+index f5f73e68b0..6fa8b10763 100644
+--- a/src/addon/esmpy/src/esmpy/interface/loadESMF.py
++++ b/src/addon/esmpy/src/esmpy/interface/loadESMF.py
+@@ -6,6 +6,7 @@ import os
+ import sys
+ import traceback
+ import re
++from pathlib import Path
+ 
+ import esmpy.api.constants as constants
+ from esmpy.util.exceptions import VersionWarning, VersionMismatch
+@@ -21,11 +22,7 @@ try:
+ except:
+     raise ImportError('The CTypes library cannot be found.')
+ 
+-esmfmk = None
+-try:
+-    esmfmk = os.environ["ESMFMKFILE"]
+-except:
+-    raise ImportError('The ESMFMKFILE environment variable is not available.')
++esmfmk = str(Path(__file__).parent.parent / "esmf.mk")
+ 
+ #### INVESTIGATE esmf.mk ######################################################
+ 
+@@ -84,6 +81,8 @@ if esmfversion != constants._ESMPY_VERSION:
+ 
+ constants._ESMF_VERSION = esmfversion
+ 
++libsdir = str(Path(__file__).parent.parent)
++
+ 
+ if not libsdir:
+     raise ValueError("ESMF_LIBSDIR not found!")
diff --git a/packages/fcbench/meta.yaml b/packages/fcbench/meta.yaml
new file mode 100644
index 00000000..30d2f136
--- /dev/null
+++ b/packages/fcbench/meta.yaml
@@ -0,0 +1,37 @@
+package:
+  name: fcbench
+  version: 0.0.1
+  top-level:
+    - fcbench
+source:
+  path: ./field-compression-benchmark
+build:
+  script: |
+    # Set up a more modern nightly toolchain with support for emscripten and wasi
+    rm rust-toolchain
+    rustup default nightly-2023-09-29
+    rustup target add wasm32-unknown-emscripten --toolchain nightly-2023-09-29
+    rustup target add wasm32-wasi --toolchain nightly-2023-09-29
+
+    # For some reason, the .cargo/config is not respected during building
+    export RUSTFLAGS="--cfg uuid_unstable"
+requirements:
+  executable:
+    - rustup
+  run:
+    - cfgrib
+    - dask
+    - netcdf4
+    - pint
+    - proplot
+    - xarray
+    - xeofs
+    - xhistogram
+    - zarr
+about:
+  home: https://github.com/juntyr/field-compression-benchmark
+  summary:
+    The suite compares the performance of various data compression methods with
+    different settings across a variety of variables and their derivatives from
+    different GRIB, NetCDF, or Zarr datasets.
+  license: MIT OR Apache-2.0
diff --git a/packages/fcpy/meta.yaml b/packages/fcpy/meta.yaml
new file mode 100644
index 00000000..54d6908a
--- /dev/null
+++ b/packages/fcpy/meta.yaml
@@ -0,0 +1,38 @@
+package:
+  name: fcpy
+  version: 0.2.0
+  top-level:
+    - fcpy
+source:
+  path: fcpy
+test:
+  imports:
+    - fcpy
+requirements:
+  run:
+    - Cartopy
+    - cfgrib  # only for pre-loading
+    - cmcrameri  # only for pre-loading
+    - cycler
+    - dask
+    - h5netcdf  # only for pre-loading
+    - ipyfilite
+    - ipyloglite
+    - lzma  # only for pre-loading
+    - matplotlib
+    - MetPy  # only for pre-loading
+    - netcdf4  # only for pre-loading
+    - numcodecs
+    - numpy
+    - pandas
+    - pyodide-http
+    - pysz
+    - scikit-image
+    - xarray
+    - zarr
+    - zfpy  # only for pre-loading
+
+about:
+  home: https://github.com/ecmwf-lab/field-compression
+  summary: ECMWF Field Compression Laboratory
+  license: Apache-2.0
diff --git a/packages/findlibs/meta.yaml b/packages/findlibs/meta.yaml
new file mode 100644
index 00000000..b4213bfc
--- /dev/null
+++ b/packages/findlibs/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: findlibs
+  version: 0.0.5
+  top-level:
+    - findlibs
+source:
+  url: https://files.pythonhosted.org/packages/ae/be/6c72ef9d990cd25fe3dd97ebe9d77a859f7d27b7273e62ad750846d207ee/findlibs-0.0.5.tar.gz
+  sha256: 7a801571e999d0ee83f9b92cbb598c21f861ee26ca9dba74cea8958ba4335e7e
+about:
+  home: https://github.com/ecmwf/findlibs
+  PyPI: https://pypi.org/project/findlibs
+  summary: A packages to search for shared libraries on various platforms
+  license: Apache License Version 2.0
diff --git a/packages/h5netcdf/meta.yaml b/packages/h5netcdf/meta.yaml
new file mode 100644
index 00000000..df93febc
--- /dev/null
+++ b/packages/h5netcdf/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: h5netcdf
+  version: 1.2.0
+  top-level:
+    - h5netcdf
+requirements:
+  run:
+    - h5py
+    - packaging
+source:
+  url: https://files.pythonhosted.org/packages/d1/11/8116d6f209c8588ceb1382fddb8820fc720330373d9bd1a09434d684dbde/h5netcdf-1.2.0-py3-none-any.whl
+  sha256: aa53c39b94bcd4595a2e5a2f62f3fb4fb8a723b5ca0a05f2db352f014bcfe72c
+about:
+  home: "https://github.com/h5netcdf/h5netcdf"
+  PyPI: https://pypi.org/project/h5netcdf
+  summary: netCDF4 via h5py
+  license: BSD-3-Clause
diff --git a/packages/importlib_metadata/meta.yaml b/packages/importlib_metadata/meta.yaml
new file mode 100644
index 00000000..081bb2cf
--- /dev/null
+++ b/packages/importlib_metadata/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: importlib_metadata
+  version: 6.6.0
+  top-level:
+    - importlib_metadata
+source:
+  url: https://files.pythonhosted.org/packages/30/bb/bf2944b8b88c65b797acc2c6a2cb0fb817f7364debf0675792e034013858/importlib_metadata-6.6.0-py3-none-any.whl
+  sha256: 43dd286a2cd8995d5eaef7fee2066340423b818ed3fd70adf0bad5f1fac53fed
+requirements:
+  run:
+    - zipp
+about:
+  home: https://github.com/python/importlib_metadata
+  PyPI: https://pypi.org/project/importlib_metadata
+  summary: Read metadata from Python packages
+  license: "Apache Software License"
diff --git a/packages/ipyfilite/meta.yaml b/packages/ipyfilite/meta.yaml
new file mode 100644
index 00000000..2618f15a
--- /dev/null
+++ b/packages/ipyfilite/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: ipyfilite
+  version: 0.1.27
+  top-level:
+    - ipyfilite
+source:
+  url: https://files.pythonhosted.org/packages/9e/6d/6fbfe3cf613507188327710775ef193312869c348d7c2001407eff67b712/ipyfilite-0.1.27-py3-none-any.whl
+  sha256: d12a003a0e366fabeb236e7b7e9beefe7051a962d617cded60f59e445a88a35c
+requirements:
+  run:
+    - ipywidgets
+about:
+  home: https://github.com/juntyr/ipyfilite
+  PyPI: https://pypi.org/project/ipyfilite
+  summary:
+    File upload widget specifically for Pyodide kernels running in JupyterLite.
+    Uploaded files are not loaded into memory but mounted as read-only files in a
+    new WORKERFS.
+  license: BSD 3-Clause License
diff --git a/packages/ipyloglite/meta.yaml b/packages/ipyloglite/meta.yaml
new file mode 100644
index 00000000..559208e3
--- /dev/null
+++ b/packages/ipyloglite/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: ipyloglite
+  version: 0.0.0
+  top-level:
+    - ipyloglite
+source:
+  url: https://files.pythonhosted.org/packages/4d/0f/244966385120ce75d9d6f01e324820a366e8b83797e7b10e8aa519376146/ipyloglite-0.0.0-py3-none-any.whl
+  sha256: f3f1365dce45ce09ea2eb3c0e0dbaf392b21a8659b6bfaaf90f5a2fc620491e0
+about:
+  home: https://github.com/juntyr/ipyloglite
+  PyPI: https://pypi.org/project/ipyloglite
+  summary: Forward console.log and friends to cell outputs in JupyterLite.
+  license: MIT OR Apache-2.0
diff --git a/packages/ipywidgets/meta.yaml b/packages/ipywidgets/meta.yaml
new file mode 100644
index 00000000..f4e47d07
--- /dev/null
+++ b/packages/ipywidgets/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: ipywidgets
+  version: 8.0.6
+  top-level:
+    - ipywidgets
+source:
+  url: https://files.pythonhosted.org/packages/50/7d/2c8b7bba2b1c2b5d1299f22fa7853f09b573c84e63b62870c13a6ec11990/ipywidgets-8.0.6-py3-none-any.whl
+  sha256: a60bf8d2528997e05ac83fd19ea2fbe65f2e79fbe1b2b35779bdfc46c2941dcc
+requirements:
+  run:
+    - widgetsnbextension
+    - jupyterlab_widgets
+about:
+  home: http://jupyter.org
+  PyPI: https://pypi.org/project/ipywidgets
+  summary: Jupyter interactive widgets
+  license: BSD 3-Clause License
diff --git a/packages/jupyterlab_widgets/meta.yaml b/packages/jupyterlab_widgets/meta.yaml
new file mode 100644
index 00000000..f8920c6c
--- /dev/null
+++ b/packages/jupyterlab_widgets/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: jupyterlab_widgets
+  version: 3.0.7
+  top-level:
+    - jupyterlab_widgets
+source:
+  url: https://files.pythonhosted.org/packages/46/98/e7ce879b7b5d4871b80e291be967d22e5e66fa43474c476a95fe6231f50d/jupyterlab_widgets-3.0.7-py3-none-any.whl
+  sha256: c73f8370338ec19f1bec47254752d6505b03601cbd5a67e6a0b184532f73a459
+about:
+  home: https://github.com/jupyter-widgets/ipywidgets
+  PyPI: https://pypi.org/project/jupyterlab_widgets
+  summary: Jupyter interactive widgets for JupyterLab
+  license: BSD-3-Clause
diff --git a/packages/libSZ3c/meta.yaml b/packages/libSZ3c/meta.yaml
new file mode 100644
index 00000000..26e783d3
--- /dev/null
+++ b/packages/libSZ3c/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: libSZ3c
+  version: 3.1.7
+source:
+  url: https://github.com/szcompressor/SZ3/tarball/1e1dc10
+  sha256: 5873e589f2e7236c9ee83bd2ace392bec6f04a4bc1fd93feade0d62018344857
+  extract_dir: szcompressor-SZ3-1e1dc10
+  patches:
+    # Adapted from https://github.com/skarupke/flat_hash_map/pull/18
+    - patches/0001-skahash-32-bit.patch
+requirements:
+  host:
+    - numpy
+
+build:
+  type: shared_library
+  script: |
+    mkdir -p build
+
+    cd build && \
+      emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=$WASM_LIBRARY_DIR \
+        -DCMAKE_BUILD_TYPE=Release;
+    
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make install;
+
+about:
+  home: https://github.com/szcompressor/SZ3
+  summary: "SZ3: A Modular Error-bounded Lossy Compression Framework for Scientific Datasets"
+  license: BSD-3-Clause
diff --git a/packages/libSZ3c/patches/0001-skahash-32-bit.patch b/packages/libSZ3c/patches/0001-skahash-32-bit.patch
new file mode 100644
index 00000000..464a4be4
--- /dev/null
+++ b/packages/libSZ3c/patches/0001-skahash-32-bit.patch
@@ -0,0 +1,375 @@
+diff --git a/include/SZ3/utils/ska_hash/bytell_hash_map.hpp b/include/SZ3/utils/ska_hash/bytell_hash_map.hpp
+index 9c9a246..47ac512 100644
+--- a/include/SZ3/utils/ska_hash/bytell_hash_map.hpp
++++ b/include/SZ3/utils/ska_hash/bytell_hash_map.hpp
+@@ -41,7 +41,14 @@ struct sherwood_v8_constants
+         return metadata & bits_for_distance;
+     }
+ 
+-    static constexpr int num_jump_distances = 126;
++    static constexpr int num_jump_distances =
++#ifdef ENV64BIT
++    126
++#else // if 32 bits
++	100
++#endif
++	;
++
+     // jump distances chosen like this:
+     // 1. pick the first 16 integers to promote staying in the same block
+     // 2. add the next 66 triangular numbers to get even jumps when
+@@ -61,7 +68,11 @@ struct sherwood_v8_constants
+ 
+         3741, 8385, 18915, 42486, 95703, 215496, 485605, 1091503, 2456436,
+         5529475, 12437578, 27986421, 62972253, 141700195, 318819126, 717314626,
+-        1614000520, 3631437253, 8170829695, 18384318876, 41364501751,
++        1614000520, 3631437253,
++
++#ifdef ENV64BIT
++
++		8170829695, 18384318876, 41364501751,
+         93070021080, 209407709220, 471167588430, 1060127437995, 2385287281530,
+         5366895564381, 12075513791265, 27169907873235, 61132301007778,
+         137547673121001, 309482258302503, 696335090510256, 1566753939653640,
+@@ -69,6 +80,7 @@ struct sherwood_v8_constants
+         40154190394120111, 90346928493040500, 203280588949935750,
+         457381324898247375, 1029107980662394500, 2315492957028380766,
+         5209859150892887590,
++#endif
+     };
+ };
+ template<typename T>
+diff --git a/include/SZ3/utils/ska_hash/flat_hash_map.hpp b/include/SZ3/utils/ska_hash/flat_hash_map.hpp
+index a8723ee..41e917d 100644
+--- a/include/SZ3/utils/ska_hash/flat_hash_map.hpp
++++ b/include/SZ3/utils/ska_hash/flat_hash_map.hpp
+@@ -4,6 +4,9 @@
+ 
+ #pragma once
+ 
++#define ENV32BIT
++// #define ENV64BIT
++
+ #include <cstdint>
+ #include <cstddef>
+ #include <functional>
+@@ -207,6 +210,7 @@ struct sherwood_v3_entry
+ 
+ inline int8_t log2(size_t value)
+ {
++#ifdef ENV64BIT
+     static constexpr int8_t table[64] =
+     {
+         63,  0, 58,  1, 59, 47, 53,  2,
+@@ -225,6 +229,23 @@ inline int8_t log2(size_t value)
+     value |= value >> 16;
+     value |= value >> 32;
+     return table[((value - (value >> 1)) * 0x07EDD5E59A4E28C2) >> 58];
++#endif
++#ifdef ENV32BIT
++    static constexpr int8_t table[32] =
++    {
++         0,  9,  1, 10, 13, 21,  2, 29,
++        11, 14, 16, 18, 22, 25,  3, 30,
++         8, 12, 20, 28, 15, 17, 24,  7,
++        19, 27, 23,  6, 26,  5,  4, 31
++    };
++
++    value |= value >> 1;
++    value |= value >> 2;
++    value |= value >> 4;
++    value |= value >> 8;
++    value |= value >> 16;
++    return table[(value*0x07C4ACDD) >> 27];
++#endif
+ }
+ 
+ template<typename T, bool>
+@@ -258,7 +279,9 @@ inline size_t next_power_of_two(size_t i)
+     i |= i >> 4;
+     i |= i >> 8;
+     i |= i >> 16;
++#ifdef ENV64BIT
+     i |= i >> 32;
++#endif
+     ++i;
+     return i;
+ }
+@@ -929,97 +952,99 @@ private:
+ 
+ struct prime_number_hash_policy
+ {
+-    static size_t mod0(size_t) { return 0llu; }
+-    static size_t mod2(size_t hash) { return hash % 2llu; }
+-    static size_t mod3(size_t hash) { return hash % 3llu; }
+-    static size_t mod5(size_t hash) { return hash % 5llu; }
+-    static size_t mod7(size_t hash) { return hash % 7llu; }
+-    static size_t mod11(size_t hash) { return hash % 11llu; }
+-    static size_t mod13(size_t hash) { return hash % 13llu; }
+-    static size_t mod17(size_t hash) { return hash % 17llu; }
+-    static size_t mod23(size_t hash) { return hash % 23llu; }
+-    static size_t mod29(size_t hash) { return hash % 29llu; }
+-    static size_t mod37(size_t hash) { return hash % 37llu; }
+-    static size_t mod47(size_t hash) { return hash % 47llu; }
+-    static size_t mod59(size_t hash) { return hash % 59llu; }
+-    static size_t mod73(size_t hash) { return hash % 73llu; }
+-    static size_t mod97(size_t hash) { return hash % 97llu; }
+-    static size_t mod127(size_t hash) { return hash % 127llu; }
+-    static size_t mod151(size_t hash) { return hash % 151llu; }
+-    static size_t mod197(size_t hash) { return hash % 197llu; }
+-    static size_t mod251(size_t hash) { return hash % 251llu; }
+-    static size_t mod313(size_t hash) { return hash % 313llu; }
+-    static size_t mod397(size_t hash) { return hash % 397llu; }
+-    static size_t mod499(size_t hash) { return hash % 499llu; }
+-    static size_t mod631(size_t hash) { return hash % 631llu; }
+-    static size_t mod797(size_t hash) { return hash % 797llu; }
+-    static size_t mod1009(size_t hash) { return hash % 1009llu; }
+-    static size_t mod1259(size_t hash) { return hash % 1259llu; }
+-    static size_t mod1597(size_t hash) { return hash % 1597llu; }
+-    static size_t mod2011(size_t hash) { return hash % 2011llu; }
+-    static size_t mod2539(size_t hash) { return hash % 2539llu; }
+-    static size_t mod3203(size_t hash) { return hash % 3203llu; }
+-    static size_t mod4027(size_t hash) { return hash % 4027llu; }
+-    static size_t mod5087(size_t hash) { return hash % 5087llu; }
+-    static size_t mod6421(size_t hash) { return hash % 6421llu; }
+-    static size_t mod8089(size_t hash) { return hash % 8089llu; }
+-    static size_t mod10193(size_t hash) { return hash % 10193llu; }
+-    static size_t mod12853(size_t hash) { return hash % 12853llu; }
+-    static size_t mod16193(size_t hash) { return hash % 16193llu; }
+-    static size_t mod20399(size_t hash) { return hash % 20399llu; }
+-    static size_t mod25717(size_t hash) { return hash % 25717llu; }
+-    static size_t mod32401(size_t hash) { return hash % 32401llu; }
+-    static size_t mod40823(size_t hash) { return hash % 40823llu; }
+-    static size_t mod51437(size_t hash) { return hash % 51437llu; }
+-    static size_t mod64811(size_t hash) { return hash % 64811llu; }
+-    static size_t mod81649(size_t hash) { return hash % 81649llu; }
+-    static size_t mod102877(size_t hash) { return hash % 102877llu; }
+-    static size_t mod129607(size_t hash) { return hash % 129607llu; }
+-    static size_t mod163307(size_t hash) { return hash % 163307llu; }
+-    static size_t mod205759(size_t hash) { return hash % 205759llu; }
+-    static size_t mod259229(size_t hash) { return hash % 259229llu; }
+-    static size_t mod326617(size_t hash) { return hash % 326617llu; }
+-    static size_t mod411527(size_t hash) { return hash % 411527llu; }
+-    static size_t mod518509(size_t hash) { return hash % 518509llu; }
+-    static size_t mod653267(size_t hash) { return hash % 653267llu; }
+-    static size_t mod823117(size_t hash) { return hash % 823117llu; }
+-    static size_t mod1037059(size_t hash) { return hash % 1037059llu; }
+-    static size_t mod1306601(size_t hash) { return hash % 1306601llu; }
+-    static size_t mod1646237(size_t hash) { return hash % 1646237llu; }
+-    static size_t mod2074129(size_t hash) { return hash % 2074129llu; }
+-    static size_t mod2613229(size_t hash) { return hash % 2613229llu; }
+-    static size_t mod3292489(size_t hash) { return hash % 3292489llu; }
+-    static size_t mod4148279(size_t hash) { return hash % 4148279llu; }
+-    static size_t mod5226491(size_t hash) { return hash % 5226491llu; }
+-    static size_t mod6584983(size_t hash) { return hash % 6584983llu; }
+-    static size_t mod8296553(size_t hash) { return hash % 8296553llu; }
+-    static size_t mod10453007(size_t hash) { return hash % 10453007llu; }
+-    static size_t mod13169977(size_t hash) { return hash % 13169977llu; }
+-    static size_t mod16593127(size_t hash) { return hash % 16593127llu; }
+-    static size_t mod20906033(size_t hash) { return hash % 20906033llu; }
+-    static size_t mod26339969(size_t hash) { return hash % 26339969llu; }
+-    static size_t mod33186281(size_t hash) { return hash % 33186281llu; }
+-    static size_t mod41812097(size_t hash) { return hash % 41812097llu; }
+-    static size_t mod52679969(size_t hash) { return hash % 52679969llu; }
+-    static size_t mod66372617(size_t hash) { return hash % 66372617llu; }
+-    static size_t mod83624237(size_t hash) { return hash % 83624237llu; }
+-    static size_t mod105359939(size_t hash) { return hash % 105359939llu; }
+-    static size_t mod132745199(size_t hash) { return hash % 132745199llu; }
+-    static size_t mod167248483(size_t hash) { return hash % 167248483llu; }
+-    static size_t mod210719881(size_t hash) { return hash % 210719881llu; }
+-    static size_t mod265490441(size_t hash) { return hash % 265490441llu; }
+-    static size_t mod334496971(size_t hash) { return hash % 334496971llu; }
+-    static size_t mod421439783(size_t hash) { return hash % 421439783llu; }
+-    static size_t mod530980861(size_t hash) { return hash % 530980861llu; }
+-    static size_t mod668993977(size_t hash) { return hash % 668993977llu; }
+-    static size_t mod842879579(size_t hash) { return hash % 842879579llu; }
+-    static size_t mod1061961721(size_t hash) { return hash % 1061961721llu; }
+-    static size_t mod1337987929(size_t hash) { return hash % 1337987929llu; }
+-    static size_t mod1685759167(size_t hash) { return hash % 1685759167llu; }
+-    static size_t mod2123923447(size_t hash) { return hash % 2123923447llu; }
+-    static size_t mod2675975881(size_t hash) { return hash % 2675975881llu; }
+-    static size_t mod3371518343(size_t hash) { return hash % 3371518343llu; }
+-    static size_t mod4247846927(size_t hash) { return hash % 4247846927llu; }
++    static size_t mod0(size_t) { return 0u; }
++    static size_t mod2(size_t hash) { return hash % 2u; }
++    static size_t mod3(size_t hash) { return hash % 3u; }
++    static size_t mod5(size_t hash) { return hash % 5u; }
++    static size_t mod7(size_t hash) { return hash % 7u; }
++    static size_t mod11(size_t hash) { return hash % 11u; }
++    static size_t mod13(size_t hash) { return hash % 13u; }
++    static size_t mod17(size_t hash) { return hash % 17u; }
++    static size_t mod23(size_t hash) { return hash % 23u; }
++    static size_t mod29(size_t hash) { return hash % 29u; }
++    static size_t mod37(size_t hash) { return hash % 37u; }
++    static size_t mod47(size_t hash) { return hash % 47u; }
++    static size_t mod59(size_t hash) { return hash % 59u; }
++    static size_t mod73(size_t hash) { return hash % 73u; }
++    static size_t mod97(size_t hash) { return hash % 97u; }
++    static size_t mod127(size_t hash) { return hash % 127u; }
++    static size_t mod151(size_t hash) { return hash % 151u; }
++    static size_t mod197(size_t hash) { return hash % 197u; }
++    static size_t mod251(size_t hash) { return hash % 251u; }
++    static size_t mod313(size_t hash) { return hash % 313u; }
++    static size_t mod397(size_t hash) { return hash % 397u; }
++    static size_t mod499(size_t hash) { return hash % 499u; }
++    static size_t mod631(size_t hash) { return hash % 631u; }
++    static size_t mod797(size_t hash) { return hash % 797u; }
++    static size_t mod1009(size_t hash) { return hash % 1009u; }
++    static size_t mod1259(size_t hash) { return hash % 1259u; }
++    static size_t mod1597(size_t hash) { return hash % 1597u; }
++    static size_t mod2011(size_t hash) { return hash % 2011u; }
++    static size_t mod2539(size_t hash) { return hash % 2539u; }
++    static size_t mod3203(size_t hash) { return hash % 3203u; }
++    static size_t mod4027(size_t hash) { return hash % 4027u; }
++    static size_t mod5087(size_t hash) { return hash % 5087u; }
++    static size_t mod6421(size_t hash) { return hash % 6421u; }
++    static size_t mod8089(size_t hash) { return hash % 8089u; }
++    static size_t mod10193(size_t hash) { return hash % 10193u; }
++    static size_t mod12853(size_t hash) { return hash % 12853u; }
++    static size_t mod16193(size_t hash) { return hash % 16193u; }
++    static size_t mod20399(size_t hash) { return hash % 20399u; }
++    static size_t mod25717(size_t hash) { return hash % 25717u; }
++    static size_t mod32401(size_t hash) { return hash % 32401u; }
++    static size_t mod40823(size_t hash) { return hash % 40823u; }
++    static size_t mod51437(size_t hash) { return hash % 51437u; }
++    static size_t mod64811(size_t hash) { return hash % 64811u; }
++    static size_t mod81649(size_t hash) { return hash % 81649u; }
++    static size_t mod102877(size_t hash) { return hash % 102877u; }
++    static size_t mod129607(size_t hash) { return hash % 129607u; }
++    static size_t mod163307(size_t hash) { return hash % 163307u; }
++    static size_t mod205759(size_t hash) { return hash % 205759u; }
++    static size_t mod259229(size_t hash) { return hash % 259229u; }
++    static size_t mod326617(size_t hash) { return hash % 326617u; }
++    static size_t mod411527(size_t hash) { return hash % 411527u; }
++    static size_t mod518509(size_t hash) { return hash % 518509u; }
++    static size_t mod653267(size_t hash) { return hash % 653267u; }
++    static size_t mod823117(size_t hash) { return hash % 823117u; }
++    static size_t mod1037059(size_t hash) { return hash % 1037059u; }
++    static size_t mod1306601(size_t hash) { return hash % 1306601u; }
++    static size_t mod1646237(size_t hash) { return hash % 1646237u; }
++    static size_t mod2074129(size_t hash) { return hash % 2074129u; }
++    static size_t mod2613229(size_t hash) { return hash % 2613229u; }
++    static size_t mod3292489(size_t hash) { return hash % 3292489u; }
++    static size_t mod4148279(size_t hash) { return hash % 4148279u; }
++    static size_t mod5226491(size_t hash) { return hash % 5226491u; }
++    static size_t mod6584983(size_t hash) { return hash % 6584983u; }
++    static size_t mod8296553(size_t hash) { return hash % 8296553u; }
++    static size_t mod10453007(size_t hash) { return hash % 10453007u; }
++    static size_t mod13169977(size_t hash) { return hash % 13169977u; }
++    static size_t mod16593127(size_t hash) { return hash % 16593127u; }
++    static size_t mod20906033(size_t hash) { return hash % 20906033u; }
++    static size_t mod26339969(size_t hash) { return hash % 26339969u; }
++    static size_t mod33186281(size_t hash) { return hash % 33186281u; }
++    static size_t mod41812097(size_t hash) { return hash % 41812097u; }
++    static size_t mod52679969(size_t hash) { return hash % 52679969u; }
++    static size_t mod66372617(size_t hash) { return hash % 66372617u; }
++    static size_t mod83624237(size_t hash) { return hash % 83624237u; }
++    static size_t mod105359939(size_t hash) { return hash % 105359939u; }
++    static size_t mod132745199(size_t hash) { return hash % 132745199u; }
++    static size_t mod167248483(size_t hash) { return hash % 167248483u; }
++    static size_t mod210719881(size_t hash) { return hash % 210719881u; }
++    static size_t mod265490441(size_t hash) { return hash % 265490441u; }
++    static size_t mod334496971(size_t hash) { return hash % 334496971u; }
++    static size_t mod421439783(size_t hash) { return hash % 421439783u; }
++    static size_t mod530980861(size_t hash) { return hash % 530980861u; }
++    static size_t mod668993977(size_t hash) { return hash % 668993977u; }
++    static size_t mod842879579(size_t hash) { return hash % 842879579u; }
++    static size_t mod1061961721(size_t hash) { return hash % 1061961721u; }
++    static size_t mod1337987929(size_t hash) { return hash % 1337987929u; }
++    static size_t mod1685759167(size_t hash) { return hash % 1685759167u; }
++    static size_t mod2123923447(size_t hash) { return hash % 2123923447u; }
++    static size_t mod2675975881(size_t hash) { return hash % 2675975881u; }
++    static size_t mod3371518343(size_t hash) { return hash % 3371518343u; }
++    static size_t mod4247846927(size_t hash) { return hash % 4247846927u; }
++
++#ifdef ENV64BIT
+     static size_t mod5351951779(size_t hash) { return hash % 5351951779llu; }
+     static size_t mod6743036717(size_t hash) { return hash % 6743036717llu; }
+     static size_t mod8495693897(size_t hash) { return hash % 8495693897llu; }
+@@ -1116,6 +1141,7 @@ struct prime_number_hash_policy
+     static size_t mod11493228998133068689(size_t hash) { return hash % 11493228998133068689llu; }
+     static size_t mod14480561146010017169(size_t hash) { return hash % 14480561146010017169llu; }
+     static size_t mod18446744073709551557(size_t hash) { return hash % 18446744073709551557llu; }
++#endif
+ 
+     using mod_function = size_t (*)(size_t);
+ 
+@@ -1130,20 +1156,22 @@ struct prime_number_hash_policy
+         // 5. get PrevPrime(2^64) and put it at the end
+         static constexpr const size_t prime_list[] =
+         {
+-            2llu, 3llu, 5llu, 7llu, 11llu, 13llu, 17llu, 23llu, 29llu, 37llu, 47llu,
+-            59llu, 73llu, 97llu, 127llu, 151llu, 197llu, 251llu, 313llu, 397llu,
+-            499llu, 631llu, 797llu, 1009llu, 1259llu, 1597llu, 2011llu, 2539llu,
+-            3203llu, 4027llu, 5087llu, 6421llu, 8089llu, 10193llu, 12853llu, 16193llu,
+-            20399llu, 25717llu, 32401llu, 40823llu, 51437llu, 64811llu, 81649llu,
+-            102877llu, 129607llu, 163307llu, 205759llu, 259229llu, 326617llu,
+-            411527llu, 518509llu, 653267llu, 823117llu, 1037059llu, 1306601llu,
+-            1646237llu, 2074129llu, 2613229llu, 3292489llu, 4148279llu, 5226491llu,
+-            6584983llu, 8296553llu, 10453007llu, 13169977llu, 16593127llu, 20906033llu,
+-            26339969llu, 33186281llu, 41812097llu, 52679969llu, 66372617llu,
+-            83624237llu, 105359939llu, 132745199llu, 167248483llu, 210719881llu,
+-            265490441llu, 334496971llu, 421439783llu, 530980861llu, 668993977llu,
+-            842879579llu, 1061961721llu, 1337987929llu, 1685759167llu, 2123923447llu,
+-            2675975881llu, 3371518343llu, 4247846927llu, 5351951779llu, 6743036717llu,
++            2u, 3u, 5u, 7u, 11u, 13u, 17u, 23u, 29u, 37u, 47u,
++            59u, 73u, 97u, 127u, 151u, 197u, 251u, 313u, 397u,
++            499u, 631u, 797u, 1009u, 1259u, 1597u, 2011u, 2539u,
++            3203u, 4027u, 5087u, 6421u, 8089u, 10193u, 12853u, 16193u,
++            20399u, 25717u, 32401u, 40823u, 51437u, 64811u, 81649u,
++            102877u, 129607u, 163307u, 205759u, 259229u, 326617u,
++            411527u, 518509u, 653267u, 823117u, 1037059u, 1306601u,
++            1646237u, 2074129u, 2613229u, 3292489u, 4148279u, 5226491u,
++            6584983u, 8296553u, 10453007u, 13169977u, 16593127u, 20906033u,
++            26339969u, 33186281u, 41812097u, 52679969u, 66372617u,
++            83624237u, 105359939u, 132745199u, 167248483u, 210719881u,
++            265490441u, 334496971u, 421439783u, 530980861u, 668993977u,
++            842879579u, 1061961721u, 1337987929u, 1685759167u, 2123923447u,
++            2675975881u, 3371518343u, 4247846927u
++#ifdef ENV64BIT
++            , 5351951779llu, 6743036717llu,
+             8495693897llu, 10703903591llu, 13486073473llu, 16991387857llu,
+             21407807219llu, 26972146961llu, 33982775741llu, 42815614441llu,
+             53944293929llu, 67965551447llu, 85631228929llu, 107888587883llu,
+@@ -1172,6 +1200,7 @@ struct prime_number_hash_policy
+             2873307249533267101llu, 3620140286502504283llu, 4561090950536962147llu,
+             5746614499066534157llu, 7240280573005008577llu, 9122181901073924329llu,
+             11493228998133068689llu, 14480561146010017169llu, 18446744073709551557llu
++#endif
+         };
+         static constexpr size_t (* const mod_functions[])(size_t) =
+         {
+@@ -1187,8 +1216,10 @@ struct prime_number_hash_policy
+             &mod41812097, &mod52679969, &mod66372617, &mod83624237, &mod105359939, &mod132745199,
+             &mod167248483, &mod210719881, &mod265490441, &mod334496971, &mod421439783,
+             &mod530980861, &mod668993977, &mod842879579, &mod1061961721, &mod1337987929,
+-            &mod1685759167, &mod2123923447, &mod2675975881, &mod3371518343, &mod4247846927,
+-            &mod5351951779, &mod6743036717, &mod8495693897, &mod10703903591, &mod13486073473,
++            &mod1685759167, &mod2123923447, &mod2675975881, &mod3371518343, &mod4247846927
++
++#ifdef ENV64BIT
++            , &mod5351951779, &mod6743036717, &mod8495693897, &mod10703903591, &mod13486073473,
+             &mod16991387857, &mod21407807219, &mod26972146961, &mod33982775741, &mod42815614441,
+             &mod53944293929, &mod67965551447, &mod85631228929, &mod107888587883, &mod135931102921,
+             &mod171262457903, &mod215777175787, &mod271862205833, &mod342524915839,
+@@ -1214,6 +1245,7 @@ struct prime_number_hash_policy
+             &mod2873307249533267101, &mod3620140286502504283, &mod4561090950536962147,
+             &mod5746614499066534157, &mod7240280573005008577, &mod9122181901073924329,
+             &mod11493228998133068689, &mod14480561146010017169, &mod18446744073709551557
++#endif
+         };
+         const size_t * found = std::lower_bound(std::begin(prime_list), std::end(prime_list) - 1, size);
+         size = *found;
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 226e381..cea7dec 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -65,7 +65,7 @@ if (GSL_FOUND)
+     target_link_libraries(${PROJECT_NAME} INTERFACE GSL::gsl)
+ endif ()
+ 
+-add_subdirectory(tools/sz3)
++# add_subdirectory(tools/sz3)
+ add_subdirectory(tools/sz3c)
+ 
+ 
diff --git a/packages/libeccodes/meta.yaml b/packages/libeccodes/meta.yaml
new file mode 100644
index 00000000..4b30089c
--- /dev/null
+++ b/packages/libeccodes/meta.yaml
@@ -0,0 +1,41 @@
+package:
+  name: libeccodes
+  version: 2.30.0
+
+source:
+  url: https://github.com/ecmwf/eccodes/archive/refs/tags/2.30.0.tar.gz
+  sha256: 5869817b76d1fd3b4b4d6ec3629231e4470f52a5abbfcec003974c1a7fdecbee
+  patches:
+    - patches/0001-32bit-support-hack.patch
+
+build:
+  type: shared_library
+  script: |
+    git clone --branch 3.7.0 --depth 1 https://github.com/ecmwf/ecbuild;
+
+    mkdir -p build;
+
+    cd build \
+        && emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=${WASM_LIBRARY_DIR} \
+        -DBUILD_SHARED_LIBS=ON \
+        -DENABLE_NETCDF=OFF \
+        -DENABLE_JPG=OFF \
+        -DENABLE_PNG=OFF \
+        -DENABLE_AEC=OFF \
+        -DENABLE_FORTRAN=OFF \
+        -DDISABLE_OS_CHECK=ON \
+        -DENABLE_TESTS=OFF \
+        -DENABLE_PRODUCT_GRIB=ON \
+        -DENABLE_PRODUCT_BUFR=ON \
+        -DENABLE_EXAMPLES=OFF \
+        -DENABLE_BUILD_TOOLS=OFF \
+        -DENABLE_INSTALL_ECCODES_DEFINITIONS=ON \
+        -DENABLE_INSTALL_ECCODES_SAMPLES=OFF;
+        #-DCMAKE_C_FLAGS="-s TOTAL_MEMORY=50790400" \
+        #-DCMAKE_CXX_FLAGS="-s TOTAL_MEMORY=50790400";
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make -j ${PYODIDE_JOBS:-3} install;
+
+    cp -P ${WASM_LIBRARY_DIR}/lib/libeccodes.so ${DISTDIR}
diff --git a/packages/libeccodes/patches/0001-32bit-support-hack.patch b/packages/libeccodes/patches/0001-32bit-support-hack.patch
new file mode 100644
index 00000000..3d270618
--- /dev/null
+++ b/packages/libeccodes/patches/0001-32bit-support-hack.patch
@@ -0,0 +1,83 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index f7085bcae..d495de0f5 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -66,9 +66,9 @@ ecbuild_debug("ECCODES_LITTLE_ENDIAN=${ECCODES_LITTLE_ENDIAN}")
+ ecbuild_info("Operating system=${CMAKE_SYSTEM} (${EC_OS_BITS} bits)")
+ 
+ # Only support 64 bit operating systems
+-if( NOT EC_OS_BITS EQUAL "64" )
+-    ecbuild_critical( "Operating system ${CMAKE_SYSTEM} (${EC_OS_BITS} bits) -- ecCodes only supports 64 bit platforms" )
+-endif()
++# if( NOT EC_OS_BITS EQUAL "64" )
++#     ecbuild_critical( "Operating system ${CMAKE_SYSTEM} (${EC_OS_BITS} bits) -- ecCodes only supports 64 bit platforms" )
++# endif()
+ 
+ ###############################################################################
+ # some variables/options of this project
+@@ -423,7 +423,7 @@ if( HAVE_BUILD_TOOLS )
+ endif()
+ add_subdirectory( fortran )
+ 
+-add_subdirectory( tests )
++# add_subdirectory( tests )
+ add_subdirectory( examples )
+ add_subdirectory( data )
+ add_subdirectory( samples )
+diff --git a/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc b/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
+index df99452a0..92e4fe6af 100644
+--- a/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
++++ b/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
+@@ -215,6 +215,15 @@ static void init_class(grib_accessor_class* c)
+ #define MAX_NUMBER_OF_GROUPS 65534
+ #define EFDEBUG 0
+ 
++static const size_t nbits[32]={
++        0x1, 0x2, 0x4, 0x8, 0x10, 0x20,
++        0x40, 0x80, 0x100, 0x200, 0x400, 0x800,
++        0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000,
++        0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,
++        0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000,
++        0x40000000, 0x80000000
++};
++/*
+ static const unsigned long nbits[64] = {
+     0x1, 0x2, 0x4, 0x8,
+     0x10, 0x20, 0x40, 0x80,
+@@ -233,6 +242,7 @@ static const unsigned long nbits[64] = {
+     0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
+     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
+ };
++*/
+ 
+ static long number_of_bits(grib_handle* h, unsigned long x)
+ {
+diff --git a/src/grib_accessor_class_second_order_bits_per_value.cc b/src/grib_accessor_class_second_order_bits_per_value.cc
+index 5cd3b970c..63f713fd5 100644
+--- a/src/grib_accessor_class_second_order_bits_per_value.cc
++++ b/src/grib_accessor_class_second_order_bits_per_value.cc
+@@ -151,7 +151,6 @@ static void init_class(grib_accessor_class* c)
+ 
+ /* END_CLASS_IMP */
+ 
+-/*
+ static const size_t nbits[32]={
+         0x1, 0x2, 0x4, 0x8, 0x10, 0x20,
+         0x40, 0x80, 0x100, 0x200, 0x400, 0x800,
+@@ -160,7 +159,7 @@ static const size_t nbits[32]={
+         0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000,
+         0x40000000, 0x80000000
+ };
+-*/
++/*
+ static const size_t nbits[64] = {
+     0x1, 0x2, 0x4, 0x8,
+     0x10, 0x20, 0x40, 0x80,
+@@ -179,6 +178,7 @@ static const size_t nbits[64] = {
+     0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
+     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
+ };
++*/
+ 
+ static int number_of_bits(size_t x, long* result)
+ {
diff --git a/packages/libesmf/lfortran.py b/packages/libesmf/lfortran.py
new file mode 100755
index 00000000..b7fb87f1
--- /dev/null
+++ b/packages/libesmf/lfortran.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+
+import shutil
+import subprocess
+import sys
+
+from pathlib import Path
+
+if __name__ == '__main__':
+    args = sys.argv
+
+    cpp_args = []
+
+    filepath = None
+    pre_filepath = None
+
+    i = 1
+    while i < len(args):
+        if args[i] == "-o":
+            filepath = args[i-1]
+            pre_filepath = str(Path(filepath).with_stem(Path(filepath).stem + "-pre"))
+            cpp_args[-1] = pre_filepath
+            i += 2
+        else:
+            if args[i] not in ["--generate-object-code", "--cpp", "--no-color"]:
+                cpp_args.append(args[i])
+            i += 1
+    
+    print("=== lfortran.py ===")
+    print(args)
+    print(filepath)
+    print(cpp_args)
+    
+    if filepath is not None:
+        shutil.copyfile(filepath, pre_filepath)
+
+        subprocess.run(["gcc", "-E", "-P", "-x", "c", "-C", "-nostdinc"] + cpp_args + ["-o", filepath], check=True)
+    
+    subprocess.run(["/src/miniconda3/bin/lfortran"] + args[1:], check=True)
diff --git a/packages/libesmf/llvm.sh b/packages/libesmf/llvm.sh
new file mode 100755
index 00000000..5bb1bf20
--- /dev/null
+++ b/packages/libesmf/llvm.sh
@@ -0,0 +1,173 @@
+#!/bin/bash
+################################################################################
+# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+# See https://llvm.org/LICENSE.txt for license information.
+# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+################################################################################
+#
+# This script will install the llvm toolchain on the different
+# Debian and Ubuntu versions
+
+set -eux
+
+usage() {
+    set +x
+    echo "Usage: $0 [llvm_major_version] [all] [OPTIONS]" 1>&2
+    echo -e "all\t\t\tInstall all packages." 1>&2
+    echo -e "-n=code_name\t\tSpecifies the distro codename, for example bionic" 1>&2
+    echo -e "-h\t\t\tPrints this help." 1>&2
+    echo -e "-m=repo_base_url\tSpecifies the base URL from which to download." 1>&2
+    exit 1;
+}
+
+CURRENT_LLVM_STABLE=16
+BASE_URL="http://apt.llvm.org"
+
+# Check for required tools
+needed_binaries=(lsb_release wget add-apt-repository gpg)
+missing_binaries=()
+for binary in "${needed_binaries[@]}"; do
+    if ! which $binary &>/dev/null ; then
+        missing_binaries+=($binary)
+    fi
+done
+if [[ ${#missing_binaries[@]} -gt 0 ]] ; then
+    echo "You are missing some tools this script requires: ${missing_binaries[@]}"
+    echo "(hint: apt install lsb-release wget software-properties-common gnupg)"
+    exit 4
+fi
+
+# Set default values for commandline arguments
+# We default to the current stable branch of LLVM
+LLVM_VERSION=$CURRENT_LLVM_STABLE
+ALL=0
+DISTRO=$(lsb_release -is)
+VERSION=$(lsb_release -sr)
+UBUNTU_CODENAME=""
+CODENAME_FROM_ARGUMENTS=""
+# Obtain VERSION_CODENAME and UBUNTU_CODENAME (for Ubuntu and its derivatives)
+source /etc/os-release
+DISTRO=${DISTRO,,}
+case ${DISTRO} in
+    debian)
+        if [[ "${VERSION}" == "unstable" ]] || [[ "${VERSION}" == "testing" ]]; then
+            CODENAME=unstable
+            LINKNAME=
+        else
+            # "stable" Debian release
+            CODENAME=${VERSION_CODENAME}
+            LINKNAME=-${CODENAME}
+        fi
+        ;;
+    *)
+        # ubuntu and its derivatives
+        if [[ -n "${UBUNTU_CODENAME}" ]]; then
+            CODENAME=${UBUNTU_CODENAME}
+            if [[ -n "${CODENAME}" ]]; then
+                LINKNAME=-${CODENAME}
+            fi
+        fi
+        ;;
+esac
+
+# read optional command line arguments
+if [ "$#" -ge 1 ] && [ "${1::1}" != "-" ]; then
+    if [ "$1" != "all" ]; then
+        LLVM_VERSION=$1
+    else
+        # special case for ./llvm.sh all
+        ALL=1
+    fi
+    OPTIND=2
+    if [ "$#" -ge 2 ]; then
+      if [ "$2" == "all" ]; then
+          # Install all packages
+          ALL=1
+          OPTIND=3
+      fi
+    fi
+fi
+
+while getopts ":hm:n:" arg; do
+    case $arg in
+    h)
+        usage
+        ;;
+    m)
+        BASE_URL=${OPTARG}
+        ;;
+    n)
+        CODENAME=${OPTARG}
+        if [[ "${CODENAME}" == "unstable" ]]; then
+            # link name does not apply to unstable repository
+            LINKNAME=
+        else
+            LINKNAME=-${CODENAME}
+        fi
+        CODENAME_FROM_ARGUMENTS="true"
+        ;;
+    esac
+done
+
+if [[ $EUID -ne 0 ]]; then
+   echo "This script must be run as root!"
+   exit 1
+fi
+
+declare -A LLVM_VERSION_PATTERNS
+LLVM_VERSION_PATTERNS[9]="-9"
+LLVM_VERSION_PATTERNS[10]="-10"
+LLVM_VERSION_PATTERNS[11]="-11"
+LLVM_VERSION_PATTERNS[12]="-12"
+LLVM_VERSION_PATTERNS[13]="-13"
+LLVM_VERSION_PATTERNS[14]="-14"
+LLVM_VERSION_PATTERNS[15]="-15"
+LLVM_VERSION_PATTERNS[16]="-16"
+LLVM_VERSION_PATTERNS[17]=""
+
+if [ ! ${LLVM_VERSION_PATTERNS[$LLVM_VERSION]+_} ]; then
+    echo "This script does not support LLVM version $LLVM_VERSION"
+    exit 3
+fi
+
+LLVM_VERSION_STRING=${LLVM_VERSION_PATTERNS[$LLVM_VERSION]}
+
+# join the repository name
+if [[ -n "${CODENAME}" ]]; then
+    REPO_NAME="deb ${BASE_URL}/${CODENAME}/  llvm-toolchain${LINKNAME}${LLVM_VERSION_STRING} main"
+
+    # check if the repository exists for the distro and version
+    if ! wget -q --method=HEAD ${BASE_URL}/${CODENAME} &> /dev/null; then
+        if [[ -n "${CODENAME_FROM_ARGUMENTS}" ]]; then
+            echo "Specified codename '${CODENAME}' is not supported by this script."
+        else
+            echo "Distribution '${DISTRO}' in version '${VERSION}' is not supported by this script."
+        fi
+        exit 2
+    fi
+fi
+
+
+# install everything
+
+if [[ ! -f /etc/apt/trusted.gpg.d/apt.llvm.org.asc ]]; then
+    # download GPG key once
+    wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
+fi
+
+if [[ -z "`apt-key list 2> /dev/null | grep -i llvm`" ]]; then
+    # Delete the key in the old format
+    apt-key del AF4F7421
+fi
+add-apt-repository "${REPO_NAME}"
+apt-get update
+PKG="clang-$LLVM_VERSION lldb-$LLVM_VERSION lld-$LLVM_VERSION clangd-$LLVM_VERSION"
+if [[ $ALL -eq 1 ]]; then
+    # same as in test-install.sh
+    # No worries if we have dups
+    PKG="$PKG clang-tidy-$LLVM_VERSION clang-format-$LLVM_VERSION clang-tools-$LLVM_VERSION llvm-$LLVM_VERSION-dev lld-$LLVM_VERSION lldb-$LLVM_VERSION llvm-$LLVM_VERSION-tools libomp-$LLVM_VERSION-dev libc++-$LLVM_VERSION-dev libc++abi-$LLVM_VERSION-dev libclang-common-$LLVM_VERSION-dev libclang-$LLVM_VERSION-dev libclang-cpp$LLVM_VERSION-dev libunwind-$LLVM_VERSION-dev"
+    if test $LLVM_VERSION -gt 14; then
+        PKG="$PKG libclang-rt-$LLVM_VERSION-dev libpolly-$LLVM_VERSION-dev"
+    fi
+fi
+apt-get install -y $PKG
diff --git a/packages/libesmf/meta.yaml b/packages/libesmf/meta.yaml
new file mode 100644
index 00000000..825bba08
--- /dev/null
+++ b/packages/libesmf/meta.yaml
@@ -0,0 +1,86 @@
+package:
+  name: libesmf
+  version: 8.4.2
+source:
+  # url: https://github.com/esmf-org/esmf/archive/refs/tags/v8.4.2.tar.gz
+  # sha256: 969304efa518c7859567fa6e65efd960df2b4f6d72dbf2c3f29e39e4ab5ae594
+  # c95415956c711c366f684c8b93359d40cbd87207 from https://github.com/juntyr/esmf.git
+  path: esmf
+requirements:
+  host:
+    - numpy
+build:
+  type: shared_library
+  # cross-script: |
+  script: |
+    export ESMF_DIR=$(pwd)
+    export ESMF_INSTALL_PREFIX=${WASM_LIBRARY_DIR}
+    export ESMF_INSTALL_BINDIR=${WASM_LIBRARY_DIR}/bin
+    export ESMF_INSTALL_DOCDIR=${WASM_LIBRARY_DIR}/doc
+    export ESMF_INSTALL_HEADERDIR=${WASM_LIBRARY_DIR}/include
+    export ESMF_INSTALL_LIBDIR=${WASM_LIBRARY_DIR}/lib
+    export ESMF_INSTALL_MODDIR=${WASM_LIBRARY_DIR}/mod
+
+    which emcc
+
+    export ESMF_COMPILER=llvm
+    export ESMF_F90COMPILER=flang-new-17
+    # export ESMF_COMPILER=lfortran
+    # export ESMF_F90COMPILER=/src/packages/libesmf/lfortran.py
+    # export ESMF_F90COMPILER=/src/miniconda3/bin/lfortran
+    # export ESMF_F90COMPILER=/src/flang-new
+    export ESMF_CCOMPILER=emcc
+    export ESMF_CLINKER=emcc
+    export ESMF_CXXCOMPILER=em++
+    export ESMF_CXXLINKER=em++
+    # TODO: run the normal c preprocessor first
+    # export ESMF_CPP=emcc
+    export ESMF_CPP="gcc -E -P -x c -C -nostdinc"
+    export ESMF_ABI=32
+
+    export ESMF_OPENMP=OFF
+    export ESMF_PTHREADS=OFF
+    export ESMF_TRACE_LIB_BUILD=OFF
+    export ESMF_TESTCOMPTUNNEL=OFF
+
+    # #define ESMF_NO_INITIALIZERS 1
+    # #define ESMF_NO_F2018ASSUMEDTYPE 1
+    #? #define ESMF_NO_F2003_ALLOC_STRING_LENS 1
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make install
+about:
+  home: https://github.com/esmf-org/esmf
+  summary: The Earth System Modeling Framework (ESMF) is a suite of software tools for developing high-performance, multi-component Earth science modeling applications.
+  license: |
+    Earth System Modeling Framework
+
+    Copyright (c) 2002-2023 University Corporation for Atmospheric Research,
+    Massachusetts Institute of Technology, Geophysical Fluid Dynamics Laboratory,
+    University of Michigan, National Centers for Environmental Prediction,
+    Los Alamos National Laboratory, Argonne National Laboratory,
+    NASA Goddard Space Flight Center.
+    All rights reserved.
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to
+    deal with the Software without restriction, including without limitation the
+    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+    sell copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+      1. Redistributions of source code must retain the above copyright notice,
+        this list of conditions and the following disclaimers.
+      2. Redistributions in binary form must reproduce the above copyright
+        notice, this list of conditions and the following disclaimers in the
+        documentation and/or other materials provided with the distribution.
+      3. Neither the names of the organizations developing this software, nor
+        the names of its contributors may be used to endorse or promote products
+        derived from this Software without specific prior written permission.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+    CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+    WITH THE SOFTWARE.
diff --git a/packages/libnetcdf/meta.yaml b/packages/libnetcdf/meta.yaml
new file mode 100644
index 00000000..2ea001c0
--- /dev/null
+++ b/packages/libnetcdf/meta.yaml
@@ -0,0 +1,41 @@
+package:
+  name: libnetcdf
+  version: 4.9.2
+
+source:
+  sha256: bc104d101278c68b303359b3dc4192f81592ae8640f1aee486921138f7f88cb7
+  url: https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.9.2.tar.gz
+  patches:
+    - patches/0001-disable-hdf5-configure-tests.patch
+
+requirements:
+  host:
+    - libhdf5
+    - zlib
+    - libxml
+
+build:
+  type: shared_library
+  script: |
+    export PATH=${WASM_LIBRARY_DIR}/bin:${PATH}
+
+    # dap + byterange: no libcurl
+
+    emconfigure ./configure \
+      --prefix=${WASM_LIBRARY_DIR} \
+      --disable-doxygen \
+      --enable-netcdf-4 \
+      --disable-dap \
+      --disable-byterange \
+      --disable-dap-remote-tests \
+      --disable-examples \
+      --disable-utilities \
+      --disable-testsets \
+      CFLAGS="-fPIC -I${WASM_LIBRARY_DIR}/include" \
+      CXXFLAGS="-fPIC -I${WASM_LIBRARY_DIR}/include" \
+      LDFLAGS="-L${WASM_LIBRARY_DIR}/lib";
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make -j ${PYODIDE_JOBS:-3} install;
+
+    cp -P ${WASM_LIBRARY_DIR}/lib/libnetcdf* ${DISTDIR}
diff --git a/packages/libnetcdf/patches/0001-disable-hdf5-configure-tests.patch b/packages/libnetcdf/patches/0001-disable-hdf5-configure-tests.patch
new file mode 100644
index 00000000..feb2dd98
--- /dev/null
+++ b/packages/libnetcdf/patches/0001-disable-hdf5-configure-tests.patch
@@ -0,0 +1,186 @@
+diff --git a/configure b/configure
+index d44122aa..130e5cb3 100755
+--- a/configure
++++ b/configure
+@@ -25216,25 +25216,26 @@ return H5Fflush ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5 hdf5.dll
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5Fflush=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5Fflush+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5 hdf5.dll
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5Fflush=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5Fflush+y}
++# then :
++#   break
++# fi
++# done
++ac_cv_search_H5Fflush=hdf5
+ if test ${ac_cv_search_H5Fflush+y}
+ then :
+ 
+@@ -25277,25 +25278,26 @@ return H5DSis_scale ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5_hl hdf5_hl.dll
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5DSis_scale=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5DSis_scale+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5_hl hdf5_hl.dll
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5DSis_scale=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5DSis_scale+y}
++# then :
++#   break
++# fi
++# done
++ac_cv_search_H5DSis_scale=hdf5_hl
+ if test ${ac_cv_search_H5DSis_scale+y}
+ then :
+ 
+@@ -25427,25 +25429,25 @@ return H5Dread_chunk ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5_hldll hdf5_hl
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5Dread_chunk=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5Dread_chunk+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5_hldll hdf5_hl
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5Dread_chunk=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5Dread_chunk+y}
++# then :
++#   break
++# fi
++# done
+ if test ${ac_cv_search_H5Dread_chunk+y}
+ then :
+ 
+@@ -25490,25 +25492,25 @@ return H5Pset_fapl_ros3 ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5_hldll hdf5_hl
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5Pset_fapl_ros3=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5Pset_fapl_ros3+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5_hldll hdf5_hl
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5Pset_fapl_ros3=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5Pset_fapl_ros3+y}
++# then :
++#   break
++# fi
++# done
+ if test ${ac_cv_search_H5Pset_fapl_ros3+y}
+ then :
+ 
diff --git a/packages/libproj/meta.yaml b/packages/libproj/meta.yaml
index 9deee8d6..9a9a7060 100644
--- a/packages/libproj/meta.yaml
+++ b/packages/libproj/meta.yaml
@@ -5,6 +5,8 @@ package:
 source:
   sha256: 76ed3d0c3a348a6693dfae535e5658bbfd47f71cb7ff7eb96d9f12f7e068b1cf
   url: https://download.osgeo.org/proj/proj-8.2.1.tar.gz
+  patches:
+    - patches/0001-stod-empty-zero.patch
 
 requirements:
   host:
diff --git a/packages/libproj/patches/0001-stod-empty-zero.patch b/packages/libproj/patches/0001-stod-empty-zero.patch
new file mode 100644
index 00000000..035525dc
--- /dev/null
+++ b/packages/libproj/patches/0001-stod-empty-zero.patch
@@ -0,0 +1,16 @@
+diff --git a/src/iso19111/internal.cpp b/src/iso19111/internal.cpp
+index 4810202d..f7c667bc 100644
+--- a/src/iso19111/internal.cpp
++++ b/src/iso19111/internal.cpp
+@@ -242,6 +242,11 @@ bool ends_with(const std::string &str, const std::string &suffix) noexcept {
+ double c_locale_stod(const std::string &s) {
+ 
+     const auto s_size = s.size();
++    // Propagate <cstdlib>'s strtod behaviour
++    if (s_size == 0) {
++        return 0.0;
++    }
++
+     // Fast path
+     if (s_size > 0 && s_size < 15) {
+         std::int64_t acc = 0;
diff --git a/packages/myproxyclient/meta.yaml b/packages/myproxyclient/meta.yaml
new file mode 100644
index 00000000..8697d67b
--- /dev/null
+++ b/packages/myproxyclient/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: myproxyclient
+  version: 2.1.0
+  top-level:
+    - myproxy
+source:
+  url: https://files.pythonhosted.org/packages/e1/dd/e628684187d9607ccd987acd5dc8f5c909b1b2a6135ebfbceed22da7f733/MyProxyClient-2.1.0-py3-none-any.whl
+  sha256: fcb020ece502b42dda2a1fe43c8437ddedcca602b7ec81f8476bd5f6da5081fb
+requirements:
+  run:
+    - pyOpenSSL
+    - six
+about:
+  home: https://github.com/cedadev/MyProxyClient
+  PyPI: https://pypi.org/project/myproxyclient
+  summary: MyProxy Client
+  license: BSD
diff --git a/packages/netcdf4/meta.yaml b/packages/netcdf4/meta.yaml
new file mode 100644
index 00000000..e10596cc
--- /dev/null
+++ b/packages/netcdf4/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: netcdf4
+  version: 1.6.3
+  top-level:
+    - netCDF4
+source:
+  url: https://files.pythonhosted.org/packages/8b/92/ff3b18a2f5fe03ffc2807c2ac8b55bee2c8ee730d1100b79bc8a7ab96134/netCDF4-1.6.3.tar.gz
+  sha256: 8c98a3a8cda06920ee8bd24a71226ddf0328c22bd838b0afca9cb45fb4580d99
+requirements:
+  host:
+    - libhdf5
+    - libnetcdf
+  run:
+    - numpy
+    - packaging
+    - h5py
+    - cftime
+test:
+  imports:
+    - netCDF4
+build:
+  vendor-sharedlib: true
+  script: |
+    export PATH=${WASM_LIBRARY_DIR}/bin:${PATH}
+    export HDF5_DIR=${WASM_LIBRARY_DIR}
+    echo ${HDF5_DIR}
+about:
+  home: "https://github.com/Unidata/netcdf4-python"
+  PyPI: https://pypi.org/project/netcdf4
+  summary: Provides an object-oriented python interface to the netCDF version 4 library
+  license: MIT
diff --git a/packages/pint/meta.yaml b/packages/pint/meta.yaml
new file mode 100644
index 00000000..75de2c5b
--- /dev/null
+++ b/packages/pint/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: pint
+  version: "0.22"
+  top-level:
+    - pint
+source:
+  url: https://files.pythonhosted.org/packages/ba/70/f3fa88f899cdf17535ddb75c4d4f1d540199524d9dd7479e66aac777de47/Pint-0.22-py3-none-any.whl
+  sha256: 6e2b3c5c2b4d9b516608bc860a417a39d66eb99c958f36540cf931d2c2e9f80f
+requirements:
+  run:
+    - typing-extensions
+about:
+  home: https://github.com/hgrecco/pint
+  PyPI: https://pypi.org/project/pint
+  summary: Physical quantities module
+  license: BSD
diff --git a/packages/platformdirs/meta.yaml b/packages/platformdirs/meta.yaml
new file mode 100644
index 00000000..218408e1
--- /dev/null
+++ b/packages/platformdirs/meta.yaml
@@ -0,0 +1,15 @@
+package:
+  name: platformdirs
+  version: 3.8.0
+  top-level:
+    - platformdirs
+source:
+  url: https://files.pythonhosted.org/packages/e7/61/7fde5beff25a0dae6c2056203696169bd29188b6cedefff8ba6e7b54417b/platformdirs-3.8.0-py3-none-any.whl
+  sha256: ca9ed98ce73076ba72e092b23d3c93ea6c4e186b3f1c3dad6edd98ff6ffcca2e
+about:
+  home: https://github.com/platformdirs/platformdirs
+  PyPI: https://pypi.org/project/platformdirs
+  summary:
+    A small Python package for determining appropriate platform-specific dirs,
+    e.g. a "user data dir".
+  license: MIT
diff --git a/packages/pooch/meta.yaml b/packages/pooch/meta.yaml
new file mode 100644
index 00000000..d4398e5a
--- /dev/null
+++ b/packages/pooch/meta.yaml
@@ -0,0 +1,22 @@
+package:
+  name: pooch
+  version: 1.7.0
+  top-level:
+    - pooch
+source:
+  url: https://files.pythonhosted.org/packages/84/8c/4da580db7fb4cfce8f5ed78e7d2aa542e6f201edd69d3d8a96917a8ff63c/pooch-1.7.0-py3-none-any.whl
+  sha256: 74258224fc33d58f53113cf955e8d51bf01386b91492927d0d1b6b341a765ad7
+requirements:
+  run:
+    - lzma
+    - platformdirs
+    - packaging
+    - requests
+about:
+  home: https://github.com/fatiando/pooch
+  PyPI: https://pypi.org/project/pooch
+  summary:
+    "Pooch manages your Python library's sample data files: it automatically\
+    \ downloads and stores them in a local directory, with support for versioning\
+    \ and corruption checks."
+  license: BSD 3-Clause License
diff --git a/packages/proplot/meta.yaml b/packages/proplot/meta.yaml
new file mode 100644
index 00000000..3465b5b4
--- /dev/null
+++ b/packages/proplot/meta.yaml
@@ -0,0 +1,20 @@
+package:
+  name: proplot
+  version: 0.9.7
+  top-level:
+    - proplot
+source:
+  url: https://files.pythonhosted.org/packages/af/cd/419a7137fe163614414bc8e9abdb1cd12baa12a80dc6930ed3bc60d19c2d/proplot-0.9.7-py3-none-any.whl
+  sha256: e2732cbf7520505a3bb399ef75d762d9645813bc2208deefe7ca2d5c8e4f6fa1
+requirements:
+  run:
+    - matplotlib
+    - numpy
+    - setuptools
+about:
+  home: https://proplot.readthedocs.io
+  PyPI: https://pypi.org/project/proplot
+  summary:
+    A succinct matplotlib wrapper for making beautiful, publication-quality
+    graphics.
+  license: MIT
diff --git a/packages/pyOpenSSL/meta.yaml b/packages/pyOpenSSL/meta.yaml
new file mode 100644
index 00000000..e60b4d3f
--- /dev/null
+++ b/packages/pyOpenSSL/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: pyOpenSSL
+  version: 23.2.0
+  top-level:
+    - OpenSSL
+source:
+  url: https://files.pythonhosted.org/packages/f0/e2/f8b4f1c67933a4907e52228241f4bd52169f3196b70af04403b29c63238a/pyOpenSSL-23.2.0-py3-none-any.whl
+  sha256: 24f0dc5227396b3e831f4c7f602b950a5e9833d292c8e4a2e06b709292806ae2
+requirements:
+  run:
+    - cryptography
+about:
+  home: https://pyopenssl.org/
+  PyPI: https://pypi.org/project/pyOpenSSL
+  summary: Python wrapper module around the OpenSSL library
+  license: Apache License, Version 2.0
diff --git a/packages/pyshp/meta.yaml b/packages/pyshp/meta.yaml
new file mode 100644
index 00000000..355a6426
--- /dev/null
+++ b/packages/pyshp/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: pyshp
+  version: 2.3.1
+  top-level:
+    - shapefile
+source:
+  url: https://files.pythonhosted.org/packages/98/2f/68116db5b36b895c0450e3072b8cb6c2fac0359279b182ea97014d3c8ac0/pyshp-2.3.1-py2.py3-none-any.whl
+  sha256: 67024c0ccdc352ba5db777c4e968483782dfa78f8e200672a90d2d30fd8b7b49
+about:
+  home: https://github.com/GeospatialPython/pyshp
+  PyPI: https://pypi.org/project/pyshp
+  summary: Pure Python read/write support for ESRI Shapefile format
+  license: MIT
diff --git a/packages/pysz/meta.yaml b/packages/pysz/meta.yaml
new file mode 100644
index 00000000..760029ff
--- /dev/null
+++ b/packages/pysz/meta.yaml
@@ -0,0 +1,27 @@
+package:
+  name: pysz
+  version: 3.1.7
+  top-level:
+    - pysz
+source:
+  url: https://github.com/szcompressor/SZ3/tarball/1e1dc10
+  sha256: 5873e589f2e7236c9ee83bd2ace392bec6f04a4bc1fd93feade0d62018344857
+  extract_dir: szcompressor-SZ3-1e1dc10
+  patches:
+    - patches/0001-pysz-pyproject.patch
+requirements:
+  host:
+    - numpy
+    - libSZ3c
+  run:
+    - numpy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    cp ${WASM_LIBRARY_DIR}/lib/libSZ3c.so tools/pysz
+
+about:
+  home: https://github.com/szcompressor/SZ3
+  summary: "SZ3: A Modular Error-bounded Lossy Compression Framework for Scientific Datasets"
+  license: BSD-3-Clause
diff --git a/packages/pysz/patches/0001-pysz-pyproject.patch b/packages/pysz/patches/0001-pysz-pyproject.patch
new file mode 100644
index 00000000..0c911f47
--- /dev/null
+++ b/packages/pysz/patches/0001-pysz-pyproject.patch
@@ -0,0 +1,104 @@
+diff --git a/pyproject.toml b/pyproject.toml
+new file mode 100644
+index 0000000..2da68a7
+--- /dev/null
++++ b/pyproject.toml
+@@ -0,0 +1,23 @@
++[project]
++name = "pysz"
++version = "3.1.7"
++authors = [
++    { name = "Mathematics and Computer Science (MCS), Argonne National Laboratory" },
++]
++description = "SZ3: A Modular Error-bounded Lossy Compression Framework for Scientific Datasets"
++license = { file = "copyright-and-BSD-license.txt" }
++dependencies = ["numpy"]
++
++[project.urls]
++homepage = "https://github.com/szcompressor/SZ3"
++repository = "https://github.com/szcompressor/SZ3.git"
++
++[build-system]
++requires = ["setuptools>=42", "wheel"]
++build-backend = "setuptools.build_meta"
++
++[tool.setuptools.packages.find]
++where = ["tools"]
++
++[tool.setuptools.package-data]
++pysz = ["libSZ3c.so"]
+diff --git a/tools/pysz/pysz.py b/tools/pysz/__init__.py
+similarity index 95%
+rename from tools/pysz/pysz.py
+rename to tools/pysz/__init__.py
+index fa775de..b3fb09e 100644
+--- a/tools/pysz/pysz.py
++++ b/tools/pysz/__init__.py
+@@ -1,12 +1,20 @@
+-import sys
+ import ctypes
+ from ctypes.util import find_library
++from pathlib import Path
+ import numpy as np
+ 
+ """
+ Python API for SZ2/SZ3
+ """
+ 
++mode_abs = 0
++mode_rel = 1
++mode_abs_and_rel = 2
++mode_abs_or_rel = 3
++mode_psnr = 4
++mode_norm = 5
++mode_pw_rel = 10
++
+ 
+ class SZ:
+     def __init__(self, szpath=None):
+@@ -16,10 +24,7 @@ class SZ:
+         """
+ 
+         if szpath is None:
+-            szpath = {
+-                "darwin": "libSZ3c.dylib",
+-                "windows": "SZ3c.dll",
+-            }.get(sys.platform, "libSZ3c.so")
++            szpath = Path(__file__).parent / "libSZ3c.so"
+ 
+ 
+         self.sz = ctypes.cdll.LoadLibrary(szpath)
+diff --git a/tools/pysz/test.py b/tools/pysz/test.py
+deleted file mode 100644
+index c4691c6..0000000
+--- a/tools/pysz/test.py
++++ /dev/null
+@@ -1,28 +0,0 @@
+-import numpy as np
+-from pathlib import Path
+-from pysz import SZ
+-import sys
+-
+-# prepare your data in numpy array format
+-HOME = str(Path.home())
+-data = np.fromfile(HOME + '/data/hurricane-100x500x500/Uf48.bin.dat', dtype=np.float32)
+-data = np.reshape(data, (100, 500, 500))
+-
+-# init SZ (both SZ2 and SZ3 are supported)
+-# Please change the path to the SZ dynamic library file in your system
+-lib_extention = {
+-    "darwin": "libSZ3c.dylib",
+-    "windows": "SZ3c.dll",
+-}.get(sys.platform, "libSZ3c.so")
+-
+-sz = SZ("../../install/lib/{}".format(lib_extention))
+-
+-# compress, both input and output data are numpy array
+-data_cmpr, cmpr_ratio = sz.compress(data, 0, 1e-3, 0, 0)
+-print("compression ratio = {:5G}".format(cmpr_ratio))
+-
+-# decompress, both input and output data are numpy array
+-data_dec = sz.decompress(data_cmpr, data.shape, data.dtype)
+-
+-# verify
+-sz.verify(data, data_dec)
diff --git a/packages/requests/meta.yaml b/packages/requests/meta.yaml
new file mode 100644
index 00000000..f02af5f7
--- /dev/null
+++ b/packages/requests/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: requests
+  version: 2.31.0
+  top-level:
+    - requests
+source:
+  url: https://files.pythonhosted.org/packages/70/8e/0e2d847013cb52cd35b38c009bb167a1a26b2ce6cd6965bf26b47bc0bf44/requests-2.31.0-py3-none-any.whl
+  sha256: 58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f
+requirements:
+  run:
+    - charset-normalizer
+    - idna
+    - urllib3
+    - certifi
+about:
+  home: https://requests.readthedocs.io
+  PyPI: https://pypi.org/project/requests
+  summary: Python HTTP for Humans.
+  license: Apache 2.0
diff --git a/packages/requests_cache/meta.yaml b/packages/requests_cache/meta.yaml
new file mode 100644
index 00000000..01be1500
--- /dev/null
+++ b/packages/requests_cache/meta.yaml
@@ -0,0 +1,21 @@
+package:
+  name: requests_cache
+  version: 1.0.1
+  top-level:
+    - requests_cache
+source:
+  url: https://files.pythonhosted.org/packages/df/34/c9893aca1061ea42cf90536e1af9593474316a991a868c8ceda3631e2368/requests_cache-1.0.1-py3-none-any.whl
+  sha256: 55c5765c26fd98a38c633d6e3931a507b7708cdd07c0afb48773d0718ac15969
+requirements:
+  run:
+    - requests
+    - urllib3
+    - attrs
+    - cattrs
+    - platformdirs
+    - url-normalize
+about:
+  home: https://github.com/requests-cache/requests-cache
+  PyPI: https://pypi.org/project/requests_cache
+  summary: A persistent cache for python requests
+  license: BSD-2-Clause
diff --git a/packages/traitlets/meta.yaml b/packages/traitlets/meta.yaml
new file mode 100644
index 00000000..f77e693e
--- /dev/null
+++ b/packages/traitlets/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: traitlets
+  version: 5.9.0
+  top-level:
+    - traitlets
+source:
+  url: https://files.pythonhosted.org/packages/77/75/c28e9ef7abec2b7e9ff35aea3e0be6c1aceaf7873c26c95ae1f0d594de71/traitlets-5.9.0-py3-none-any.whl
+  sha256: 9e6ec080259b9a5940c797d58b613b5e31441c2257b87c2e795c5228ae80d2d8
+about:
+  home: https://github.com/ipython/traitlets
+  PyPI: https://pypi.org/project/traitlets
+  summary: Traitlets Python configuration system
+  license: BSD-3-Clause
diff --git a/packages/url-normalize/meta.yaml b/packages/url-normalize/meta.yaml
new file mode 100644
index 00000000..c6a5276c
--- /dev/null
+++ b/packages/url-normalize/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: url-normalize
+  version: 1.4.3
+  top-level:
+    - url_normalize
+source:
+  url: https://files.pythonhosted.org/packages/65/1c/6c6f408be78692fc850006a2b6dea37c2b8592892534e09996e401efc74b/url_normalize-1.4.3-py2.py3-none-any.whl
+  sha256: ec3c301f04e5bb676d333a7fa162fa977ad2ca04b7e652bfc9fac4e405728eed
+requirements:
+  run:
+    - six
+about:
+  home: https://github.com/niksite/url-normalize
+  PyPI: https://pypi.org/project/url-normalize
+  summary: URL normalization for Python
+  license: MIT
diff --git a/packages/urllib3/meta.yaml b/packages/urllib3/meta.yaml
new file mode 100644
index 00000000..a634a1ec
--- /dev/null
+++ b/packages/urllib3/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: urllib3
+  version: 2.0.3
+  top-level:
+    - urllib3
+source:
+  url: https://files.pythonhosted.org/packages/8a/03/ad9306a50d05c166e3456fe810f33cee2b8b2a7a6818ec5d4908c4ec6b36/urllib3-2.0.3-py3-none-any.whl
+  sha256: 48e7fafa40319d358848e1bc6809b208340fafe2096f1725d05d67443d0483d1
+about:
+  home: https://github.com/urllib3/urllib3
+  PyPI: https://pypi.org/project/urllib3
+  summary: HTTP library with thread-safe connection pooling, file post, and more.
+  license: MIT
diff --git a/packages/webob/meta.yaml b/packages/webob/meta.yaml
new file mode 100644
index 00000000..6fde784a
--- /dev/null
+++ b/packages/webob/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: webob
+  version: 1.8.7
+  top-level:
+    - webob
+source:
+  url: https://files.pythonhosted.org/packages/62/9c/e94a9982e9f31fc35cf46cdc543a6c2c26cb7174635b5fd25b0bbc6a7bc0/WebOb-1.8.7-py2.py3-none-any.whl
+  sha256: 73aae30359291c14fa3b956f8b5ca31960e420c28c1bec002547fb04928cf89b
+about:
+  home: http://webob.org/
+  PyPI: https://pypi.org/project/webob
+  summary: WSGI request and response object
+  license: MIT
diff --git a/packages/widgetsnbextension/meta.yaml b/packages/widgetsnbextension/meta.yaml
new file mode 100644
index 00000000..3ec19003
--- /dev/null
+++ b/packages/widgetsnbextension/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: widgetsnbextension
+  version: 4.0.7
+  top-level:
+    - widgetsnbextension
+source:
+  url: https://github.com/jupyterlite/pyodide-kernel/archive/refs/tags/v0.0.8.tar.gz
+  sha256: 3f64751d61c9f954415c87a72e44e7eb22511a8a0a8448d1011eb46fe5f9a495
+build:
+  script: |
+    cd ..
+    mv widgetsnbextension-4.0.7/packages/pyodide-kernel/py/widgetsnbextension4/widgetsnbextension .
+    rm -rf widgetsnbextension-4.0.7
+    mv widgetsnbextension widgetsnbextension-4.0.7
+about:
+  home: http://jupyter.org
+  PyPI: https://pypi.org/project/widgetsnbextension
+  summary: Jupyter interactive widgets for Jupyter Notebook
+  license: BSD 3-Clause License
diff --git a/packages/xarray/meta.yaml b/packages/xarray/meta.yaml
index e3c6c337..89082ce9 100644
--- a/packages/xarray/meta.yaml
+++ b/packages/xarray/meta.yaml
@@ -1,17 +1,20 @@
 package:
   name: xarray
-  version: 2023.3.0
+  version: 2023.5.0
 
   top-level:
     - xarray
 source:
-  url: https://files.pythonhosted.org/packages/68/77/2b19262874210e44c22f98f4cb42bacc314564fecc4218dfff96657f169c/xarray-2023.3.0-py3-none-any.whl
-  sha256: 64b2a25338cff4f632a5d2ba66ffb875e9ce3ced68cefb5bb5736195bd28cff0
+  url: https://files.pythonhosted.org/packages/0a/1b/57b946c11b77f9ec1f4398bce9bf28ace25e4a644e4c5deed93b691ab70d/xarray-2023.5.0.tar.gz
+  sha256: 318a651f4182b9cecb7d1c57ad0ed9bdaed5f49c43dbb638c0a845b8faf405e8
+  patches:
+    - patches/0001-zarr-chunk-store-check.patch
 requirements:
   run:
     - numpy
     - packaging
     - pandas
+    - dask
 about:
   home: https://github.com/pydata/xarray
   PyPI: https://pypi.org/project/xarray
diff --git a/packages/xarray/patches/0001-zarr-chunk-store-check.patch b/packages/xarray/patches/0001-zarr-chunk-store-check.patch
new file mode 100644
index 00000000..48bf8efb
--- /dev/null
+++ b/packages/xarray/patches/0001-zarr-chunk-store-check.patch
@@ -0,0 +1,13 @@
+diff --git a/xarray/backends/zarr.py b/xarray/backends/zarr.py
+index a4012a8a..33a2712b 100644
+--- a/xarray/backends/zarr.py
++++ b/xarray/backends/zarr.py
+@@ -410,7 +410,7 @@ class ZarrStore(AbstractWritableDataStore):
+             if consolidated is None:
+                 consolidated = False
+ 
+-        if chunk_store:
++        if chunk_store is not None:
+             open_kwargs["chunk_store"] = chunk_store
+             if consolidated is None:
+                 consolidated = False
diff --git a/packages/xeofs/meta.yaml b/packages/xeofs/meta.yaml
new file mode 100644
index 00000000..d370c744
--- /dev/null
+++ b/packages/xeofs/meta.yaml
@@ -0,0 +1,25 @@
+package:
+  name: xeofs
+  version: 1.2.2
+  top-level:
+    - xeofs
+source:
+  url: https://files.pythonhosted.org/packages/ee/ae/83e5e977c05aae4d5e9bf32cbe85c5415cb0af6e494f8b2d8160c17342c9/xeofs-1.2.2.tar.gz
+  sha256: e31c311ffdcd718d6bca960b547da2e599161a933a8cc67fa43f096a753421e6
+  patches:
+    - patches/0001-xeofs-no-gwpca.patch
+requirements:
+  run:
+    - numpy
+    - pandas
+    - xarray
+    - scikit-learn
+    - tqdm
+    - dask
+    - statsmodels
+    - typing-extensions
+about:
+  home: https://github.com/nicrie/xeofs
+  PyPI: https://pypi.org/project/xeofs
+  summary: Collection of EOF analysis and related techniques for climate science
+  license: MIT
diff --git a/packages/xeofs/patches/0001-xeofs-no-gwpca.patch b/packages/xeofs/patches/0001-xeofs-no-gwpca.patch
new file mode 100644
index 00000000..01b8ea84
--- /dev/null
+++ b/packages/xeofs/patches/0001-xeofs-no-gwpca.patch
@@ -0,0 +1,13 @@
+diff --git a/xeofs/models/__init__.py b/xeofs/models/__init__.py
+index 49ee8ec..3513b20 100644
+--- a/xeofs/models/__init__.py
++++ b/xeofs/models/__init__.py
+@@ -2,7 +2,7 @@ from .eof import EOF, ComplexEOF
+ from .mca import MCA, ComplexMCA
+ from .eeof import ExtendedEOF
+ from .opa import OPA
+-from .gwpca import GWPCA
++# from .gwpca import GWPCA
+ from .rotator_factory import RotatorFactory
+ from .eof_rotator import EOFRotator, ComplexEOFRotator
+ from .mca_rotator import MCARotator, ComplexMCARotator
diff --git a/packages/xhistogram/meta.yaml b/packages/xhistogram/meta.yaml
new file mode 100644
index 00000000..fc171790
--- /dev/null
+++ b/packages/xhistogram/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: xhistogram
+  version: 0.3.2
+  top-level:
+    - xhistogram
+source:
+  url: https://files.pythonhosted.org/packages/18/08/1432dd10193a5d45294bd42042a5631259ee5a12cd2e9075350546d07a03/xhistogram-0.3.2-py3-none-any.whl
+  sha256: ad55330d55296d273b3370678223fde0f50085e04cb744c7b3b0bb7702a2c6bf
+requirements:
+  run:
+    - dask
+    - numpy
+    - xarray
+about:
+  home: https://github.com/xgcm/xhistogram
+  PyPI: https://pypi.org/project/xhistogram
+  summary: Fast, flexible, label-aware histograms for numpy and xarray
+  license: MIT
diff --git a/packages/zfpy/meta.yaml b/packages/zfpy/meta.yaml
new file mode 100644
index 00000000..9d376bdf
--- /dev/null
+++ b/packages/zfpy/meta.yaml
@@ -0,0 +1,37 @@
+package:
+  name: zfpy
+  version: 1.0.0
+  top-level:
+    - zfpy
+source:
+  url: https://github.com/LLNL/zfp/archive/refs/tags/1.0.0.tar.gz
+  sha256: fe13b03141ee9b571692aed42ff76cf37c9dcda40f9a43a808870dca3558a57c
+  patches:
+    - patches/0001-setup-with-cython.patch
+requirements:
+  host:
+    - numpy
+  run:
+    - numpy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    mkdir -p build
+
+    cd build && \
+      emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=$WASM_LIBRARY_DIR \
+        -DCMAKE_BUILD_TYPE=Release \
+        -DBUILD_TESTING=OFF \
+        -DZFP_WITH_OPENMP=OFF \
+        -DBUILD_UTILITIES=OFF;
+    
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make install;
+
+about:
+  home: https://zfp.llnl.gov/
+  PyPI: https://pypi.org/project/zfpy/
+  summary: Compressed numerical arrays that support high-speed random access
+  license: BSD-3-Clause
diff --git a/packages/zfpy/patches/0001-setup-with-cython.patch b/packages/zfpy/patches/0001-setup-with-cython.patch
new file mode 100644
index 00000000..7c834c35
--- /dev/null
+++ b/packages/zfpy/patches/0001-setup-with-cython.patch
@@ -0,0 +1,24 @@
+diff --git a/setup.py b/setup.py
+index 9e4c391..7f53777 100644
+--- a/setup.py
++++ b/setup.py
+@@ -1,3 +1,4 @@
++import os
+ from setuptools import setup, Extension
+ import numpy as np
+ 
+@@ -9,7 +10,11 @@ setup(
+     url="https://zfp.llnl.gov",
+     description="zfp compression in Python",
+     long_description="zfp is a compressed format for representing multidimensional floating-point and integer arrays. zfp provides compressed-array classes that support high throughput read and write random access to individual array elements. zfp also supports serial and parallel compression of whole arrays using both lossless and lossy compression with error tolerances. zfp is primarily written in C and C++ but also includes Python and Fortran bindings.",
+-    ext_modules=[Extension("zfpy", ["build/python/zfpy.c"],
+-                           include_dirs=["include", np.get_include()],
+-                           libraries=["zfp"], library_dirs=["build/lib64", "build/lib/Release"])]
++    ext_modules=[Extension(
++        "zfpy", ["python/zfpy.pxd", "python/zfpy.pyx"],
++        include_dirs=["include", np.get_include()],
++        libraries=["zfp"],
++        library_dirs=[os.environ["WASM_LIBRARY_DIR"] + "/lib"],
++    )],
++    setup_requires=["cython>=0.17", "numpy"],
+ )
diff --git a/packages/zipp/meta.yaml b/packages/zipp/meta.yaml
new file mode 100644
index 00000000..0aa4ec79
--- /dev/null
+++ b/packages/zipp/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: zipp
+  version: 3.15.0
+  top-level:
+    - zipp
+source:
+  url: https://files.pythonhosted.org/packages/5b/fa/c9e82bbe1af6266adf08afb563905eb87cab83fde00a0a08963510621047/zipp-3.15.0-py3-none-any.whl
+  sha256: 48904fc76a60e542af151aded95726c1a5c34ed43ab4134b597665c86d7ad556
+about:
+  home: https://github.com/jaraco/zipp
+  PyPI: https://pypi.org/project/zipp
+  summary: Backport of pathlib-compatible object wrapper for zip files
+  license: "MIT"
diff --git a/pyodide-build/pyodide_build/pywasmcross.py b/pyodide-build/pyodide_build/pywasmcross.py
index 871134db..59c74319 100755
--- a/pyodide-build/pyodide_build/pywasmcross.py
+++ b/pyodide-build/pyodide_build/pywasmcross.py
@@ -24,6 +24,7 @@ SYMLINKS = {
     "ld",
     "ar",
     "gcc",
+    "g++",
     "ranlib",
     "strip",
     "gfortran",
