diff --git a/packages/Cartopy/meta.yaml b/packages/Cartopy/meta.yaml
new file mode 100644
index 00000000..866a41ba
--- /dev/null
+++ b/packages/Cartopy/meta.yaml
@@ -0,0 +1,39 @@
+package:
+  name: Cartopy
+  version: 0.21.1
+  top-level:
+    - cartopy
+source:
+  url: https://files.pythonhosted.org/packages/e8/11/ed3e364b3910f0951821e6b5a03a03ce425464b72aa3da08d47b78ae17bd/Cartopy-0.21.1.tar.gz
+  sha256: 89d5649712c8582231c6e11825a04c85f6f0cee94dbb89e4db23eabca1cc250a
+  patches:
+    - patches/0001-setup-geos-config.patch
+test:
+  imports:
+    - cartopy
+    - cartopy.trace
+    - cartopy.mpl.geoaxes
+    - cartopy.crs
+requirements:
+  host:
+    - geos
+    - numpy
+  run:
+    - shapely
+    - pyshp
+    - pyproj
+    - geos
+    - matplotlib
+    - scipy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    export GEOS_CONFIG=${WASM_LIBRARY_DIR}/bin/geos-config
+    echo ${GEOS_CONFIG}
+
+about:
+  home: http://scitools.org.uk/cartopy
+  PyPI: https://pypi.org/project/Cartopy/
+  summary: A library providing cartographic tools for python
+  license: LGPL-3.0-or-later
diff --git a/packages/Cartopy/patches/0001-setup-geos-config.patch b/packages/Cartopy/patches/0001-setup-geos-config.patch
new file mode 100644
index 00000000..f5eb270c
--- /dev/null
+++ b/packages/Cartopy/patches/0001-setup-geos-config.patch
@@ -0,0 +1,20 @@
+diff --git a/setup.py b/setup.py
+index 8e061479..c1b592ff 100644
+--- a/setup.py
++++ b/setup.py
+@@ -81,11 +81,12 @@ def file_walk_relative(top, remove=''):
+ 
+ # GEOS
+ try:
+-    geos_version = subprocess.check_output(['geos-config', '--version'])
++    geos_config = os.environ.get("GEOS_CONFIG", "/src/packages/.libs/bin/geos-config")
++    geos_version = subprocess.check_output([geos_config, '--version'])
+     geos_version = tuple(int(v) for v in geos_version.split(b'.')
+                          if 'dev' not in str(v))
+-    geos_includes = subprocess.check_output(['geos-config', '--includes'])
+-    geos_clibs = subprocess.check_output(['geos-config', '--clibs'])
++    geos_includes = subprocess.check_output([geos_config, '--includes'])
++    geos_clibs = subprocess.check_output([geos_config, '--clibs'])
+ except (OSError, ValueError, subprocess.CalledProcessError):
+     warnings.warn(
+         'Unable to determine GEOS version. Ensure you have %s or later '
diff --git a/packages/Cartopy/test_cartopy.py b/packages/Cartopy/test_cartopy.py
new file mode 100644
index 00000000..6dfc8934
--- /dev/null
+++ b/packages/Cartopy/test_cartopy.py
@@ -0,0 +1,25 @@
+import pathlib
+
+import pytest
+from pytest_pyodide import run_in_pyodide
+
+
+@pytest.mark.driver_timeout(60)
+@run_in_pyodide(packages=["cartopy"])
+def test_imports(selenium):
+    import cartopy
+    import cartopy.trace
+
+    assert False
+
+
+@pytest.mark.driver_timeout(60)
+@run_in_pyodide(packages=["cartopy", "matplotlib"])
+def test_matplotlib(selenium):
+    import cartopy.crs as ccrs
+    import matplotlib.pyplot as plt
+
+    ax = plt.axes(projection=ccrs.PlateCarree())
+    ax.coastlines()
+
+    plt.show()
diff --git a/packages/cfgrib/meta.yaml b/packages/cfgrib/meta.yaml
new file mode 100644
index 00000000..8fd06581
--- /dev/null
+++ b/packages/cfgrib/meta.yaml
@@ -0,0 +1,24 @@
+package:
+  name: cfgrib
+  version: 0.9.10.4
+  top-level:
+    - cfgrib
+source:
+  url: https://files.pythonhosted.org/packages/69/b4/5389e5b3240d24aa1210ba698b3c5c8c800e1a83842af9b1effa52b4a389/cfgrib-0.9.10.4.tar.gz
+  sha256: b490078192aa13ec89c77296110355521442325866b16a996f4b3cf421542909
+  patches:
+    - patches/0001-dataset-inferred-dtype.patch
+requirements:
+  run:
+    - attrs
+    - click
+    - eccodes
+    - numpy
+    - xarray
+about:
+  home: https://github.com/ecmwf/cfgrib
+  PyPI: https://pypi.org/project/cfgrib
+  summary:
+    Python interface to map GRIB files to the NetCDF Common Data Model following
+    the CF Convention using ecCodes.
+  license: Apache License Version 2.0
diff --git a/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch b/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch
new file mode 100644
index 00000000..2104d93a
--- /dev/null
+++ b/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch
@@ -0,0 +1,50 @@
+diff --git a/cfgrib/dataset.py b/cfgrib/dataset.py
+index e4f91ec..f81afb7 100644
+--- a/cfgrib/dataset.py
++++ b/cfgrib/dataset.py
+@@ -330,11 +330,11 @@ class OnDiskArray:
+     ] = attr.attrib(repr=False)
+     missing_value: float
+     geo_ndim: int = attr.attrib(default=1, repr=False)
+-    dtype = np.dtype("float32")
++    dtype: np.dtype = attr.attrib(default=np.dtype("float32"), repr=False)
+ 
+     def build_array(self) -> np.ndarray:
+         """Helper method used to test __getitem__"""
+-        array = np.full(self.shape, fill_value=np.nan, dtype="float32")
++        array = np.full(self.shape, fill_value=np.nan, dtype=self.dtype)
+         for header_indexes, message_ids in self.field_id_index.items():
+             # NOTE: fill a single field as found in the message
+             message = self.index.get_field(message_ids[0])  # type: ignore
+@@ -348,7 +348,7 @@ class OnDiskArray:
+         header_item_list = expand_item(item[: -self.geo_ndim], self.shape)
+         header_item = [{ix: i for i, ix in enumerate(it)} for it in header_item_list]
+         array_field_shape = tuple(len(i) for i in header_item_list) + self.shape[-self.geo_ndim :]
+-        array_field = np.full(array_field_shape, fill_value=np.nan, dtype="float32")
++        array_field = np.full(array_field_shape, fill_value=np.nan, dtype=self.dtype)
+         for header_indexes, message_ids in self.field_id_index.items():
+             try:
+                 array_field_indexes = [it[ix] for it, ix in zip(header_item, header_indexes)]
+@@ -566,12 +566,22 @@ def build_variable_components(
+                     extra_coords_data[coord_name][header_value] = coord_value
+         offsets[tuple(header_indexes)] = message_ids
+     missing_value = data_var_attrs.get("missingValue", messages.MISSING_VAUE_INDICATOR)
++    if len(offsets) > 0:
++        # Infer the dtype from the first data message
++        header_indexes, message_ids = next(iter(offsets.items()))
++        message = index.get_field(message_ids[0])
++        values = get_values_in_order(message, np.empty(shape)[header_indexes].shape)
++        dtype = values.dtype
++    else:
++        # Fall back to a reasonable default dtype
++        dtype = np.dtype("float32")
+     on_disk_array = OnDiskArray(
+         index=index,
+         shape=shape,
+         field_id_index=offsets,
+         missing_value=missing_value,
+         geo_ndim=len(geo_dims),
++        dtype=dtype,
+     )
+ 
+     if "time" in coord_vars and "step" in coord_vars:
diff --git a/packages/dask/meta.yaml b/packages/dask/meta.yaml
new file mode 100644
index 00000000..72e2ee63
--- /dev/null
+++ b/packages/dask/meta.yaml
@@ -0,0 +1,25 @@
+package:
+  name: dask
+  version: 2023.5.0
+  top-level:
+    - dask
+source:
+  url: https://files.pythonhosted.org/packages/07/93/32d3e317fec6d0fc130284f922ad9bd13d9ae0d52245e6ff6e57647e924c/dask-2023.5.0-py3-none-any.whl
+  sha256: 32b34986519b7ddc0947c8ca63c2fc81b964e4c208dfb5cbf9f4f8aec92d152b
+test:
+  imports:
+    - dask
+requirements:
+  run:
+    - click
+    - cloudpickle
+    - importlib_metadata
+    - Jinja2
+    - packaging
+    - pyyaml
+    - toolz
+about:
+  home: https://github.com/dask/dask/
+  PyPI: https://pypi.org/project/dask
+  summary: Parallel PyData with Task Scheduling
+  license: BSD
diff --git a/packages/eccodes/meta.yaml b/packages/eccodes/meta.yaml
new file mode 100644
index 00000000..791a9f52
--- /dev/null
+++ b/packages/eccodes/meta.yaml
@@ -0,0 +1,29 @@
+package:
+  name: eccodes
+  version: 1.5.2
+  top-level:
+    - eccodes
+    - gribapi
+source:
+  url: https://files.pythonhosted.org/packages/af/b9/57d55d70ca6fbf9ce8dc096904d6bd4984d6eaacfff20c771245d99e1f1b/eccodes-1.5.2.tar.gz
+  sha256: f7cce47fc9b1df3ed9eea21c4060fa572e07a4d0f014f6fd1f74683df9b45801
+  patches:
+    - patches/0001-shared-library-include.patch
+requirements:
+  run:
+    - attrs
+    - cffi
+    - findlibs
+    - numpy
+  host:
+    - libeccodes
+build:
+  vendor-sharedlib: true
+  script: |
+    cp ${WASM_LIBRARY_DIR}/lib/libeccodes.so gribapi/
+    cp -r ${WASM_LIBRARY_DIR}/share/eccodes/definitions gribapi/
+about:
+  home: https://github.com/ecmwf/eccodes-python
+  PyPI: https://pypi.org/project/eccodes
+  summary: Python interface to the ecCodes GRIB and BUFR decoder/encoder
+  license: Apache License Version 2.0
diff --git a/packages/eccodes/patches/0001-shared-library-include.patch b/packages/eccodes/patches/0001-shared-library-include.patch
new file mode 100644
index 00000000..671f423a
--- /dev/null
+++ b/packages/eccodes/patches/0001-shared-library-include.patch
@@ -0,0 +1,45 @@
+diff --git a/gribapi/bindings.py b/gribapi/bindings.py
+index 91f6d6a..2504873 100644
+--- a/gribapi/bindings.py
++++ b/gribapi/bindings.py
+@@ -15,8 +15,10 @@
+ #
+ 
+ from __future__ import absolute_import, division, print_function, unicode_literals
++from pathlib import Path
+ 
+ import logging
++import os
+ import pkgutil
+ 
+ import cffi
+@@ -25,14 +27,10 @@ __version__ = "1.6.0"
+ 
+ LOG = logging.getLogger(__name__)
+ 
+-try:
+-    import ecmwflibs as findlibs
+-except ImportError:
+-    import findlibs
++definitions_path = str(Path(__file__).parent / "definitions")
++os.environ["ECCODES_DEFINITION_PATH"] = definitions_path
+ 
+-library_path = findlibs.find("eccodes")
+-if library_path is None:
+-    raise RuntimeError("Cannot find the ecCodes library")
++library_path = str(Path(__file__).parent / "libeccodes.so")
+ 
+ # default encoding for ecCodes strings
+ ENC = "ascii"
+diff --git a/setup.py b/setup.py
+index 5df68df..d58dd3a 100644
+--- a/setup.py
++++ b/setup.py
+@@ -55,6 +55,7 @@ setuptools.setup(
+     url="https://github.com/ecmwf/eccodes-python",
+     packages=setuptools.find_packages(),
+     include_package_data=True,
++    package_data={'gribapi': ['libeccodes.so', "definitions/*", "definitions/**/*"]},
+     install_requires=install_requires,
+     tests_require=[
+         "pytest",
diff --git a/packages/fcpy/meta.yaml b/packages/fcpy/meta.yaml
new file mode 100644
index 00000000..ebc0ac34
--- /dev/null
+++ b/packages/fcpy/meta.yaml
@@ -0,0 +1,34 @@
+package:
+  name: fcpy
+  version: 0.2.0
+  top-level:
+    - fcpy
+source:
+  path: fcpy
+test:
+  imports:
+    - fcpy
+requirements:
+  run:
+    - Cartopy
+    - cfgrib  # only for pre-loading
+    - cycler
+    - dask
+    - ipyfilite
+    - lzma  # only for pre-loading
+    - matplotlib
+    - netcdf4  # only for pre-loading
+    - numcodecs
+    - numpy
+    - pandas
+    - pyodide-http
+    - pysz
+    - scikit-image
+    - xarray
+    - zarr  # only for pre-loading
+    - zfpy  # only for pre-loading
+
+about:
+  home: https://github.com/ecmwf-lab/field-compression
+  summary: ECMWF Field Compression Laboratory
+  license: Apache-2.0
diff --git a/packages/findlibs/meta.yaml b/packages/findlibs/meta.yaml
new file mode 100644
index 00000000..b4213bfc
--- /dev/null
+++ b/packages/findlibs/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: findlibs
+  version: 0.0.5
+  top-level:
+    - findlibs
+source:
+  url: https://files.pythonhosted.org/packages/ae/be/6c72ef9d990cd25fe3dd97ebe9d77a859f7d27b7273e62ad750846d207ee/findlibs-0.0.5.tar.gz
+  sha256: 7a801571e999d0ee83f9b92cbb598c21f861ee26ca9dba74cea8958ba4335e7e
+about:
+  home: https://github.com/ecmwf/findlibs
+  PyPI: https://pypi.org/project/findlibs
+  summary: A packages to search for shared libraries on various platforms
+  license: Apache License Version 2.0
diff --git a/packages/importlib_metadata/meta.yaml b/packages/importlib_metadata/meta.yaml
new file mode 100644
index 00000000..081bb2cf
--- /dev/null
+++ b/packages/importlib_metadata/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: importlib_metadata
+  version: 6.6.0
+  top-level:
+    - importlib_metadata
+source:
+  url: https://files.pythonhosted.org/packages/30/bb/bf2944b8b88c65b797acc2c6a2cb0fb817f7364debf0675792e034013858/importlib_metadata-6.6.0-py3-none-any.whl
+  sha256: 43dd286a2cd8995d5eaef7fee2066340423b818ed3fd70adf0bad5f1fac53fed
+requirements:
+  run:
+    - zipp
+about:
+  home: https://github.com/python/importlib_metadata
+  PyPI: https://pypi.org/project/importlib_metadata
+  summary: Read metadata from Python packages
+  license: "Apache Software License"
diff --git a/packages/ipyfilite/meta.yaml b/packages/ipyfilite/meta.yaml
new file mode 100644
index 00000000..d6a68810
--- /dev/null
+++ b/packages/ipyfilite/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: ipyfilite
+  version: 0.1.7
+  top-level:
+    - ipyfilite
+source:
+  url: https://files.pythonhosted.org/packages/ed/af/e6aaa701e7586297c748f657b7a55f1685732207bbe0125bb288ee6854b7/ipyfilite-0.1.7-py3-none-any.whl
+  sha256: 3faa5bc7109b94f77cd5edbb20b27b6d3ebfb9faca1113ba45336a6c568fc300
+requirements:
+  run:
+    - ipywidgets
+about:
+  home: https://github.com/juntyr/ipyfilite
+  PyPI: https://pypi.org/project/ipyfilite
+  summary:
+    File upload widget specifically for Pyodide kernels running in JupyterLite.
+    Uploaded files are not loaded into memory but mounted as read-only files in a
+    new WORKERFS.
+  license: BSD 3-Clause License
diff --git a/packages/ipywidgets/meta.yaml b/packages/ipywidgets/meta.yaml
new file mode 100644
index 00000000..f4e47d07
--- /dev/null
+++ b/packages/ipywidgets/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: ipywidgets
+  version: 8.0.6
+  top-level:
+    - ipywidgets
+source:
+  url: https://files.pythonhosted.org/packages/50/7d/2c8b7bba2b1c2b5d1299f22fa7853f09b573c84e63b62870c13a6ec11990/ipywidgets-8.0.6-py3-none-any.whl
+  sha256: a60bf8d2528997e05ac83fd19ea2fbe65f2e79fbe1b2b35779bdfc46c2941dcc
+requirements:
+  run:
+    - widgetsnbextension
+    - jupyterlab_widgets
+about:
+  home: http://jupyter.org
+  PyPI: https://pypi.org/project/ipywidgets
+  summary: Jupyter interactive widgets
+  license: BSD 3-Clause License
diff --git a/packages/jupyterlab_widgets/meta.yaml b/packages/jupyterlab_widgets/meta.yaml
new file mode 100644
index 00000000..f8920c6c
--- /dev/null
+++ b/packages/jupyterlab_widgets/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: jupyterlab_widgets
+  version: 3.0.7
+  top-level:
+    - jupyterlab_widgets
+source:
+  url: https://files.pythonhosted.org/packages/46/98/e7ce879b7b5d4871b80e291be967d22e5e66fa43474c476a95fe6231f50d/jupyterlab_widgets-3.0.7-py3-none-any.whl
+  sha256: c73f8370338ec19f1bec47254752d6505b03601cbd5a67e6a0b184532f73a459
+about:
+  home: https://github.com/jupyter-widgets/ipywidgets
+  PyPI: https://pypi.org/project/jupyterlab_widgets
+  summary: Jupyter interactive widgets for JupyterLab
+  license: BSD-3-Clause
diff --git a/packages/libSZ3c/meta.yaml b/packages/libSZ3c/meta.yaml
new file mode 100644
index 00000000..26e783d3
--- /dev/null
+++ b/packages/libSZ3c/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: libSZ3c
+  version: 3.1.7
+source:
+  url: https://github.com/szcompressor/SZ3/tarball/1e1dc10
+  sha256: 5873e589f2e7236c9ee83bd2ace392bec6f04a4bc1fd93feade0d62018344857
+  extract_dir: szcompressor-SZ3-1e1dc10
+  patches:
+    # Adapted from https://github.com/skarupke/flat_hash_map/pull/18
+    - patches/0001-skahash-32-bit.patch
+requirements:
+  host:
+    - numpy
+
+build:
+  type: shared_library
+  script: |
+    mkdir -p build
+
+    cd build && \
+      emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=$WASM_LIBRARY_DIR \
+        -DCMAKE_BUILD_TYPE=Release;
+    
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make install;
+
+about:
+  home: https://github.com/szcompressor/SZ3
+  summary: "SZ3: A Modular Error-bounded Lossy Compression Framework for Scientific Datasets"
+  license: BSD-3-Clause
diff --git a/packages/libSZ3c/patches/0001-skahash-32-bit.patch b/packages/libSZ3c/patches/0001-skahash-32-bit.patch
new file mode 100644
index 00000000..464a4be4
--- /dev/null
+++ b/packages/libSZ3c/patches/0001-skahash-32-bit.patch
@@ -0,0 +1,375 @@
+diff --git a/include/SZ3/utils/ska_hash/bytell_hash_map.hpp b/include/SZ3/utils/ska_hash/bytell_hash_map.hpp
+index 9c9a246..47ac512 100644
+--- a/include/SZ3/utils/ska_hash/bytell_hash_map.hpp
++++ b/include/SZ3/utils/ska_hash/bytell_hash_map.hpp
+@@ -41,7 +41,14 @@ struct sherwood_v8_constants
+         return metadata & bits_for_distance;
+     }
+ 
+-    static constexpr int num_jump_distances = 126;
++    static constexpr int num_jump_distances =
++#ifdef ENV64BIT
++    126
++#else // if 32 bits
++	100
++#endif
++	;
++
+     // jump distances chosen like this:
+     // 1. pick the first 16 integers to promote staying in the same block
+     // 2. add the next 66 triangular numbers to get even jumps when
+@@ -61,7 +68,11 @@ struct sherwood_v8_constants
+ 
+         3741, 8385, 18915, 42486, 95703, 215496, 485605, 1091503, 2456436,
+         5529475, 12437578, 27986421, 62972253, 141700195, 318819126, 717314626,
+-        1614000520, 3631437253, 8170829695, 18384318876, 41364501751,
++        1614000520, 3631437253,
++
++#ifdef ENV64BIT
++
++		8170829695, 18384318876, 41364501751,
+         93070021080, 209407709220, 471167588430, 1060127437995, 2385287281530,
+         5366895564381, 12075513791265, 27169907873235, 61132301007778,
+         137547673121001, 309482258302503, 696335090510256, 1566753939653640,
+@@ -69,6 +80,7 @@ struct sherwood_v8_constants
+         40154190394120111, 90346928493040500, 203280588949935750,
+         457381324898247375, 1029107980662394500, 2315492957028380766,
+         5209859150892887590,
++#endif
+     };
+ };
+ template<typename T>
+diff --git a/include/SZ3/utils/ska_hash/flat_hash_map.hpp b/include/SZ3/utils/ska_hash/flat_hash_map.hpp
+index a8723ee..41e917d 100644
+--- a/include/SZ3/utils/ska_hash/flat_hash_map.hpp
++++ b/include/SZ3/utils/ska_hash/flat_hash_map.hpp
+@@ -4,6 +4,9 @@
+ 
+ #pragma once
+ 
++#define ENV32BIT
++// #define ENV64BIT
++
+ #include <cstdint>
+ #include <cstddef>
+ #include <functional>
+@@ -207,6 +210,7 @@ struct sherwood_v3_entry
+ 
+ inline int8_t log2(size_t value)
+ {
++#ifdef ENV64BIT
+     static constexpr int8_t table[64] =
+     {
+         63,  0, 58,  1, 59, 47, 53,  2,
+@@ -225,6 +229,23 @@ inline int8_t log2(size_t value)
+     value |= value >> 16;
+     value |= value >> 32;
+     return table[((value - (value >> 1)) * 0x07EDD5E59A4E28C2) >> 58];
++#endif
++#ifdef ENV32BIT
++    static constexpr int8_t table[32] =
++    {
++         0,  9,  1, 10, 13, 21,  2, 29,
++        11, 14, 16, 18, 22, 25,  3, 30,
++         8, 12, 20, 28, 15, 17, 24,  7,
++        19, 27, 23,  6, 26,  5,  4, 31
++    };
++
++    value |= value >> 1;
++    value |= value >> 2;
++    value |= value >> 4;
++    value |= value >> 8;
++    value |= value >> 16;
++    return table[(value*0x07C4ACDD) >> 27];
++#endif
+ }
+ 
+ template<typename T, bool>
+@@ -258,7 +279,9 @@ inline size_t next_power_of_two(size_t i)
+     i |= i >> 4;
+     i |= i >> 8;
+     i |= i >> 16;
++#ifdef ENV64BIT
+     i |= i >> 32;
++#endif
+     ++i;
+     return i;
+ }
+@@ -929,97 +952,99 @@ private:
+ 
+ struct prime_number_hash_policy
+ {
+-    static size_t mod0(size_t) { return 0llu; }
+-    static size_t mod2(size_t hash) { return hash % 2llu; }
+-    static size_t mod3(size_t hash) { return hash % 3llu; }
+-    static size_t mod5(size_t hash) { return hash % 5llu; }
+-    static size_t mod7(size_t hash) { return hash % 7llu; }
+-    static size_t mod11(size_t hash) { return hash % 11llu; }
+-    static size_t mod13(size_t hash) { return hash % 13llu; }
+-    static size_t mod17(size_t hash) { return hash % 17llu; }
+-    static size_t mod23(size_t hash) { return hash % 23llu; }
+-    static size_t mod29(size_t hash) { return hash % 29llu; }
+-    static size_t mod37(size_t hash) { return hash % 37llu; }
+-    static size_t mod47(size_t hash) { return hash % 47llu; }
+-    static size_t mod59(size_t hash) { return hash % 59llu; }
+-    static size_t mod73(size_t hash) { return hash % 73llu; }
+-    static size_t mod97(size_t hash) { return hash % 97llu; }
+-    static size_t mod127(size_t hash) { return hash % 127llu; }
+-    static size_t mod151(size_t hash) { return hash % 151llu; }
+-    static size_t mod197(size_t hash) { return hash % 197llu; }
+-    static size_t mod251(size_t hash) { return hash % 251llu; }
+-    static size_t mod313(size_t hash) { return hash % 313llu; }
+-    static size_t mod397(size_t hash) { return hash % 397llu; }
+-    static size_t mod499(size_t hash) { return hash % 499llu; }
+-    static size_t mod631(size_t hash) { return hash % 631llu; }
+-    static size_t mod797(size_t hash) { return hash % 797llu; }
+-    static size_t mod1009(size_t hash) { return hash % 1009llu; }
+-    static size_t mod1259(size_t hash) { return hash % 1259llu; }
+-    static size_t mod1597(size_t hash) { return hash % 1597llu; }
+-    static size_t mod2011(size_t hash) { return hash % 2011llu; }
+-    static size_t mod2539(size_t hash) { return hash % 2539llu; }
+-    static size_t mod3203(size_t hash) { return hash % 3203llu; }
+-    static size_t mod4027(size_t hash) { return hash % 4027llu; }
+-    static size_t mod5087(size_t hash) { return hash % 5087llu; }
+-    static size_t mod6421(size_t hash) { return hash % 6421llu; }
+-    static size_t mod8089(size_t hash) { return hash % 8089llu; }
+-    static size_t mod10193(size_t hash) { return hash % 10193llu; }
+-    static size_t mod12853(size_t hash) { return hash % 12853llu; }
+-    static size_t mod16193(size_t hash) { return hash % 16193llu; }
+-    static size_t mod20399(size_t hash) { return hash % 20399llu; }
+-    static size_t mod25717(size_t hash) { return hash % 25717llu; }
+-    static size_t mod32401(size_t hash) { return hash % 32401llu; }
+-    static size_t mod40823(size_t hash) { return hash % 40823llu; }
+-    static size_t mod51437(size_t hash) { return hash % 51437llu; }
+-    static size_t mod64811(size_t hash) { return hash % 64811llu; }
+-    static size_t mod81649(size_t hash) { return hash % 81649llu; }
+-    static size_t mod102877(size_t hash) { return hash % 102877llu; }
+-    static size_t mod129607(size_t hash) { return hash % 129607llu; }
+-    static size_t mod163307(size_t hash) { return hash % 163307llu; }
+-    static size_t mod205759(size_t hash) { return hash % 205759llu; }
+-    static size_t mod259229(size_t hash) { return hash % 259229llu; }
+-    static size_t mod326617(size_t hash) { return hash % 326617llu; }
+-    static size_t mod411527(size_t hash) { return hash % 411527llu; }
+-    static size_t mod518509(size_t hash) { return hash % 518509llu; }
+-    static size_t mod653267(size_t hash) { return hash % 653267llu; }
+-    static size_t mod823117(size_t hash) { return hash % 823117llu; }
+-    static size_t mod1037059(size_t hash) { return hash % 1037059llu; }
+-    static size_t mod1306601(size_t hash) { return hash % 1306601llu; }
+-    static size_t mod1646237(size_t hash) { return hash % 1646237llu; }
+-    static size_t mod2074129(size_t hash) { return hash % 2074129llu; }
+-    static size_t mod2613229(size_t hash) { return hash % 2613229llu; }
+-    static size_t mod3292489(size_t hash) { return hash % 3292489llu; }
+-    static size_t mod4148279(size_t hash) { return hash % 4148279llu; }
+-    static size_t mod5226491(size_t hash) { return hash % 5226491llu; }
+-    static size_t mod6584983(size_t hash) { return hash % 6584983llu; }
+-    static size_t mod8296553(size_t hash) { return hash % 8296553llu; }
+-    static size_t mod10453007(size_t hash) { return hash % 10453007llu; }
+-    static size_t mod13169977(size_t hash) { return hash % 13169977llu; }
+-    static size_t mod16593127(size_t hash) { return hash % 16593127llu; }
+-    static size_t mod20906033(size_t hash) { return hash % 20906033llu; }
+-    static size_t mod26339969(size_t hash) { return hash % 26339969llu; }
+-    static size_t mod33186281(size_t hash) { return hash % 33186281llu; }
+-    static size_t mod41812097(size_t hash) { return hash % 41812097llu; }
+-    static size_t mod52679969(size_t hash) { return hash % 52679969llu; }
+-    static size_t mod66372617(size_t hash) { return hash % 66372617llu; }
+-    static size_t mod83624237(size_t hash) { return hash % 83624237llu; }
+-    static size_t mod105359939(size_t hash) { return hash % 105359939llu; }
+-    static size_t mod132745199(size_t hash) { return hash % 132745199llu; }
+-    static size_t mod167248483(size_t hash) { return hash % 167248483llu; }
+-    static size_t mod210719881(size_t hash) { return hash % 210719881llu; }
+-    static size_t mod265490441(size_t hash) { return hash % 265490441llu; }
+-    static size_t mod334496971(size_t hash) { return hash % 334496971llu; }
+-    static size_t mod421439783(size_t hash) { return hash % 421439783llu; }
+-    static size_t mod530980861(size_t hash) { return hash % 530980861llu; }
+-    static size_t mod668993977(size_t hash) { return hash % 668993977llu; }
+-    static size_t mod842879579(size_t hash) { return hash % 842879579llu; }
+-    static size_t mod1061961721(size_t hash) { return hash % 1061961721llu; }
+-    static size_t mod1337987929(size_t hash) { return hash % 1337987929llu; }
+-    static size_t mod1685759167(size_t hash) { return hash % 1685759167llu; }
+-    static size_t mod2123923447(size_t hash) { return hash % 2123923447llu; }
+-    static size_t mod2675975881(size_t hash) { return hash % 2675975881llu; }
+-    static size_t mod3371518343(size_t hash) { return hash % 3371518343llu; }
+-    static size_t mod4247846927(size_t hash) { return hash % 4247846927llu; }
++    static size_t mod0(size_t) { return 0u; }
++    static size_t mod2(size_t hash) { return hash % 2u; }
++    static size_t mod3(size_t hash) { return hash % 3u; }
++    static size_t mod5(size_t hash) { return hash % 5u; }
++    static size_t mod7(size_t hash) { return hash % 7u; }
++    static size_t mod11(size_t hash) { return hash % 11u; }
++    static size_t mod13(size_t hash) { return hash % 13u; }
++    static size_t mod17(size_t hash) { return hash % 17u; }
++    static size_t mod23(size_t hash) { return hash % 23u; }
++    static size_t mod29(size_t hash) { return hash % 29u; }
++    static size_t mod37(size_t hash) { return hash % 37u; }
++    static size_t mod47(size_t hash) { return hash % 47u; }
++    static size_t mod59(size_t hash) { return hash % 59u; }
++    static size_t mod73(size_t hash) { return hash % 73u; }
++    static size_t mod97(size_t hash) { return hash % 97u; }
++    static size_t mod127(size_t hash) { return hash % 127u; }
++    static size_t mod151(size_t hash) { return hash % 151u; }
++    static size_t mod197(size_t hash) { return hash % 197u; }
++    static size_t mod251(size_t hash) { return hash % 251u; }
++    static size_t mod313(size_t hash) { return hash % 313u; }
++    static size_t mod397(size_t hash) { return hash % 397u; }
++    static size_t mod499(size_t hash) { return hash % 499u; }
++    static size_t mod631(size_t hash) { return hash % 631u; }
++    static size_t mod797(size_t hash) { return hash % 797u; }
++    static size_t mod1009(size_t hash) { return hash % 1009u; }
++    static size_t mod1259(size_t hash) { return hash % 1259u; }
++    static size_t mod1597(size_t hash) { return hash % 1597u; }
++    static size_t mod2011(size_t hash) { return hash % 2011u; }
++    static size_t mod2539(size_t hash) { return hash % 2539u; }
++    static size_t mod3203(size_t hash) { return hash % 3203u; }
++    static size_t mod4027(size_t hash) { return hash % 4027u; }
++    static size_t mod5087(size_t hash) { return hash % 5087u; }
++    static size_t mod6421(size_t hash) { return hash % 6421u; }
++    static size_t mod8089(size_t hash) { return hash % 8089u; }
++    static size_t mod10193(size_t hash) { return hash % 10193u; }
++    static size_t mod12853(size_t hash) { return hash % 12853u; }
++    static size_t mod16193(size_t hash) { return hash % 16193u; }
++    static size_t mod20399(size_t hash) { return hash % 20399u; }
++    static size_t mod25717(size_t hash) { return hash % 25717u; }
++    static size_t mod32401(size_t hash) { return hash % 32401u; }
++    static size_t mod40823(size_t hash) { return hash % 40823u; }
++    static size_t mod51437(size_t hash) { return hash % 51437u; }
++    static size_t mod64811(size_t hash) { return hash % 64811u; }
++    static size_t mod81649(size_t hash) { return hash % 81649u; }
++    static size_t mod102877(size_t hash) { return hash % 102877u; }
++    static size_t mod129607(size_t hash) { return hash % 129607u; }
++    static size_t mod163307(size_t hash) { return hash % 163307u; }
++    static size_t mod205759(size_t hash) { return hash % 205759u; }
++    static size_t mod259229(size_t hash) { return hash % 259229u; }
++    static size_t mod326617(size_t hash) { return hash % 326617u; }
++    static size_t mod411527(size_t hash) { return hash % 411527u; }
++    static size_t mod518509(size_t hash) { return hash % 518509u; }
++    static size_t mod653267(size_t hash) { return hash % 653267u; }
++    static size_t mod823117(size_t hash) { return hash % 823117u; }
++    static size_t mod1037059(size_t hash) { return hash % 1037059u; }
++    static size_t mod1306601(size_t hash) { return hash % 1306601u; }
++    static size_t mod1646237(size_t hash) { return hash % 1646237u; }
++    static size_t mod2074129(size_t hash) { return hash % 2074129u; }
++    static size_t mod2613229(size_t hash) { return hash % 2613229u; }
++    static size_t mod3292489(size_t hash) { return hash % 3292489u; }
++    static size_t mod4148279(size_t hash) { return hash % 4148279u; }
++    static size_t mod5226491(size_t hash) { return hash % 5226491u; }
++    static size_t mod6584983(size_t hash) { return hash % 6584983u; }
++    static size_t mod8296553(size_t hash) { return hash % 8296553u; }
++    static size_t mod10453007(size_t hash) { return hash % 10453007u; }
++    static size_t mod13169977(size_t hash) { return hash % 13169977u; }
++    static size_t mod16593127(size_t hash) { return hash % 16593127u; }
++    static size_t mod20906033(size_t hash) { return hash % 20906033u; }
++    static size_t mod26339969(size_t hash) { return hash % 26339969u; }
++    static size_t mod33186281(size_t hash) { return hash % 33186281u; }
++    static size_t mod41812097(size_t hash) { return hash % 41812097u; }
++    static size_t mod52679969(size_t hash) { return hash % 52679969u; }
++    static size_t mod66372617(size_t hash) { return hash % 66372617u; }
++    static size_t mod83624237(size_t hash) { return hash % 83624237u; }
++    static size_t mod105359939(size_t hash) { return hash % 105359939u; }
++    static size_t mod132745199(size_t hash) { return hash % 132745199u; }
++    static size_t mod167248483(size_t hash) { return hash % 167248483u; }
++    static size_t mod210719881(size_t hash) { return hash % 210719881u; }
++    static size_t mod265490441(size_t hash) { return hash % 265490441u; }
++    static size_t mod334496971(size_t hash) { return hash % 334496971u; }
++    static size_t mod421439783(size_t hash) { return hash % 421439783u; }
++    static size_t mod530980861(size_t hash) { return hash % 530980861u; }
++    static size_t mod668993977(size_t hash) { return hash % 668993977u; }
++    static size_t mod842879579(size_t hash) { return hash % 842879579u; }
++    static size_t mod1061961721(size_t hash) { return hash % 1061961721u; }
++    static size_t mod1337987929(size_t hash) { return hash % 1337987929u; }
++    static size_t mod1685759167(size_t hash) { return hash % 1685759167u; }
++    static size_t mod2123923447(size_t hash) { return hash % 2123923447u; }
++    static size_t mod2675975881(size_t hash) { return hash % 2675975881u; }
++    static size_t mod3371518343(size_t hash) { return hash % 3371518343u; }
++    static size_t mod4247846927(size_t hash) { return hash % 4247846927u; }
++
++#ifdef ENV64BIT
+     static size_t mod5351951779(size_t hash) { return hash % 5351951779llu; }
+     static size_t mod6743036717(size_t hash) { return hash % 6743036717llu; }
+     static size_t mod8495693897(size_t hash) { return hash % 8495693897llu; }
+@@ -1116,6 +1141,7 @@ struct prime_number_hash_policy
+     static size_t mod11493228998133068689(size_t hash) { return hash % 11493228998133068689llu; }
+     static size_t mod14480561146010017169(size_t hash) { return hash % 14480561146010017169llu; }
+     static size_t mod18446744073709551557(size_t hash) { return hash % 18446744073709551557llu; }
++#endif
+ 
+     using mod_function = size_t (*)(size_t);
+ 
+@@ -1130,20 +1156,22 @@ struct prime_number_hash_policy
+         // 5. get PrevPrime(2^64) and put it at the end
+         static constexpr const size_t prime_list[] =
+         {
+-            2llu, 3llu, 5llu, 7llu, 11llu, 13llu, 17llu, 23llu, 29llu, 37llu, 47llu,
+-            59llu, 73llu, 97llu, 127llu, 151llu, 197llu, 251llu, 313llu, 397llu,
+-            499llu, 631llu, 797llu, 1009llu, 1259llu, 1597llu, 2011llu, 2539llu,
+-            3203llu, 4027llu, 5087llu, 6421llu, 8089llu, 10193llu, 12853llu, 16193llu,
+-            20399llu, 25717llu, 32401llu, 40823llu, 51437llu, 64811llu, 81649llu,
+-            102877llu, 129607llu, 163307llu, 205759llu, 259229llu, 326617llu,
+-            411527llu, 518509llu, 653267llu, 823117llu, 1037059llu, 1306601llu,
+-            1646237llu, 2074129llu, 2613229llu, 3292489llu, 4148279llu, 5226491llu,
+-            6584983llu, 8296553llu, 10453007llu, 13169977llu, 16593127llu, 20906033llu,
+-            26339969llu, 33186281llu, 41812097llu, 52679969llu, 66372617llu,
+-            83624237llu, 105359939llu, 132745199llu, 167248483llu, 210719881llu,
+-            265490441llu, 334496971llu, 421439783llu, 530980861llu, 668993977llu,
+-            842879579llu, 1061961721llu, 1337987929llu, 1685759167llu, 2123923447llu,
+-            2675975881llu, 3371518343llu, 4247846927llu, 5351951779llu, 6743036717llu,
++            2u, 3u, 5u, 7u, 11u, 13u, 17u, 23u, 29u, 37u, 47u,
++            59u, 73u, 97u, 127u, 151u, 197u, 251u, 313u, 397u,
++            499u, 631u, 797u, 1009u, 1259u, 1597u, 2011u, 2539u,
++            3203u, 4027u, 5087u, 6421u, 8089u, 10193u, 12853u, 16193u,
++            20399u, 25717u, 32401u, 40823u, 51437u, 64811u, 81649u,
++            102877u, 129607u, 163307u, 205759u, 259229u, 326617u,
++            411527u, 518509u, 653267u, 823117u, 1037059u, 1306601u,
++            1646237u, 2074129u, 2613229u, 3292489u, 4148279u, 5226491u,
++            6584983u, 8296553u, 10453007u, 13169977u, 16593127u, 20906033u,
++            26339969u, 33186281u, 41812097u, 52679969u, 66372617u,
++            83624237u, 105359939u, 132745199u, 167248483u, 210719881u,
++            265490441u, 334496971u, 421439783u, 530980861u, 668993977u,
++            842879579u, 1061961721u, 1337987929u, 1685759167u, 2123923447u,
++            2675975881u, 3371518343u, 4247846927u
++#ifdef ENV64BIT
++            , 5351951779llu, 6743036717llu,
+             8495693897llu, 10703903591llu, 13486073473llu, 16991387857llu,
+             21407807219llu, 26972146961llu, 33982775741llu, 42815614441llu,
+             53944293929llu, 67965551447llu, 85631228929llu, 107888587883llu,
+@@ -1172,6 +1200,7 @@ struct prime_number_hash_policy
+             2873307249533267101llu, 3620140286502504283llu, 4561090950536962147llu,
+             5746614499066534157llu, 7240280573005008577llu, 9122181901073924329llu,
+             11493228998133068689llu, 14480561146010017169llu, 18446744073709551557llu
++#endif
+         };
+         static constexpr size_t (* const mod_functions[])(size_t) =
+         {
+@@ -1187,8 +1216,10 @@ struct prime_number_hash_policy
+             &mod41812097, &mod52679969, &mod66372617, &mod83624237, &mod105359939, &mod132745199,
+             &mod167248483, &mod210719881, &mod265490441, &mod334496971, &mod421439783,
+             &mod530980861, &mod668993977, &mod842879579, &mod1061961721, &mod1337987929,
+-            &mod1685759167, &mod2123923447, &mod2675975881, &mod3371518343, &mod4247846927,
+-            &mod5351951779, &mod6743036717, &mod8495693897, &mod10703903591, &mod13486073473,
++            &mod1685759167, &mod2123923447, &mod2675975881, &mod3371518343, &mod4247846927
++
++#ifdef ENV64BIT
++            , &mod5351951779, &mod6743036717, &mod8495693897, &mod10703903591, &mod13486073473,
+             &mod16991387857, &mod21407807219, &mod26972146961, &mod33982775741, &mod42815614441,
+             &mod53944293929, &mod67965551447, &mod85631228929, &mod107888587883, &mod135931102921,
+             &mod171262457903, &mod215777175787, &mod271862205833, &mod342524915839,
+@@ -1214,6 +1245,7 @@ struct prime_number_hash_policy
+             &mod2873307249533267101, &mod3620140286502504283, &mod4561090950536962147,
+             &mod5746614499066534157, &mod7240280573005008577, &mod9122181901073924329,
+             &mod11493228998133068689, &mod14480561146010017169, &mod18446744073709551557
++#endif
+         };
+         const size_t * found = std::lower_bound(std::begin(prime_list), std::end(prime_list) - 1, size);
+         size = *found;
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 226e381..cea7dec 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -65,7 +65,7 @@ if (GSL_FOUND)
+     target_link_libraries(${PROJECT_NAME} INTERFACE GSL::gsl)
+ endif ()
+ 
+-add_subdirectory(tools/sz3)
++# add_subdirectory(tools/sz3)
+ add_subdirectory(tools/sz3c)
+ 
+ 
diff --git a/packages/libeccodes/meta.yaml b/packages/libeccodes/meta.yaml
new file mode 100644
index 00000000..4b30089c
--- /dev/null
+++ b/packages/libeccodes/meta.yaml
@@ -0,0 +1,41 @@
+package:
+  name: libeccodes
+  version: 2.30.0
+
+source:
+  url: https://github.com/ecmwf/eccodes/archive/refs/tags/2.30.0.tar.gz
+  sha256: 5869817b76d1fd3b4b4d6ec3629231e4470f52a5abbfcec003974c1a7fdecbee
+  patches:
+    - patches/0001-32bit-support-hack.patch
+
+build:
+  type: shared_library
+  script: |
+    git clone --branch 3.7.0 --depth 1 https://github.com/ecmwf/ecbuild;
+
+    mkdir -p build;
+
+    cd build \
+        && emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=${WASM_LIBRARY_DIR} \
+        -DBUILD_SHARED_LIBS=ON \
+        -DENABLE_NETCDF=OFF \
+        -DENABLE_JPG=OFF \
+        -DENABLE_PNG=OFF \
+        -DENABLE_AEC=OFF \
+        -DENABLE_FORTRAN=OFF \
+        -DDISABLE_OS_CHECK=ON \
+        -DENABLE_TESTS=OFF \
+        -DENABLE_PRODUCT_GRIB=ON \
+        -DENABLE_PRODUCT_BUFR=ON \
+        -DENABLE_EXAMPLES=OFF \
+        -DENABLE_BUILD_TOOLS=OFF \
+        -DENABLE_INSTALL_ECCODES_DEFINITIONS=ON \
+        -DENABLE_INSTALL_ECCODES_SAMPLES=OFF;
+        #-DCMAKE_C_FLAGS="-s TOTAL_MEMORY=50790400" \
+        #-DCMAKE_CXX_FLAGS="-s TOTAL_MEMORY=50790400";
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make -j ${PYODIDE_JOBS:-3} install;
+
+    cp -P ${WASM_LIBRARY_DIR}/lib/libeccodes.so ${DISTDIR}
diff --git a/packages/libeccodes/patches/0001-32bit-support-hack.patch b/packages/libeccodes/patches/0001-32bit-support-hack.patch
new file mode 100644
index 00000000..3d270618
--- /dev/null
+++ b/packages/libeccodes/patches/0001-32bit-support-hack.patch
@@ -0,0 +1,83 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index f7085bcae..d495de0f5 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -66,9 +66,9 @@ ecbuild_debug("ECCODES_LITTLE_ENDIAN=${ECCODES_LITTLE_ENDIAN}")
+ ecbuild_info("Operating system=${CMAKE_SYSTEM} (${EC_OS_BITS} bits)")
+ 
+ # Only support 64 bit operating systems
+-if( NOT EC_OS_BITS EQUAL "64" )
+-    ecbuild_critical( "Operating system ${CMAKE_SYSTEM} (${EC_OS_BITS} bits) -- ecCodes only supports 64 bit platforms" )
+-endif()
++# if( NOT EC_OS_BITS EQUAL "64" )
++#     ecbuild_critical( "Operating system ${CMAKE_SYSTEM} (${EC_OS_BITS} bits) -- ecCodes only supports 64 bit platforms" )
++# endif()
+ 
+ ###############################################################################
+ # some variables/options of this project
+@@ -423,7 +423,7 @@ if( HAVE_BUILD_TOOLS )
+ endif()
+ add_subdirectory( fortran )
+ 
+-add_subdirectory( tests )
++# add_subdirectory( tests )
+ add_subdirectory( examples )
+ add_subdirectory( data )
+ add_subdirectory( samples )
+diff --git a/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc b/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
+index df99452a0..92e4fe6af 100644
+--- a/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
++++ b/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
+@@ -215,6 +215,15 @@ static void init_class(grib_accessor_class* c)
+ #define MAX_NUMBER_OF_GROUPS 65534
+ #define EFDEBUG 0
+ 
++static const size_t nbits[32]={
++        0x1, 0x2, 0x4, 0x8, 0x10, 0x20,
++        0x40, 0x80, 0x100, 0x200, 0x400, 0x800,
++        0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000,
++        0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,
++        0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000,
++        0x40000000, 0x80000000
++};
++/*
+ static const unsigned long nbits[64] = {
+     0x1, 0x2, 0x4, 0x8,
+     0x10, 0x20, 0x40, 0x80,
+@@ -233,6 +242,7 @@ static const unsigned long nbits[64] = {
+     0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
+     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
+ };
++*/
+ 
+ static long number_of_bits(grib_handle* h, unsigned long x)
+ {
+diff --git a/src/grib_accessor_class_second_order_bits_per_value.cc b/src/grib_accessor_class_second_order_bits_per_value.cc
+index 5cd3b970c..63f713fd5 100644
+--- a/src/grib_accessor_class_second_order_bits_per_value.cc
++++ b/src/grib_accessor_class_second_order_bits_per_value.cc
+@@ -151,7 +151,6 @@ static void init_class(grib_accessor_class* c)
+ 
+ /* END_CLASS_IMP */
+ 
+-/*
+ static const size_t nbits[32]={
+         0x1, 0x2, 0x4, 0x8, 0x10, 0x20,
+         0x40, 0x80, 0x100, 0x200, 0x400, 0x800,
+@@ -160,7 +159,7 @@ static const size_t nbits[32]={
+         0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000,
+         0x40000000, 0x80000000
+ };
+-*/
++/*
+ static const size_t nbits[64] = {
+     0x1, 0x2, 0x4, 0x8,
+     0x10, 0x20, 0x40, 0x80,
+@@ -179,6 +178,7 @@ static const size_t nbits[64] = {
+     0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
+     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
+ };
++*/
+ 
+ static int number_of_bits(size_t x, long* result)
+ {
diff --git a/packages/libnetcdf/meta.yaml b/packages/libnetcdf/meta.yaml
new file mode 100644
index 00000000..2ea001c0
--- /dev/null
+++ b/packages/libnetcdf/meta.yaml
@@ -0,0 +1,41 @@
+package:
+  name: libnetcdf
+  version: 4.9.2
+
+source:
+  sha256: bc104d101278c68b303359b3dc4192f81592ae8640f1aee486921138f7f88cb7
+  url: https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.9.2.tar.gz
+  patches:
+    - patches/0001-disable-hdf5-configure-tests.patch
+
+requirements:
+  host:
+    - libhdf5
+    - zlib
+    - libxml
+
+build:
+  type: shared_library
+  script: |
+    export PATH=${WASM_LIBRARY_DIR}/bin:${PATH}
+
+    # dap + byterange: no libcurl
+
+    emconfigure ./configure \
+      --prefix=${WASM_LIBRARY_DIR} \
+      --disable-doxygen \
+      --enable-netcdf-4 \
+      --disable-dap \
+      --disable-byterange \
+      --disable-dap-remote-tests \
+      --disable-examples \
+      --disable-utilities \
+      --disable-testsets \
+      CFLAGS="-fPIC -I${WASM_LIBRARY_DIR}/include" \
+      CXXFLAGS="-fPIC -I${WASM_LIBRARY_DIR}/include" \
+      LDFLAGS="-L${WASM_LIBRARY_DIR}/lib";
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make -j ${PYODIDE_JOBS:-3} install;
+
+    cp -P ${WASM_LIBRARY_DIR}/lib/libnetcdf* ${DISTDIR}
diff --git a/packages/libnetcdf/patches/0001-disable-hdf5-configure-tests.patch b/packages/libnetcdf/patches/0001-disable-hdf5-configure-tests.patch
new file mode 100644
index 00000000..feb2dd98
--- /dev/null
+++ b/packages/libnetcdf/patches/0001-disable-hdf5-configure-tests.patch
@@ -0,0 +1,186 @@
+diff --git a/configure b/configure
+index d44122aa..130e5cb3 100755
+--- a/configure
++++ b/configure
+@@ -25216,25 +25216,26 @@ return H5Fflush ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5 hdf5.dll
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5Fflush=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5Fflush+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5 hdf5.dll
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5Fflush=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5Fflush+y}
++# then :
++#   break
++# fi
++# done
++ac_cv_search_H5Fflush=hdf5
+ if test ${ac_cv_search_H5Fflush+y}
+ then :
+ 
+@@ -25277,25 +25278,26 @@ return H5DSis_scale ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5_hl hdf5_hl.dll
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5DSis_scale=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5DSis_scale+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5_hl hdf5_hl.dll
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5DSis_scale=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5DSis_scale+y}
++# then :
++#   break
++# fi
++# done
++ac_cv_search_H5DSis_scale=hdf5_hl
+ if test ${ac_cv_search_H5DSis_scale+y}
+ then :
+ 
+@@ -25427,25 +25429,25 @@ return H5Dread_chunk ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5_hldll hdf5_hl
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5Dread_chunk=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5Dread_chunk+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5_hldll hdf5_hl
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5Dread_chunk=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5Dread_chunk+y}
++# then :
++#   break
++# fi
++# done
+ if test ${ac_cv_search_H5Dread_chunk+y}
+ then :
+ 
+@@ -25490,25 +25492,25 @@ return H5Pset_fapl_ros3 ();
+   return 0;
+ }
+ _ACEOF
+-for ac_lib in '' hdf5_hldll hdf5_hl
+-do
+-  if test -z "$ac_lib"; then
+-    ac_res="none required"
+-  else
+-    ac_res=-l$ac_lib
+-    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+-  fi
+-  if ac_fn_c_try_link "$LINENO"
+-then :
+-  ac_cv_search_H5Pset_fapl_ros3=$ac_res
+-fi
+-rm -f core conftest.err conftest.$ac_objext conftest.beam \
+-    conftest$ac_exeext
+-  if test ${ac_cv_search_H5Pset_fapl_ros3+y}
+-then :
+-  break
+-fi
+-done
++# for ac_lib in '' hdf5_hldll hdf5_hl
++# do
++#   if test -z "$ac_lib"; then
++#     ac_res="none required"
++#   else
++#     ac_res=-l$ac_lib
++#     LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
++#   fi
++#   if ac_fn_c_try_link "$LINENO"
++# then :
++#   ac_cv_search_H5Pset_fapl_ros3=$ac_res
++# fi
++# rm -f core conftest.err conftest.$ac_objext conftest.beam \
++#     conftest$ac_exeext
++#   if test ${ac_cv_search_H5Pset_fapl_ros3+y}
++# then :
++#   break
++# fi
++# done
+ if test ${ac_cv_search_H5Pset_fapl_ros3+y}
+ then :
+ 
diff --git a/packages/libproj/meta.yaml b/packages/libproj/meta.yaml
index 9deee8d6..9a9a7060 100644
--- a/packages/libproj/meta.yaml
+++ b/packages/libproj/meta.yaml
@@ -5,6 +5,8 @@ package:
 source:
   sha256: 76ed3d0c3a348a6693dfae535e5658bbfd47f71cb7ff7eb96d9f12f7e068b1cf
   url: https://download.osgeo.org/proj/proj-8.2.1.tar.gz
+  patches:
+    - patches/0001-stod-empty-zero.patch
 
 requirements:
   host:
diff --git a/packages/libproj/patches/0001-stod-empty-zero.patch b/packages/libproj/patches/0001-stod-empty-zero.patch
new file mode 100644
index 00000000..035525dc
--- /dev/null
+++ b/packages/libproj/patches/0001-stod-empty-zero.patch
@@ -0,0 +1,16 @@
+diff --git a/src/iso19111/internal.cpp b/src/iso19111/internal.cpp
+index 4810202d..f7c667bc 100644
+--- a/src/iso19111/internal.cpp
++++ b/src/iso19111/internal.cpp
+@@ -242,6 +242,11 @@ bool ends_with(const std::string &str, const std::string &suffix) noexcept {
+ double c_locale_stod(const std::string &s) {
+ 
+     const auto s_size = s.size();
++    // Propagate <cstdlib>'s strtod behaviour
++    if (s_size == 0) {
++        return 0.0;
++    }
++
+     // Fast path
+     if (s_size > 0 && s_size < 15) {
+         std::int64_t acc = 0;
diff --git a/packages/netcdf4/meta.yaml b/packages/netcdf4/meta.yaml
new file mode 100644
index 00000000..e10596cc
--- /dev/null
+++ b/packages/netcdf4/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: netcdf4
+  version: 1.6.3
+  top-level:
+    - netCDF4
+source:
+  url: https://files.pythonhosted.org/packages/8b/92/ff3b18a2f5fe03ffc2807c2ac8b55bee2c8ee730d1100b79bc8a7ab96134/netCDF4-1.6.3.tar.gz
+  sha256: 8c98a3a8cda06920ee8bd24a71226ddf0328c22bd838b0afca9cb45fb4580d99
+requirements:
+  host:
+    - libhdf5
+    - libnetcdf
+  run:
+    - numpy
+    - packaging
+    - h5py
+    - cftime
+test:
+  imports:
+    - netCDF4
+build:
+  vendor-sharedlib: true
+  script: |
+    export PATH=${WASM_LIBRARY_DIR}/bin:${PATH}
+    export HDF5_DIR=${WASM_LIBRARY_DIR}
+    echo ${HDF5_DIR}
+about:
+  home: "https://github.com/Unidata/netcdf4-python"
+  PyPI: https://pypi.org/project/netcdf4
+  summary: Provides an object-oriented python interface to the netCDF version 4 library
+  license: MIT
diff --git a/packages/pyshp/meta.yaml b/packages/pyshp/meta.yaml
new file mode 100644
index 00000000..355a6426
--- /dev/null
+++ b/packages/pyshp/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: pyshp
+  version: 2.3.1
+  top-level:
+    - shapefile
+source:
+  url: https://files.pythonhosted.org/packages/98/2f/68116db5b36b895c0450e3072b8cb6c2fac0359279b182ea97014d3c8ac0/pyshp-2.3.1-py2.py3-none-any.whl
+  sha256: 67024c0ccdc352ba5db777c4e968483782dfa78f8e200672a90d2d30fd8b7b49
+about:
+  home: https://github.com/GeospatialPython/pyshp
+  PyPI: https://pypi.org/project/pyshp
+  summary: Pure Python read/write support for ESRI Shapefile format
+  license: MIT
diff --git a/packages/pysz/meta.yaml b/packages/pysz/meta.yaml
new file mode 100644
index 00000000..760029ff
--- /dev/null
+++ b/packages/pysz/meta.yaml
@@ -0,0 +1,27 @@
+package:
+  name: pysz
+  version: 3.1.7
+  top-level:
+    - pysz
+source:
+  url: https://github.com/szcompressor/SZ3/tarball/1e1dc10
+  sha256: 5873e589f2e7236c9ee83bd2ace392bec6f04a4bc1fd93feade0d62018344857
+  extract_dir: szcompressor-SZ3-1e1dc10
+  patches:
+    - patches/0001-pysz-pyproject.patch
+requirements:
+  host:
+    - numpy
+    - libSZ3c
+  run:
+    - numpy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    cp ${WASM_LIBRARY_DIR}/lib/libSZ3c.so tools/pysz
+
+about:
+  home: https://github.com/szcompressor/SZ3
+  summary: "SZ3: A Modular Error-bounded Lossy Compression Framework for Scientific Datasets"
+  license: BSD-3-Clause
diff --git a/packages/pysz/patches/0001-pysz-pyproject.patch b/packages/pysz/patches/0001-pysz-pyproject.patch
new file mode 100644
index 00000000..0c911f47
--- /dev/null
+++ b/packages/pysz/patches/0001-pysz-pyproject.patch
@@ -0,0 +1,104 @@
+diff --git a/pyproject.toml b/pyproject.toml
+new file mode 100644
+index 0000000..2da68a7
+--- /dev/null
++++ b/pyproject.toml
+@@ -0,0 +1,23 @@
++[project]
++name = "pysz"
++version = "3.1.7"
++authors = [
++    { name = "Mathematics and Computer Science (MCS), Argonne National Laboratory" },
++]
++description = "SZ3: A Modular Error-bounded Lossy Compression Framework for Scientific Datasets"
++license = { file = "copyright-and-BSD-license.txt" }
++dependencies = ["numpy"]
++
++[project.urls]
++homepage = "https://github.com/szcompressor/SZ3"
++repository = "https://github.com/szcompressor/SZ3.git"
++
++[build-system]
++requires = ["setuptools>=42", "wheel"]
++build-backend = "setuptools.build_meta"
++
++[tool.setuptools.packages.find]
++where = ["tools"]
++
++[tool.setuptools.package-data]
++pysz = ["libSZ3c.so"]
+diff --git a/tools/pysz/pysz.py b/tools/pysz/__init__.py
+similarity index 95%
+rename from tools/pysz/pysz.py
+rename to tools/pysz/__init__.py
+index fa775de..b3fb09e 100644
+--- a/tools/pysz/pysz.py
++++ b/tools/pysz/__init__.py
+@@ -1,12 +1,20 @@
+-import sys
+ import ctypes
+ from ctypes.util import find_library
++from pathlib import Path
+ import numpy as np
+ 
+ """
+ Python API for SZ2/SZ3
+ """
+ 
++mode_abs = 0
++mode_rel = 1
++mode_abs_and_rel = 2
++mode_abs_or_rel = 3
++mode_psnr = 4
++mode_norm = 5
++mode_pw_rel = 10
++
+ 
+ class SZ:
+     def __init__(self, szpath=None):
+@@ -16,10 +24,7 @@ class SZ:
+         """
+ 
+         if szpath is None:
+-            szpath = {
+-                "darwin": "libSZ3c.dylib",
+-                "windows": "SZ3c.dll",
+-            }.get(sys.platform, "libSZ3c.so")
++            szpath = Path(__file__).parent / "libSZ3c.so"
+ 
+ 
+         self.sz = ctypes.cdll.LoadLibrary(szpath)
+diff --git a/tools/pysz/test.py b/tools/pysz/test.py
+deleted file mode 100644
+index c4691c6..0000000
+--- a/tools/pysz/test.py
++++ /dev/null
+@@ -1,28 +0,0 @@
+-import numpy as np
+-from pathlib import Path
+-from pysz import SZ
+-import sys
+-
+-# prepare your data in numpy array format
+-HOME = str(Path.home())
+-data = np.fromfile(HOME + '/data/hurricane-100x500x500/Uf48.bin.dat', dtype=np.float32)
+-data = np.reshape(data, (100, 500, 500))
+-
+-# init SZ (both SZ2 and SZ3 are supported)
+-# Please change the path to the SZ dynamic library file in your system
+-lib_extention = {
+-    "darwin": "libSZ3c.dylib",
+-    "windows": "SZ3c.dll",
+-}.get(sys.platform, "libSZ3c.so")
+-
+-sz = SZ("../../install/lib/{}".format(lib_extention))
+-
+-# compress, both input and output data are numpy array
+-data_cmpr, cmpr_ratio = sz.compress(data, 0, 1e-3, 0, 0)
+-print("compression ratio = {:5G}".format(cmpr_ratio))
+-
+-# decompress, both input and output data are numpy array
+-data_dec = sz.decompress(data_cmpr, data.shape, data.dtype)
+-
+-# verify
+-sz.verify(data, data_dec)
diff --git a/packages/widgetsnbextension/meta.yaml b/packages/widgetsnbextension/meta.yaml
new file mode 100644
index 00000000..3ec19003
--- /dev/null
+++ b/packages/widgetsnbextension/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: widgetsnbextension
+  version: 4.0.7
+  top-level:
+    - widgetsnbextension
+source:
+  url: https://github.com/jupyterlite/pyodide-kernel/archive/refs/tags/v0.0.8.tar.gz
+  sha256: 3f64751d61c9f954415c87a72e44e7eb22511a8a0a8448d1011eb46fe5f9a495
+build:
+  script: |
+    cd ..
+    mv widgetsnbextension-4.0.7/packages/pyodide-kernel/py/widgetsnbextension4/widgetsnbextension .
+    rm -rf widgetsnbextension-4.0.7
+    mv widgetsnbextension widgetsnbextension-4.0.7
+about:
+  home: http://jupyter.org
+  PyPI: https://pypi.org/project/widgetsnbextension
+  summary: Jupyter interactive widgets for Jupyter Notebook
+  license: BSD 3-Clause License
diff --git a/packages/xarray/meta.yaml b/packages/xarray/meta.yaml
index e3c6c337..5338926f 100644
--- a/packages/xarray/meta.yaml
+++ b/packages/xarray/meta.yaml
@@ -12,6 +12,7 @@ requirements:
     - numpy
     - packaging
     - pandas
+    - dask
 about:
   home: https://github.com/pydata/xarray
   PyPI: https://pypi.org/project/xarray
diff --git a/packages/zfpy/meta.yaml b/packages/zfpy/meta.yaml
new file mode 100644
index 00000000..9d376bdf
--- /dev/null
+++ b/packages/zfpy/meta.yaml
@@ -0,0 +1,37 @@
+package:
+  name: zfpy
+  version: 1.0.0
+  top-level:
+    - zfpy
+source:
+  url: https://github.com/LLNL/zfp/archive/refs/tags/1.0.0.tar.gz
+  sha256: fe13b03141ee9b571692aed42ff76cf37c9dcda40f9a43a808870dca3558a57c
+  patches:
+    - patches/0001-setup-with-cython.patch
+requirements:
+  host:
+    - numpy
+  run:
+    - numpy
+
+build:
+  vendor-sharedlib: true
+  script: |
+    mkdir -p build
+
+    cd build && \
+      emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=$WASM_LIBRARY_DIR \
+        -DCMAKE_BUILD_TYPE=Release \
+        -DBUILD_TESTING=OFF \
+        -DZFP_WITH_OPENMP=OFF \
+        -DBUILD_UTILITIES=OFF;
+    
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make install;
+
+about:
+  home: https://zfp.llnl.gov/
+  PyPI: https://pypi.org/project/zfpy/
+  summary: Compressed numerical arrays that support high-speed random access
+  license: BSD-3-Clause
diff --git a/packages/zfpy/patches/0001-setup-with-cython.patch b/packages/zfpy/patches/0001-setup-with-cython.patch
new file mode 100644
index 00000000..7c834c35
--- /dev/null
+++ b/packages/zfpy/patches/0001-setup-with-cython.patch
@@ -0,0 +1,24 @@
+diff --git a/setup.py b/setup.py
+index 9e4c391..7f53777 100644
+--- a/setup.py
++++ b/setup.py
+@@ -1,3 +1,4 @@
++import os
+ from setuptools import setup, Extension
+ import numpy as np
+ 
+@@ -9,7 +10,11 @@ setup(
+     url="https://zfp.llnl.gov",
+     description="zfp compression in Python",
+     long_description="zfp is a compressed format for representing multidimensional floating-point and integer arrays. zfp provides compressed-array classes that support high throughput read and write random access to individual array elements. zfp also supports serial and parallel compression of whole arrays using both lossless and lossy compression with error tolerances. zfp is primarily written in C and C++ but also includes Python and Fortran bindings.",
+-    ext_modules=[Extension("zfpy", ["build/python/zfpy.c"],
+-                           include_dirs=["include", np.get_include()],
+-                           libraries=["zfp"], library_dirs=["build/lib64", "build/lib/Release"])]
++    ext_modules=[Extension(
++        "zfpy", ["python/zfpy.pxd", "python/zfpy.pyx"],
++        include_dirs=["include", np.get_include()],
++        libraries=["zfp"],
++        library_dirs=[os.environ["WASM_LIBRARY_DIR"] + "/lib"],
++    )],
++    setup_requires=["cython>=0.17", "numpy"],
+ )
diff --git a/packages/zipp/meta.yaml b/packages/zipp/meta.yaml
new file mode 100644
index 00000000..0aa4ec79
--- /dev/null
+++ b/packages/zipp/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: zipp
+  version: 3.15.0
+  top-level:
+    - zipp
+source:
+  url: https://files.pythonhosted.org/packages/5b/fa/c9e82bbe1af6266adf08afb563905eb87cab83fde00a0a08963510621047/zipp-3.15.0-py3-none-any.whl
+  sha256: 48904fc76a60e542af151aded95726c1a5c34ed43ab4134b597665c86d7ad556
+about:
+  home: https://github.com/jaraco/zipp
+  PyPI: https://pypi.org/project/zipp
+  summary: Backport of pathlib-compatible object wrapper for zip files
+  license: "MIT"
