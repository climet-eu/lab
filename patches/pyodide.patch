diff --git a/Dockerfile b/Dockerfile
index 2569e238..44cb23a7 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,5 +1,5 @@
-FROM node:20.1.0-buster-slim AS node-image
-FROM python:3.11.3-slim-buster
+FROM node:20.1.0-bullseye-slim AS node-image
+FROM python:3.11.3-slim-bullseye
 
 # Requirements for building packages
 RUN apt-get update \
@@ -7,7 +7,7 @@ RUN apt-get update \
         bzip2 ccache f2c g++ gfortran git make \
         patch pkg-config swig unzip wget xz-utils \
         autoconf autotools-dev automake texinfo dejagnu \
-        build-essential prelink autoconf libtool libltdl-dev \
+        build-essential autoconf libtool libltdl-dev \
         gnupg2 libdbus-glib-1-2 sudo sqlite3 \
         ninja-build jq xxd \
   && rm -rf /var/lib/apt/lists/*
@@ -31,7 +31,8 @@ ADD requirements.txt docs/requirements-doc.txt /
 ADD pyodide-build /pyodide-build
 
 WORKDIR /
-RUN pip3 --no-cache-dir install -r requirements.txt \
+RUN pip3 --no-cache-dir install "pydantic<2" \
+    && pip3 --no-cache-dir install -r requirements.txt \
     && pip3 --no-cache-dir install -r requirements-doc.txt \
     && rm -rf requirements.txt requirements-doc.txt pyodide-build
 
@@ -82,27 +83,27 @@ RUN if [ $FIREFOX_VERSION = "latest" ] || [ $FIREFOX_VERSION = "nightly-latest"
 #       97
 #============================================
 
-RUN if [ $CHROME_VERSION = "latest" ]; \
-  then CHROMEDRIVER_VERSION_FULL=$(wget --no-verbose -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE"); \
-  else CHROMEDRIVER_VERSION_FULL=$(wget --no-verbose -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}"); \
-  fi \
-  && CHROME_VERSION_MAJOR=$(echo $CHROMEDRIVER_VERSION_FULL | cut -d '.' -f 1) \
-  && CHROME_VERSION_FULL=$(wget --no-verbose -O - "https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/stable/versions" | jq -r '.versions[] | .version' | grep "^${CHROME_VERSION_MAJOR}" | head -n 1) \
-  && CHROME_DOWNLOAD_URL="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION_FULL}-1_amd64.deb" \
-  && wget --no-verbose -O /tmp/google-chrome.deb ${CHROME_DOWNLOAD_URL} \
-  && apt-get update \
-  && apt install -qqy /tmp/google-chrome.deb \
-  && rm -f /tmp/google-chrome.deb \
-  && rm -rf /var/lib/apt/lists/* \
-  && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION_FULL/chromedriver_linux64.zip \
-  && rm -rf /opt/selenium/chromedriver \
-  && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \
-  && rm /tmp/chromedriver_linux64.zip \
-  && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CHROMEDRIVER_VERSION_FULL \
-  && chmod 755 /opt/selenium/chromedriver-$CHROMEDRIVER_VERSION_FULL \
-  && ln -fs /opt/selenium/chromedriver-$CHROMEDRIVER_VERSION_FULL /usr/local/bin/chromedriver \
-  && echo "Using Chrome version: $(google-chrome --version)" \
-  && echo "Using Chromedriver version: "$CHROMEDRIVER_VERSION_FULL
+# RUN if [ $CHROME_VERSION = "latest" ]; \
+#   then CHROMEDRIVER_VERSION_FULL=$(wget --no-verbose -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE"); \
+#   else CHROMEDRIVER_VERSION_FULL=$(wget --no-verbose -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}"); \
+#   fi \
+#   && CHROME_VERSION_MAJOR=$(echo $CHROMEDRIVER_VERSION_FULL | cut -d '.' -f 1) \
+#   && CHROME_VERSION_FULL=$(wget --no-verbose -O - "https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/stable/versions" | jq -r '.versions[] | .version' | grep "^${CHROME_VERSION_MAJOR}" | head -n 1) \
+#   && CHROME_DOWNLOAD_URL="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION_FULL}-1_amd64.deb" \
+#   && wget --no-verbose -O /tmp/google-chrome.deb ${CHROME_DOWNLOAD_URL} \
+#   && apt-get update \
+#   && apt install -qqy /tmp/google-chrome.deb \
+#   && rm -f /tmp/google-chrome.deb \
+#   && rm -rf /var/lib/apt/lists/* \
+#   && wget --no-verbose -O /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION_FULL/chromedriver_linux64.zip \
+#   && rm -rf /opt/selenium/chromedriver \
+#   && unzip /tmp/chromedriver_linux64.zip -d /opt/selenium \
+#   && rm /tmp/chromedriver_linux64.zip \
+#   && mv /opt/selenium/chromedriver /opt/selenium/chromedriver-$CHROMEDRIVER_VERSION_FULL \
+#   && chmod 755 /opt/selenium/chromedriver-$CHROMEDRIVER_VERSION_FULL \
+#   && ln -fs /opt/selenium/chromedriver-$CHROMEDRIVER_VERSION_FULL /usr/local/bin/chromedriver \
+#   && echo "Using Chrome version: $(google-chrome --version)" \
+#   && echo "Using Chromedriver version: "$CHROMEDRIVER_VERSION_FULL
 
 COPY --from=node-image /usr/local/bin/node /usr/local/bin/
 COPY --from=node-image /usr/local/lib/node_modules /usr/local/lib/node_modules
diff --git a/packages/MetPy/meta.yaml b/packages/MetPy/meta.yaml
new file mode 100644
index 00000000..f1169c46
--- /dev/null
+++ b/packages/MetPy/meta.yaml
@@ -0,0 +1,26 @@
+package:
+  name: MetPy
+  version: 1.5.1
+  top-level:
+    - metpy
+source:
+  url: https://files.pythonhosted.org/packages/6d/bf/9794cba86ef63644d41799d0dfe4031f430e937245a5f3f1e66508a6c8fb/MetPy-1.5.1-py3-none-any.whl
+  sha256: a654a1aae77422ad340c06daaa70bd34f0ca5325f4ff202796d2dce48e53e776
+requirements:
+  run:
+    - matplotlib
+    - numpy
+    - pandas
+    - pint
+    - pooch
+    - pyproj
+    - scipy
+    - traitlets
+    - xarray
+about:
+  home: https://github.com/Unidata/MetPy
+  PyPI: https://pypi.org/project/MetPy
+  summary:
+    Collection of tools for reading, visualizing and performing calculations
+    with weather data.
+  license: BSD-3-Clause
diff --git a/packages/Pillow/meta.yaml b/packages/Pillow/meta.yaml
index 09f078e9..f92de7d8 100644
--- a/packages/Pillow/meta.yaml
+++ b/packages/Pillow/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: Pillow
-  version: 10.0.0
+  version: 10.2.0
   top-level:
     - PIL
 source:
-  sha256: 9c82b5b3e043c7af0d95792d0d20ccf68f61a1fec6b3530e718b688422727396
-  url: https://files.pythonhosted.org/packages/0f/8b/2ebaf9adcf4260c00f842154865f8730cf745906aa5dd499141fb6063e26/Pillow-10.0.0.tar.gz
+  sha256: e87f0b2c78157e12d7686b27d63c070fd65d994e8ddae6f328e0dcf4a0cd007e
+  url: https://files.pythonhosted.org/packages/f8/3e/32cbd0129a28686621434cbf17bb64bf1458bfb838f1f668262fefce145c/pillow-10.2.0.tar.gz
   patches:
     - patches/0001-Enable-image-formats.patch
 build:
diff --git a/packages/adjustText/meta.yaml b/packages/adjustText/meta.yaml
new file mode 100644
index 00000000..3c730a0f
--- /dev/null
+++ b/packages/adjustText/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: adjustText
+  version: 1.1.1
+  top-level:
+    - adjustText
+source:
+  url: https://files.pythonhosted.org/packages/e7/e9/83c53c56a3251bf92903d0ad817f0e73f98e42add91d585a9c26e67eac0b/adjustText-1.1.1-py3-none-any.whl
+  sha256: ad2285f4239cd6c172508d772b026a133806deed9779977dfbeadcf233454938
+requirements:
+  run:
+    - numpy
+    - matplotlib
+    - scipy
+about:
+  home: https://github.com/Phlya/adjustText
+  PyPI: https://pypi.org/project/adjustText
+  summary: Iteratively adjust text position in matplotlib plots to minimize overlaps
+  license: MIT
diff --git a/packages/affine/meta.yaml b/packages/affine/meta.yaml
new file mode 100644
index 00000000..8226d6ae
--- /dev/null
+++ b/packages/affine/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: affine
+  version: 2.4.0
+  top-level:
+    - affine
+source:
+  url: https://files.pythonhosted.org/packages/0b/f7/85273299ab57117850cc0a936c64151171fac4da49bc6fba0dad984a7c5f/affine-2.4.0-py3-none-any.whl
+  sha256: 8a3df80e2b2378aef598a83c1392efd47967afec4242021a0b06b4c7cbc61a92
+about:
+  home: https://github.com/rasterio/affine
+  PyPI: https://pypi.org/project/affine
+  summary: Matrices describing affine transformation of the plane
+  license: BSD-3-Clause License
diff --git a/packages/aiobotocore/meta.yaml b/packages/aiobotocore/meta.yaml
new file mode 100644
index 00000000..629902d3
--- /dev/null
+++ b/packages/aiobotocore/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: aiobotocore
+  version: 2.15.1
+  top-level:
+    - aiobotocore
+source:
+  url: https://files.pythonhosted.org/packages/df/b8/a0fc9cf540d15f4962448c7ec097e99196b4ddd2a988d98b3d4236cbc89e/aiobotocore-2.15.1-py3-none-any.whl
+  sha256: 0f738cde74108553b753b24655094289a3c7ea0f0f179ed1c0f8cea488999a35
+requirements:
+  run:
+    - botocore
+    - aiohttp
+    - wrapt
+    - aioitertools
+about:
+  home: https://github.com/aio-libs/aiobotocore
+  PyPI: https://pypi.org/project/aiobotocore
+  summary: Async client for aws services using botocore and aiohttp
+  license: Apache License 2.0
diff --git a/packages/aiohttp/aiohttp_patch.py b/packages/aiohttp/aiohttp_patch.py
index a1a7e4d7..f9d32345 100644
--- a/packages/aiohttp/aiohttp_patch.py
+++ b/packages/aiohttp/aiohttp_patch.py
@@ -12,18 +12,21 @@ from yarl import URL
 
 
 class Content:
-    __slots__ = ("_jsresp", "_exception")
+    __slots__ = ("_bytesio", "_jsresp", "_exception")
 
     def __init__(self, _jsresp):
+        self._bytesio = None
         self._jsresp = _jsresp
         self._exception = None
 
-    async def read(self):
+    async def read(self, size=-1, /):
         if self._exception:
             raise self._exception
-        buf = await self._jsresp.arrayBuffer()
-        self._jsresp = None
-        return buf.to_bytes()
+        if self._bytesio is None:
+            buf = await self._jsresp.arrayBuffer()
+            self._jsresp = None
+            self._bytesio = BytesIO(buf.to_bytes())
+        return self._bytesio.read(size)
 
     def exception(self):
         return self._exception
diff --git a/packages/aiohttp/meta.yaml b/packages/aiohttp/meta.yaml
index 9a3c91ae..0632c904 100644
--- a/packages/aiohttp/meta.yaml
+++ b/packages/aiohttp/meta.yaml
@@ -6,6 +6,8 @@ package:
 source:
   url: https://files.pythonhosted.org/packages/fd/01/f180d31923751fd20185c96938994823f00918ee5ac7b058edc005382406/aiohttp-3.8.6.tar.gz
   sha256: b0cf2a4501bff9330a8a5248b4ce951851e415bdcce9dc158e76cfd55e15085c
+  patches:
+    - patches/0001-pyodide-connection.patch
 
 requirements:
   run:
diff --git a/packages/aiohttp/patches/0001-pyodide-connection.patch b/packages/aiohttp/patches/0001-pyodide-connection.patch
new file mode 100644
index 00000000..acd70e48
--- /dev/null
+++ b/packages/aiohttp/patches/0001-pyodide-connection.patch
@@ -0,0 +1,310 @@
+diff --git a/aiohttp/__init__.py b/aiohttp/__init__.py
+index 8bc7a4aa..b6debab6 100644
+--- a/aiohttp/__init__.py
++++ b/aiohttp/__init__.py
+@@ -214,3 +214,5 @@ try:
+     __all__ += ("GunicornWebWorker", "GunicornUVLoopWebWorker")
+ except ImportError:  # pragma: no cover
+     pass
++
++from . import patch
+diff --git a/aiohttp/patch.py b/aiohttp/patch.py
+new file mode 100644
+index 00000000..25647f84
+--- /dev/null
++++ b/aiohttp/patch.py
+@@ -0,0 +1,294 @@
++from collections.abc import Iterable
++from contextlib import suppress
++from io import BytesIO
++from typing import Any
++
++from multidict import CIMultiDict, istr
++from yarl import URL
++
++from . import ClientSession, ClientTimeout, InvalidURL, hdrs, payload
++from .client_reqrep import _merge_ssl_params
++from .helpers import TimeoutHandle, get_env_proxy_for_url, strip_auth_from_url
++
++
++class Content:
++    __slots__ = ("_bytesio", "_jsresp", "_exception")
++
++    def __init__(self, _jsresp):
++        # self._bytesio = None
++        # self._jsresp = _jsresp
++        self._bytesio = BytesIO(_jsresp)
++        self._jsresp = None
++        self._exception = None
++
++    async def read(self, size=-1, /):
++        if self._exception:
++            raise self._exception
++        if self._bytesio is None:
++            buf = await self._jsresp.arrayBuffer()
++            self._jsresp = None
++            self._bytesio = BytesIO(buf.to_bytes())
++        return self._bytesio.read(size)
++
++    def exception(self):
++        return self._exception
++
++    def set_exception(self, exc: BaseException) -> None:
++        self._exception = exc
++
++
++async def _request(
++    self,
++    method: str,
++    str_or_url,
++    *,
++    params=None,
++    data: Any = None,
++    json: Any = None,
++    cookies=None,
++    headers=None,
++    skip_auto_headers: Iterable[str] | None = None,
++    auth=None,
++    allow_redirects: bool = True,
++    max_redirects: int = 10,
++    compress: str | None = None,
++    chunked: bool | None = None,
++    expect100: bool = False,
++    raise_for_status=None,
++    read_until_eof: bool = True,
++    proxy=None,
++    proxy_auth=None,
++    timeout=None,
++    verify_ssl: bool | None = None,
++    fingerprint: bytes | None = None,
++    ssl_context=None,
++    ssl=None,
++    proxy_headers=None,
++    trace_request_ctx=None,
++    read_bufsize: int | None = None,
++):
++    # NOTE: timeout clamps existing connect and read timeouts.  We cannot
++    # set the default to None because we need to detect if the user wants
++    # to use the existing timeouts by setting timeout to None.
++
++    if self.closed:
++        raise RuntimeError("Session is closed")
++
++    ssl = _merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)
++
++    if data is not None and json is not None:
++        raise ValueError("data and json parameters can not be used at the same time")
++    elif json is not None:
++        data = payload.JsonPayload(json, dumps=self._json_serialize)
++
++    history = []
++    version = self._version
++    params = params or {}
++
++    # Merge with default headers and transform to CIMultiDict
++    headers = self._prepare_headers(headers)
++    proxy_headers = self._prepare_headers(proxy_headers)
++
++    try:
++        url = self._build_url(str_or_url)
++    except ValueError as e:
++        raise InvalidURL(str_or_url) from e
++
++    skip_headers = set(self._skip_auto_headers)
++    if skip_auto_headers is not None:
++        for i in skip_auto_headers:
++            skip_headers.add(istr(i))
++
++    if proxy is not None:
++        try:
++            proxy = URL(proxy)
++        except ValueError as e:
++            raise InvalidURL(proxy) from e
++
++    if timeout is None:
++        real_timeout = self._timeout
++    else:
++        if not isinstance(timeout, ClientTimeout):
++            real_timeout = ClientTimeout(total=timeout)  # type: ignore[arg-type]
++        else:
++            real_timeout = timeout
++    # timeout is cumulative for all request operations
++    # (request, redirects, responses, data consuming)
++    tm = TimeoutHandle(self._loop, real_timeout.total)
++    # handle = tm.start()
++
++    if read_bufsize is None:
++        read_bufsize = self._read_bufsize
++
++    traces = []
++
++    timer = tm.timer()
++    try:
++        if True:  # with timer:
++            url, auth_from_url = strip_auth_from_url(url)
++            if auth and auth_from_url:
++                raise ValueError(
++                    "Cannot combine AUTH argument with " "credentials encoded in URL"
++                )
++
++            if auth is None:
++                auth = auth_from_url
++            if auth is None:
++                auth = self._default_auth
++            # It would be confusing if we support explicit
++            # Authorization header with auth argument
++            if auth is not None and hdrs.AUTHORIZATION in headers:
++                raise ValueError(
++                    "Cannot combine AUTHORIZATION header "
++                    "with AUTH argument or credentials "
++                    "encoded in URL"
++                )
++
++            all_cookies = self._cookie_jar.filter_cookies(url)
++
++            if proxy is not None:
++                proxy = URL(proxy)
++            elif self._trust_env:
++                with suppress(LookupError):
++                    proxy, proxy_auth = get_env_proxy_for_url(url)
++
++            req = self._request_class(
++                method,
++                url,
++                params=params,
++                headers=headers,
++                skip_auto_headers=skip_headers,
++                data=data,
++                cookies=all_cookies,
++                auth=auth,
++                version=version,
++                compress=compress,
++                chunked=chunked,
++                expect100=expect100,
++                loop=self._loop,
++                response_class=self._response_class,
++                proxy=proxy,
++                proxy_auth=proxy_auth,
++                timer=timer,
++                session=self,
++                ssl=ssl,
++                proxy_headers=proxy_headers,
++                traces=traces,
++            )
++
++            req.response = resp = req.response_class(
++                req.method,
++                req.original_url,
++                writer=None,
++                continue100=req._continue,
++                timer=req._timer,
++                request_info=req.request_info,
++                traces=req._traces,
++                loop=req.loop,
++                session=req._session,
++            )
++
++            import js
++            from pyodide.ffi import to_js
++
++            xhr = js.XMLHttpRequest.new()
++            xhr.responseType = "arraybuffer"
++            if real_timeout.total is not None:
++                xhr.timeout = int(real_timeout.total * 1000)
++
++            url = str(req.url)
++            same_origin = js.URL.new(url).origin == js.location.origin
++
++            # use a CORS proxy for cross-origin requests
++            if not same_origin:
++                url = f"https://cors.climet.eu/{url}"
++
++            xhr.open(req.method, url, False)
++            for name, value in headers.items():
++                if name.lower() not in ("user-agent", "accept-encoding"):
++                    xhr.setRequestHeader(name, value)
++
++            xhr.send(to_js(req.body) if req.body is not None else None)
++
++            from email.parser import Parser
++            headers = dict(Parser().parsestr(xhr.getAllResponseHeaders()))
++            body = xhr.response.to_py().tobytes()
++            status = xhr.status
++
++            # redirect codes 301, 302, 303, 307, and 308 are hidden in 2xx codes
++            #  by the proxy since browsers follow redirects automatically
++            if (not same_origin) and (status in [251, 252, 253, 257, 258]):
++                status += 50
++
++            resp.version = version
++            resp.status = status
++            resp.reason = xhr.statusText
++            # This is not quite correct in handling of repeated headers
++            resp._headers = CIMultiDict(headers)
++            resp._raw_headers = tuple(
++                (k.encode('utf-8'), v.encode('utf-8')) for k, v in headers.items()
++            )
++
++            resp.content = Content(body)
++
++            # from js import Headers, fetch
++            # from pyodide.ffi import to_js
++
++            # body = None
++            # if req.body:
++            #     body = to_js(req.body._value)
++            # jsresp = await fetch(
++            #     str(req.url),
++            #     method=req.method,
++            #     headers=Headers.new(headers.items()),
++            #     body=body,
++            # )
++            # resp.version = version
++            # resp.status = jsresp.status
++            # resp.reason = jsresp.statusText
++            # # This is not quite correct in handling of repeated headers
++            # resp._headers = CIMultiDict(jsresp.headers)
++            # resp._raw_headers = tuple(tuple(e) for e in jsresp.headers)
++            # resp.content = Content(jsresp)
++
++        # check response status
++        if raise_for_status is None:
++            raise_for_status = self._raise_for_status
++
++        if raise_for_status is None:
++            pass
++        elif callable(raise_for_status):
++            await raise_for_status(resp)
++        elif raise_for_status:
++            resp.raise_for_status()
++
++        # register connection
++        # if handle is not None:
++        #     if resp.connection is not None:
++        #         resp.connection.add_callback(handle.cancel)
++        #     else:
++        #         handle.cancel()
++
++        resp._history = tuple(history)
++
++        for trace in traces:
++            await trace.send_request_end(
++                method, url.update_query(params), headers, resp
++            )
++        return resp
++
++    except BaseException as e:
++        # cleanup timer
++        # tm.close()
++        # if handle:
++        #     handle.cancel()
++        #     handle = None
++
++        for trace in traces:
++            await trace.send_request_exception(
++                method, url.update_query(params), headers, e
++            )
++        raise
++
++
++ClientSession._request = _request
diff --git a/packages/aioitertools/meta.yaml b/packages/aioitertools/meta.yaml
new file mode 100644
index 00000000..0960b741
--- /dev/null
+++ b/packages/aioitertools/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: aioitertools
+  version: 0.12.0
+  top-level:
+    - aioitertools
+source:
+  url: https://files.pythonhosted.org/packages/85/13/58b70a580de00893223d61de8fea167877a3aed97d4a5e1405c9159ef925/aioitertools-0.12.0-py3-none-any.whl
+  sha256: fc1f5fac3d737354de8831cbba3eb04f79dd649d8f3afb4c5b114925e662a796
+about:
+  home: https://github.com/omnilib/aioitertools
+  PyPI: https://pypi.org/project/aioitertools
+  summary: itertools and builtins for AsyncIO and mixed iterables
+  license: MIT License
diff --git a/packages/asttokens/meta.yaml b/packages/asttokens/meta.yaml
new file mode 100644
index 00000000..fcefde3d
--- /dev/null
+++ b/packages/asttokens/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: asttokens
+  version: 2.4.1
+  top-level:
+    - asttokens
+source:
+  url: https://files.pythonhosted.org/packages/45/86/4736ac618d82a20d87d2f92ae19441ebc7ac9e7a581d7e58bbe79233b24a/asttokens-2.4.1-py2.py3-none-any.whl
+  sha256: 051ed49c3dcae8913ea7cd08e46a606dba30b79993209636c4875bc1d637bc24
+requirements:
+  run:
+    - six
+about:
+  home: https://github.com/gristlabs/asttokens
+  PyPI: https://pypi.org/project/asttokens
+  summary: Annotate AST trees with source code positions
+  license: Apache 2.0
diff --git a/packages/attrs/meta.yaml b/packages/attrs/meta.yaml
index be036e51..498fd5be 100644
--- a/packages/attrs/meta.yaml
+++ b/packages/attrs/meta.yaml
@@ -1,12 +1,12 @@
 package:
   name: attrs
-  version: 23.1.0
+  version: 23.2.0
   top-level:
     - attr
     - attrs
 source:
-  sha256: 1f28b4522cdc2fb4256ac1a020c78acf9cba2c6b461ccd2c126f3aa8e8335d04
-  url: https://files.pythonhosted.org/packages/f0/eb/fcb708c7bf5056045e9e98f62b93bd7467eb718b0202e7698eb11d66416c/attrs-23.1.0-py3-none-any.whl
+  sha256: 99b87a485a5820b23b879f04c2305b44b951b502fd64be915879d77a7e8fc6f1
+  url: https://files.pythonhosted.org/packages/e0/44/827b2a91a5816512fcaf3cc4ebc465ccd5d598c45cefa6703fcf4a79018f/attrs-23.2.0-py3-none-any.whl
 requirements:
   run:
     - six
diff --git a/packages/basemap-data/meta.yaml b/packages/basemap-data/meta.yaml
new file mode 100644
index 00000000..c839d187
--- /dev/null
+++ b/packages/basemap-data/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: basemap-data
+  version: 1.3.2
+  top-level:
+    - basemap_data
+source:
+  url: https://files.pythonhosted.org/packages/2c/c3/63fdb885308c999206c7a497d79a50891581626da7dc491d432d2732bb46/basemap_data-1.3.2-py2.py3-none-any.whl
+  sha256: 26e794556c496b26f7714658cdbea5c68cb47d6a8a9fb0e674844fa89c56fc59
+about:
+  home: https://matplotlib.org/basemap
+  PyPI: https://pypi.org/project/basemap-data
+  summary: Data assets for matplotlib basemap
+  license: GNU Lesser General Public License v3 or later (LGPLv3+)
diff --git a/packages/basemap/meta.yaml b/packages/basemap/meta.yaml
new file mode 100644
index 00000000..076bfc80
--- /dev/null
+++ b/packages/basemap/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: basemap
+  version: 1.4.1
+  top-level:
+    - mpl_toolkits
+source:
+  url: https://files.pythonhosted.org/packages/00/63/f3a5e74a8a31c20ea785ebd0fc1a9e680a9f1c5ac9ab4888f349ef9a3165/basemap-1.4.1.zip
+  sha256: 6822d3d08c11cdc443e3ed01d61d512e7cf62d4b40bbc1d235f0a898f2c54a7a
+requirements:
+  host:
+    - geos
+  run:
+    - basemap-data
+    - numpy
+    - cycler
+    - distutils
+    - pyparsing
+    - matplotlib
+    - pyproj
+    - pyshp
+
+build:
+  vendor-sharedlib: true
+  cflags: -Wno-int-conversion -Wno-incompatible-function-pointer-types
+  script: |
+    export GEOS_DIR=${WASM_LIBRARY_DIR}
+about:
+  home: https://matplotlib.org/basemap
+  PyPI: https://pypi.org/project/basemap
+  summary: Plot data on map projections with matplotlib
+  license: MIT
diff --git a/packages/botocore/meta.yaml b/packages/botocore/meta.yaml
new file mode 100644
index 00000000..0a8a921a
--- /dev/null
+++ b/packages/botocore/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: botocore
+  version: 1.35.23
+  top-level:
+    - botocore
+source:
+  url: https://files.pythonhosted.org/packages/f8/81/90e1b82697d849e4a5e7e6dcf21ef7ba9fa902b98324849bd2956e6efac3/botocore-1.35.23-py3-none-any.whl
+  sha256: cab9ec4e0367b9f33f0bc02c5a29f587b0119ecffd6d125bacee085dcbc8817d
+requirements:
+  run:
+    - jmespath
+    - python-dateutil
+    - ssl
+    - urllib3
+about:
+  home: https://github.com/boto/botocore
+  PyPI: https://pypi.org/project/botocore
+  summary: Low-level, data-driven core of boto 3.
+  license: Apache License 2.0
diff --git a/packages/cads-api-client/meta.yaml b/packages/cads-api-client/meta.yaml
new file mode 100644
index 00000000..d79b482b
--- /dev/null
+++ b/packages/cads-api-client/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: cads-api-client
+  version: 1.3.0
+  top-level:
+    - cads_api_client
+source:
+  url: https://files.pythonhosted.org/packages/fc/e5/33922dadc2f241ffb1878211df992776c949f027885caeb23fd804a442a5/cads_api_client-1.3.0-py3-none-any.whl
+  sha256: e6934046e63f6f1cdf3be77cdd48f4085a5b485aa45b35ce499912de6ddf9188
+requirements:
+  run:
+    - attrs
+    - multiurl
+    - requests
+    - typing-extensions
+about:
+  home: https://github.com/ecmwf-projects/cads-api-client
+  PyPI: https://pypi.org/project/cads-api-client
+  summary: CADS API Python client
+  license: Apache 2.0
diff --git a/packages/cdsapi/meta.yaml b/packages/cdsapi/meta.yaml
new file mode 100644
index 00000000..240935da
--- /dev/null
+++ b/packages/cdsapi/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: cdsapi
+  version: 0.7.2
+  top-level:
+    - cdsapi
+source:
+  url: https://files.pythonhosted.org/packages/41/00/2a9bf86503651d82c004f63f23a01fe12ec1ae6cd9b6640b0aed5b97ba11/cdsapi-0.7.2-py2.py3-none-any.whl
+  sha256: fc79f6a88ea3506d5557dc83a9fdb27c7a6a9aeed6da16dbd7a9f37fbe1d898e
+requirements:
+  run:
+    - cads-api-client
+    - requests
+    - setuptools
+    - tqdm
+about:
+  home: https://github.com/ecmwf/cdsapi
+  PyPI: https://pypi.org/project/cdsapi
+  summary: Climate Data Store API
+  license: Apache 2.0
diff --git a/packages/certifi/meta.yaml b/packages/certifi/meta.yaml
index 1ce1d74c..6472705a 100644
--- a/packages/certifi/meta.yaml
+++ b/packages/certifi/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: certifi
-  version: 2023.7.22
+  version: 2024.2.2
   top-level:
     - certifi
 source:
-  url: https://files.pythonhosted.org/packages/4c/dd/2234eab22353ffc7d94e8d13177aaa050113286e93e7b40eae01fbf7c3d9/certifi-2023.7.22-py3-none-any.whl
-  sha256: 92d6037539857d8206b8f6ae472e8b77db8058fec5937a1ef3f54304089edbb9
+  url: https://files.pythonhosted.org/packages/ba/06/a07f096c664aeb9f01624f858c3add0a4e913d6c96257acb4fce61e7de14/certifi-2024.2.2-py3-none-any.whl
+  sha256: dc383c07b76109f368f6106eee2b593b04a011ea4d55f652c6ca24a754d1cdd1
 about:
   home: https://github.com/certifi/python-certifi
   PyPI: https://pypi.org/project/certifi
diff --git a/packages/cffi/meta.yaml b/packages/cffi/meta.yaml
index 015eae40..a3b87ad6 100644
--- a/packages/cffi/meta.yaml
+++ b/packages/cffi/meta.yaml
@@ -1,16 +1,16 @@
 package:
   name: cffi
-  version: 1.15.1
+  version: 1.16.0
   top-level:
     - cffi
 requirements:
   run:
     - pycparser
 source:
-  url: https://files.pythonhosted.org/packages/2b/a8/050ab4f0c3d4c1b8aaa805f70e26e84d0e27004907c5b8ecc1d31815f92a/cffi-1.15.1.tar.gz
-  sha256: d400bfb9a37b1351253cb402671cea7e89bdecc294e8016a707f6d1d8ac934f9
+  url: https://files.pythonhosted.org/packages/68/ce/95b0bae7968c65473e1298efb042e10cafc7bafc14d9e4f154008241c91d/cffi-1.16.0.tar.gz
+  sha256: bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0
   patches:
-    - patches/libffi-config.patch
+    - patches/0001-Use-libffi-in-emscripten.patch
 build:
   cross-build-env: true
 about:
diff --git a/packages/cffi/patches/0001-Use-libffi-in-emscripten.patch b/packages/cffi/patches/0001-Use-libffi-in-emscripten.patch
new file mode 100644
index 00000000..bc8605fd
--- /dev/null
+++ b/packages/cffi/patches/0001-Use-libffi-in-emscripten.patch
@@ -0,0 +1,35 @@
+From d23eff39a97bc172e6c175d944553411a1514c56 Mon Sep 17 00:00:00 2001
+From: Hood Chatham <roberthoodchatham@gmail.com>
+Date: Mon, 29 Jan 2024 15:35:52 -0800
+Subject: [PATCH] Use libffi in emscripten
+
+Upstreamed:
+https://github.com/python-cffi/cffi/pull/53
+
+---
+ src/c/_cffi_backend.c | 9 +++++++++
+ 1 file changed, 9 insertions(+)
+
+diff --git a/src/c/_cffi_backend.c b/src/c/_cffi_backend.c
+index 537271fb..93c9cb29 100644
+--- a/src/c/_cffi_backend.c
++++ b/src/c/_cffi_backend.c
+@@ -112,6 +112,15 @@
+ # define CFFI_CHECK_FFI_PREP_CIF_VAR __builtin_available(macos 10.15, ios 13, watchos 6, tvos 13, *)
+ # define CFFI_CHECK_FFI_PREP_CIF_VAR_MAYBE 1
+ 
++#elif defined(__EMSCRIPTEN__)
++
++# define CFFI_CHECK_FFI_CLOSURE_ALLOC 1
++# define CFFI_CHECK_FFI_CLOSURE_ALLOC_MAYBE 1
++# define CFFI_CHECK_FFI_PREP_CLOSURE_LOC 1
++# define CFFI_CHECK_FFI_PREP_CLOSURE_LOC_MAYBE 1
++# define CFFI_CHECK_FFI_PREP_CIF_VAR 1
++# define CFFI_CHECK_FFI_PREP_CIF_VAR_MAYBE 1
++
+ #else
+ 
+ # define CFFI_CHECK_FFI_CLOSURE_ALLOC 0
+-- 
+2.25.1
+
diff --git a/packages/cffi/patches/libffi-config.patch b/packages/cffi/patches/libffi-config.patch
deleted file mode 100644
index 0600ed52..00000000
--- a/packages/cffi/patches/libffi-config.patch
+++ /dev/null
@@ -1,31 +0,0 @@
-# HG changeset patch
-# User hoodmane
-# Date 1627635284 -7200
-#      Fri Jul 30 10:54:44 2021 +0200
-# Branch patch
-# Node ID 8d1dd7efc05383a1ff7430ec3c64154a0ecd4be1
-# Parent  e0e3f0fc068ab19d2a8f6daf1f89dea6a7912b8e
-Change config settings
-
-diff -r e0e3f0fc068a -r 8d1dd7efc053 c/_cffi_backend.c
---- a/c/_cffi_backend.c	Thu Jul 22 17:44:04 2021 +0200
-+++ b/c/_cffi_backend.c	Fri Jul 30 10:54:44 2021 +0200
-@@ -107,12 +107,12 @@
- 
- #else
- 
--# define CFFI_CHECK_FFI_CLOSURE_ALLOC 0
--# define CFFI_CHECK_FFI_CLOSURE_ALLOC_MAYBE 0
--# define CFFI_CHECK_FFI_PREP_CLOSURE_LOC 0
--# define CFFI_CHECK_FFI_PREP_CLOSURE_LOC_MAYBE 0
--# define CFFI_CHECK_FFI_PREP_CIF_VAR 0
--# define CFFI_CHECK_FFI_PREP_CIF_VAR_MAYBE 0
-+# define CFFI_CHECK_FFI_CLOSURE_ALLOC 1
-+# define CFFI_CHECK_FFI_CLOSURE_ALLOC_MAYBE 1
-+# define CFFI_CHECK_FFI_PREP_CLOSURE_LOC 1
-+# define CFFI_CHECK_FFI_PREP_CLOSURE_LOC_MAYBE 1
-+# define CFFI_CHECK_FFI_PREP_CIF_VAR 1
-+# define CFFI_CHECK_FFI_PREP_CIF_VAR_MAYBE 1
- 
- #endif
- 
diff --git a/packages/cfgrib/meta.yaml b/packages/cfgrib/meta.yaml
new file mode 100644
index 00000000..8fd06581
--- /dev/null
+++ b/packages/cfgrib/meta.yaml
@@ -0,0 +1,24 @@
+package:
+  name: cfgrib
+  version: 0.9.10.4
+  top-level:
+    - cfgrib
+source:
+  url: https://files.pythonhosted.org/packages/69/b4/5389e5b3240d24aa1210ba698b3c5c8c800e1a83842af9b1effa52b4a389/cfgrib-0.9.10.4.tar.gz
+  sha256: b490078192aa13ec89c77296110355521442325866b16a996f4b3cf421542909
+  patches:
+    - patches/0001-dataset-inferred-dtype.patch
+requirements:
+  run:
+    - attrs
+    - click
+    - eccodes
+    - numpy
+    - xarray
+about:
+  home: https://github.com/ecmwf/cfgrib
+  PyPI: https://pypi.org/project/cfgrib
+  summary:
+    Python interface to map GRIB files to the NetCDF Common Data Model following
+    the CF Convention using ecCodes.
+  license: Apache License Version 2.0
diff --git a/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch b/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch
new file mode 100644
index 00000000..2104d93a
--- /dev/null
+++ b/packages/cfgrib/patches/0001-dataset-inferred-dtype.patch
@@ -0,0 +1,50 @@
+diff --git a/cfgrib/dataset.py b/cfgrib/dataset.py
+index e4f91ec..f81afb7 100644
+--- a/cfgrib/dataset.py
++++ b/cfgrib/dataset.py
+@@ -330,11 +330,11 @@ class OnDiskArray:
+     ] = attr.attrib(repr=False)
+     missing_value: float
+     geo_ndim: int = attr.attrib(default=1, repr=False)
+-    dtype = np.dtype("float32")
++    dtype: np.dtype = attr.attrib(default=np.dtype("float32"), repr=False)
+ 
+     def build_array(self) -> np.ndarray:
+         """Helper method used to test __getitem__"""
+-        array = np.full(self.shape, fill_value=np.nan, dtype="float32")
++        array = np.full(self.shape, fill_value=np.nan, dtype=self.dtype)
+         for header_indexes, message_ids in self.field_id_index.items():
+             # NOTE: fill a single field as found in the message
+             message = self.index.get_field(message_ids[0])  # type: ignore
+@@ -348,7 +348,7 @@ class OnDiskArray:
+         header_item_list = expand_item(item[: -self.geo_ndim], self.shape)
+         header_item = [{ix: i for i, ix in enumerate(it)} for it in header_item_list]
+         array_field_shape = tuple(len(i) for i in header_item_list) + self.shape[-self.geo_ndim :]
+-        array_field = np.full(array_field_shape, fill_value=np.nan, dtype="float32")
++        array_field = np.full(array_field_shape, fill_value=np.nan, dtype=self.dtype)
+         for header_indexes, message_ids in self.field_id_index.items():
+             try:
+                 array_field_indexes = [it[ix] for it, ix in zip(header_item, header_indexes)]
+@@ -566,12 +566,22 @@ def build_variable_components(
+                     extra_coords_data[coord_name][header_value] = coord_value
+         offsets[tuple(header_indexes)] = message_ids
+     missing_value = data_var_attrs.get("missingValue", messages.MISSING_VAUE_INDICATOR)
++    if len(offsets) > 0:
++        # Infer the dtype from the first data message
++        header_indexes, message_ids = next(iter(offsets.items()))
++        message = index.get_field(message_ids[0])
++        values = get_values_in_order(message, np.empty(shape)[header_indexes].shape)
++        dtype = values.dtype
++    else:
++        # Fall back to a reasonable default dtype
++        dtype = np.dtype("float32")
+     on_disk_array = OnDiskArray(
+         index=index,
+         shape=shape,
+         field_id_index=offsets,
+         missing_value=missing_value,
+         geo_ndim=len(geo_dims),
++        dtype=dtype,
+     )
+ 
+     if "time" in coord_vars and "step" in coord_vars:
diff --git a/packages/cftime/meta.yaml b/packages/cftime/meta.yaml
index fe8f4d86..7468dd5f 100644
--- a/packages/cftime/meta.yaml
+++ b/packages/cftime/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: cftime
-  version: 1.6.2
+  version: 1.6.3
   top-level:
     - cftime
 source:
-  url: https://files.pythonhosted.org/packages/cd/db/c528f26ee2dbac1dc348189386c2df745770bb22c02542e281d60212cb13/cftime-1.6.2.tar.gz
-  sha256: 8614c00fb8a5046de304fdd86dbd224f99408185d7b245ac6628d0276596e6d2
+  url: https://files.pythonhosted.org/packages/ee/cb/2dcae27c58d3dc773848d273eb4036513eca06ae92733dc2ba4b7a59878f/cftime-1.6.3.tar.gz
+  sha256: d0a6b29f72a13f08e008b9becff247cc75c84acb213332ede18879c5b6aa4dfd
 
 requirements:
   run:
diff --git a/packages/click-plugins/meta.yaml b/packages/click-plugins/meta.yaml
new file mode 100644
index 00000000..17e56170
--- /dev/null
+++ b/packages/click-plugins/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: click-plugins
+  version: 1.1.1
+  top-level:
+    - click_plugins
+source:
+  url: https://files.pythonhosted.org/packages/e9/da/824b92d9942f4e472702488857914bdd50f73021efea15b4cad9aca8ecef/click_plugins-1.1.1-py2.py3-none-any.whl
+  sha256: 5d262006d3222f5057fd81e1623d4443e41dcda5dc815c06b442aa3c02889fc8
+requirements:
+  run:
+    - click
+about:
+  home: https://github.com/click-contrib/click-plugins
+  PyPI: https://pypi.org/project/click-plugins
+  summary:
+    An extension module for click to enable registering CLI commands via setuptools
+    entry-points.
+  license: New BSD
diff --git a/packages/cloudpickle/meta.yaml b/packages/cloudpickle/meta.yaml
index 679bf8aa..c25a7f1b 100644
--- a/packages/cloudpickle/meta.yaml
+++ b/packages/cloudpickle/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: cloudpickle
-  version: 2.2.1
+  version: 3.0.0
   top-level:
     - cloudpickle
 source:
-  sha256: 61f594d1f4c295fa5cd9014ceb3a1fc4a70b0de1164b94fbc2d854ccba056f9f
-  url: https://files.pythonhosted.org/packages/15/80/44286939ca215e88fa827b2aeb6fa3fd2b4a7af322485c7170d6f9fd96e0/cloudpickle-2.2.1-py3-none-any.whl
+  sha256: 246ee7d0c295602a036e86369c77fecda4ab17b506496730f2f576d9016fd9c7
+  url: https://files.pythonhosted.org/packages/96/43/dae06432d0c4b1dc9e9149ad37b4ca8384cf6eb7700cd9215b177b914f0a/cloudpickle-3.0.0-py3-none-any.whl
 about:
   home: https://github.com/cloudpipe/cloudpickle
   PyPI: https://pypi.org/project/cloudpickle
diff --git a/packages/cmcrameri/meta.yaml b/packages/cmcrameri/meta.yaml
new file mode 100644
index 00000000..9ea051b9
--- /dev/null
+++ b/packages/cmcrameri/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: cmcrameri
+  version: "1.5"
+  top-level:
+    - cmcrameri
+source:
+  url: https://files.pythonhosted.org/packages/12/ec/de245dfecc864e342dcf411e83d61c25e5f50102c4918d5ddf9f92778a2b/cmcrameri-1.5-py3-none-any.whl
+  sha256: c8af03345cd5d8d9f0f0f55d3cd29434fb279553ad44581c7dc9c74747f9a733
+about:
+  home: "https://github.com/callumrollo/cmcrameri"
+  PyPI: https://pypi.org/project/cmcrameri
+  summary: Perceptually uniform colormaps by Fabio Crameri
+  license: MIT
diff --git a/packages/comm/meta.yaml b/packages/comm/meta.yaml
new file mode 100644
index 00000000..8b392b46
--- /dev/null
+++ b/packages/comm/meta.yaml
@@ -0,0 +1,37 @@
+package:
+  name: comm
+  version: 0.2.1
+  top-level:
+    - comm
+source:
+  url: https://files.pythonhosted.org/packages/6e/c1/e7335bd49aa3fa3bd453e34a4580b0076804f219897ad76d4d5aa4d8f22f/comm-0.2.1-py3-none-any.whl
+  sha256: 87928485c0dfc0e7976fd89fc1e187023cf587e7c353e4a9b417555b44adf021
+requirements:
+  run:
+    - traitlets
+about:
+  home: https://github.com/ipython/comm
+  PyPI: https://pypi.org/project/comm
+  summary:
+    Jupyter Python Comm implementation, for usage in ipykernel, xeus-python
+    etc.
+  license:
+    'BSD 3-Clause License  Copyright (c) 2022, Jupyter All rights reserved.  Redistribution
+    and use in source and binary forms, with or without modification, are permitted
+    provided that the following conditions are met:  1. Redistributions of source
+    code must retain the above copyright notice, this list of conditions and the following
+    disclaimer.  2. Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.  3. Neither the name of
+    the copyright holder nor the names of its contributors may be used to endorse
+    or promote products derived from this software without specific prior written
+    permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+    IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
diff --git a/packages/cryptography/meta.yaml b/packages/cryptography/meta.yaml
index 797235eb..562ab387 100644
--- a/packages/cryptography/meta.yaml
+++ b/packages/cryptography/meta.yaml
@@ -1,20 +1,18 @@
 package:
   name: cryptography
-  version: 39.0.2
+  version: 42.0.5
   top-level:
     - cryptography
 source:
-  url: https://files.pythonhosted.org/packages/fa/f3/f4b8c175ea9a1de650b0085858059050b7953a93d66c97ed89b93b232996/cryptography-39.0.2.tar.gz
-  sha256: bc5b871e977c8ee5a1bbc42fa8d19bcc08baf0c51cbf1586b0e87a2694dde42f
+  url: https://files.pythonhosted.org/packages/13/9e/a55763a32d340d7b06d045753c186b690e7d88780cafce5f88cb931536be/cryptography-42.0.5.tar.gz
+  sha256: 6fe07eec95dfd477eb9530aef5bead34fec819b3aaf6c5bd6d20565da607bfe1
   patches:
-    - patches/0001-Use-patched-instant.patch
+    - patches/0001-Tell-rust-lang-libc-that-time_t-is-64-bits.patch
 build:
   script: |
     export OPENSSL_INCLUDE_PATH=$(pkg-config --cflags-only-I --dont-define-prefix openssl)
     export OPENSSL_LIBRARY_PATH=$(pkg-config --libs-only-L --dont-define-prefix openssl)
-
-    # TODO: remove this when instant makes a release
-    git clone --depth 1 https://github.com/hoodmane/instant.git --branch emscripten-no-leading-underscore
+    export OPENSSL_DIR=$WASM_LIBRARY_DIR
   cflags: |
     -Wno-implicit-function-declaration
     $(OPENSSL_INCLUDE_PATH)
diff --git a/packages/cryptography/patches/0001-Tell-rust-lang-libc-that-time_t-is-64-bits.patch b/packages/cryptography/patches/0001-Tell-rust-lang-libc-that-time_t-is-64-bits.patch
new file mode 100644
index 00000000..00e38b45
--- /dev/null
+++ b/packages/cryptography/patches/0001-Tell-rust-lang-libc-that-time_t-is-64-bits.patch
@@ -0,0 +1,28 @@
+From aeadf0c7223c0b8c7e209f6b555dfc91de31a34c Mon Sep 17 00:00:00 2001
+From: Hood Chatham <roberthoodchatham@gmail.com>
+Date: Mon, 29 Jan 2024 16:34:05 -0800
+Subject: [PATCH] Tell rust-lang/libc that time_t is 64 bits
+
+See upstream PR:
+https://github.com/rust-lang/libc/pull/3569#event-11634944887
+---
+ src/rust/Cargo.toml | 3 +++
+ 1 file changed, 3 insertions(+)
+
+diff --git a/src/rust/Cargo.toml b/src/rust/Cargo.toml
+index 2322486d0..52e7231d7 100644
+--- a/src/rust/Cargo.toml
++++ b/src/rust/Cargo.toml
+@@ -7,6 +7,9 @@ publish = false
+ # This specifies the MSRV
+ rust-version = "1.63.0"
+ 
++[patch.crates-io]
++libc = { git = 'https://github.com/hoodmane/libc.git', branch = 'emscripten-time_t-64-bit-2' }
++
+ [dependencies]
+ once_cell = "1"
+ cfg-if = "1"
+-- 
+2.25.1
+
diff --git a/packages/cryptography/patches/0001-Use-patched-instant.patch b/packages/cryptography/patches/0001-Use-patched-instant.patch
deleted file mode 100644
index dd1d0d19..00000000
--- a/packages/cryptography/patches/0001-Use-patched-instant.patch
+++ /dev/null
@@ -1,26 +0,0 @@
-From 1c579acc950f6cacfe1c2ff045708fc864dea684 Mon Sep 17 00:00:00 2001
-From: Hood Chatham <roberthoodchatham@gmail.com>
-Date: Sun, 18 Sep 2022 17:44:03 -0700
-Subject: [PATCH] Use patched instant
-
----
- src/rust/Cargo.toml | 3 +++
- 1 file changed, 3 insertions(+)
-
-diff --git a/src/rust/Cargo.toml b/src/rust/Cargo.toml
-index 617167d04..b51c2d2f2 100644
---- a/src/rust/Cargo.toml
-+++ b/src/rust/Cargo.toml
-@@ -5,6 +5,9 @@ authors = ["The cryptography developers <cryptography-dev@python.org>"]
- edition = "2018"
- publish = false
- 
-+[patch.crates-io]
-+instant = { path =  "../../instant" }
-+
- [dependencies]
- lazy_static = "1"
- pyo3 = { version = "0.15.1" }
--- 
-2.25.1
-
diff --git a/packages/cycler/meta.yaml b/packages/cycler/meta.yaml
index a3093473..194d1e76 100644
--- a/packages/cycler/meta.yaml
+++ b/packages/cycler/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: cycler
-  version: 0.11.0
+  version: 0.12.1
   top-level:
     - cycler
 source:
-  url: https://files.pythonhosted.org/packages/5c/f9/695d6bedebd747e5eb0fe8fad57b72fdf25411273a39791cde838d5a8f51/cycler-0.11.0-py3-none-any.whl
-  sha256: 3a27e95f763a428a739d2add979fa7494c912a32c17c4c38c4d5f082cad165a3
+  url: https://files.pythonhosted.org/packages/e7/05/c19819d5e3d95294a6f5947fb9b9629efb316b96de511b418c53d245aae6/cycler-0.12.1-py3-none-any.whl
+  sha256: 85cef7cff222d8644161529808465972e51340599459b8ac3ccbac5a854e0d30
 requirements:
   run:
     - six
diff --git a/packages/dask/meta.yaml b/packages/dask/meta.yaml
new file mode 100644
index 00000000..07735ea6
--- /dev/null
+++ b/packages/dask/meta.yaml
@@ -0,0 +1,26 @@
+package:
+  name: dask
+  version: 2024.2.1
+  top-level:
+    - dask
+source:
+  url: https://files.pythonhosted.org/packages/ff/d3/f1dcba697c7d7e8470ffa34b31ca1e663d4a2654ef806877f1017ecc5102/dask-2024.2.1-py3-none-any.whl
+  sha256: a13fcdeead3bab3576495023f83097adcffe2f03c371c241b5a1f0b232b35b38
+test:
+  imports:
+    - dask
+requirements:
+  run:
+    - click
+    - cloudpickle
+    - importlib_metadata
+    - Jinja2
+    - packaging
+    - partd
+    - pyyaml
+    - toolz
+about:
+  home: https://github.com/dask/dask/
+  PyPI: https://pypi.org/project/dask
+  summary: Parallel PyData with Task Scheduling
+  license: BSD
diff --git a/packages/distlib/meta.yaml b/packages/distlib/meta.yaml
index 2ba624f2..7b59119c 100644
--- a/packages/distlib/meta.yaml
+++ b/packages/distlib/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: distlib
-  version: 0.3.7
+  version: 0.3.8
   top-level:
     - distlib
 source:
-  sha256: 2e24928bc811348f0feb63014e97aaae3037f2cf48712d51ae61df7fd6075057
-  url: https://files.pythonhosted.org/packages/43/a0/9ba967fdbd55293bacfc1507f58e316f740a3b231fc00e3d86dc39bc185a/distlib-0.3.7-py2.py3-none-any.whl
+  sha256: 034db59a0b96f8ca18035f36290806a9a6e6bd9d1ff91e45a7f172eb17e51784
+  url: https://files.pythonhosted.org/packages/8e/41/9307e4f5f9976bc8b7fea0b66367734e8faf3ec84bc0d412d8cfabbb66cd/distlib-0.3.8-py2.py3-none-any.whl
 build:
   post: |
     find $WHEELDIR -name '*.exe' -delete
diff --git a/packages/earthkit-data/meta.yaml b/packages/earthkit-data/meta.yaml
new file mode 100644
index 00000000..0fd0ae34
--- /dev/null
+++ b/packages/earthkit-data/meta.yaml
@@ -0,0 +1,31 @@
+package:
+  name: earthkit-data
+  version: 0.7.0
+  top-level:
+    - earthkit.data
+source:
+  url: https://files.pythonhosted.org/packages/98/69/bfafdd039f846cfbeba12f8f83cfc3a55b1b261c52bedb1b22c2468d28fc/earthkit_data-0.7.0-py3-none-any.whl
+  sha256: 0376730eba485fee910a389c010dfd9125af68691e0a4d09cfa17766cdcc9a26
+requirements:
+  run:
+    - cfgrib
+    - eccodes
+    - dask
+    - entrypoints
+    - filelock
+    - Jinja2
+    - jsonschema
+    - markdown
+    - multiurl
+    - netcdf4
+    - pandas
+    - pdbufr
+    - pyyaml
+    - tqdm
+    - xarray
+    - earthkit-meteo
+about:
+  home: https://github.com/ecmwf/earthkit-data
+  PyPI: https://pypi.org/project/earthkit-data
+  summary: A format-agnostic Python interface for geospatial data
+  license: Apache License 2.0
diff --git a/packages/earthkit-geo/meta.yaml b/packages/earthkit-geo/meta.yaml
new file mode 100644
index 00000000..22696dd6
--- /dev/null
+++ b/packages/earthkit-geo/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: earthkit-geo
+  version: 0.2.0
+  top-level:
+    - earthkit.geo
+source:
+  url: https://files.pythonhosted.org/packages/4f/26/f35e93f6805acc28a23210c9b6491660a5475a8a4fda23a9293d83027d63/earthkit_geo-0.2.0-py3-none-any.whl
+  sha256: f10aab0929fadb50f1bdecdd61d0e958e20ce1ba768f8bd8c870b9e9d657c92e
+requirements:
+  run:
+    - pyproj
+    - scipy
+about:
+  home: https://github.com/ecmwf/earthkit-geo
+  PyPI: https://pypi.org/project/earthkit-geo
+  summary: Geospatial computations
+  license: Apache License Version 2.0
diff --git a/packages/earthkit-maps/meta.yaml b/packages/earthkit-maps/meta.yaml
new file mode 100644
index 00000000..759ca46a
--- /dev/null
+++ b/packages/earthkit-maps/meta.yaml
@@ -0,0 +1,21 @@
+package:
+  name: earthkit-maps
+  version: 0.0.19
+  top-level:
+    - earthkit.maps
+source:
+  url: https://files.pythonhosted.org/packages/07/3c/4740247c15ca7dac2dfaeea4243e1046666ce8dd9bb5ffd99ca74dbb2ef9/earthkit_maps-0.0.19-py3-none-any.whl
+  sha256: ea4d00e070dc47597ac8b3f1336ffa92c1d5e7beeb00f64ebd284802edff8dda
+requirements:
+  run:
+    - earthkit-data
+    - Cartopy
+    - matplotlib
+    - pyyaml
+    - numpy
+    - adjustText
+about:
+  home: https://github.com/ecmwf/earthkit-maps
+  PyPI: https://pypi.org/project/earthkit-maps
+  summary: Geospatial visualisation tools and templates
+  license: Apache License 2.0
diff --git a/packages/earthkit-meteo/meta.yaml b/packages/earthkit-meteo/meta.yaml
new file mode 100644
index 00000000..e02ee713
--- /dev/null
+++ b/packages/earthkit-meteo/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: earthkit-meteo
+  version: 0.1.1
+  top-level:
+    - earthkit.meteo
+source:
+  url: https://files.pythonhosted.org/packages/60/fb/841e0cd2c0adda8319183e3ffb8c2a69ded2d089b92bf81368e7082bc6a4/earthkit_meteo-0.1.1-py3-none-any.whl
+  sha256: 6ee6f391d6a3ff20a45953eb2bbc873041abf7eb0220b23581e9ee21d9cbb730
+requirements:
+  run:
+    - numpy
+about:
+  home: https://github.com/ecmwf/earthkit-meteo
+  PyPI: https://pypi.org/project/earthkit-meteo
+  summary: Meteorological computations
+  license: Apache License 2.0
diff --git a/packages/earthkit-plots-default-styles/meta.yaml b/packages/earthkit-plots-default-styles/meta.yaml
new file mode 100644
index 00000000..e0eda3d8
--- /dev/null
+++ b/packages/earthkit-plots-default-styles/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: earthkit-plots-default-styles
+  version: 0.0.1
+  top-level:
+    - default
+source:
+  url: https://files.pythonhosted.org/packages/b9/0a/bc9a63cf0ab27a968534b5be2f833f99d95f1e728a40e0e872a2929942b2/earthkit_plots_default_styles-0.0.1-py3-none-any.whl
+  sha256: 252001c482ba4b501983001ae6e737d65b6e43bd6c3b26e8f403597d44ddb9be
+about:
+  home: https://github.com/ecmwf/earthkit-plots-default-styles/
+  PyPI: https://pypi.org/project/earthkit-plots-default-styles
+  summary: Default styles for use with earthkit-plots
+  license: Apache License Version 2.0
diff --git a/packages/earthkit-plots/meta.yaml b/packages/earthkit-plots/meta.yaml
new file mode 100644
index 00000000..65b3da0d
--- /dev/null
+++ b/packages/earthkit-plots/meta.yaml
@@ -0,0 +1,23 @@
+package:
+  name: earthkit-plots
+  version: 0.2.0
+  top-level:
+    - earthkit.plots
+source:
+  url: https://files.pythonhosted.org/packages/23/58/15fdbde16e5155fc6895a1a07488bba66aa10a47b009d00cfaf55273b29b/earthkit_plots-0.2.0-py3-none-any.whl
+  sha256: c36eb4a5267cae3da288453d0d0a9fbf43f1a1fb4f93396ec4fb575fa5cb66c0
+requirements:
+  run:
+    - earthkit-data
+    - earthkit-plots-default-styles
+    - Cartopy
+    - pint
+    - matplotlib
+    - pyyaml
+    - numpy
+    - adjustText
+about:
+  home: https://github.com/ecmwf/earthkit-plots
+  PyPI: https://pypi.org/project/earthkit-plots
+  summary: Interactive meteorological and climate visualisation tools and templates
+  license: Apache License 2.0
diff --git a/packages/earthkit-regrid/meta.yaml b/packages/earthkit-regrid/meta.yaml
new file mode 100644
index 00000000..17326d5b
--- /dev/null
+++ b/packages/earthkit-regrid/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: earthkit-regrid
+  version: 0.3.2
+  top-level:
+    - earthkit.regrid
+source:
+  url: https://files.pythonhosted.org/packages/b4/61/10ec619d018eaa9a643b16fcd66af184c106f3646c7460f8fe9bd060b5dc/earthkit_regrid-0.3.2-py3-none-any.whl
+  sha256: 620bb6dc6e7a0d90b0ffb4f2df8676986f3df5cd85e747d364624850af25d758
+requirements:
+  run:
+    - multiurl
+    - filelock
+    - scipy
+about:
+  home: https://github.com/ecmwf/earthkit-regrid
+  PyPI: https://pypi.org/project/earthkit-regrid
+  summary: ECMWF python regridding toolkit
+  license: Apache License 2.0
diff --git a/packages/earthkit-transforms/meta.yaml b/packages/earthkit-transforms/meta.yaml
new file mode 100644
index 00000000..97e5537d
--- /dev/null
+++ b/packages/earthkit-transforms/meta.yaml
@@ -0,0 +1,20 @@
+package:
+  name: earthkit-transforms
+  version: 0.3.3
+  top-level:
+    - earthkit.transforms
+source:
+  url: https://files.pythonhosted.org/packages/25/d1/fb3d77be2d41d6883b3d17116bc34edb3146d92f5a8cb70c590070c9e948/earthkit_transforms-0.3.3-py3-none-any.whl
+  sha256: 7ecec89c66ec36a02cdd8163a7240bdf86733d3bc5f26ab4e327636c9cf83693
+requirements:
+  run:
+    - xarray
+    - numpy
+    - earthkit-data
+    - geopandas
+    - rasterio
+about:
+  home: https://github.com/ecmwf/earthkit-transforms
+  PyPI: https://pypi.org/project/earthkit-transforms
+  summary: Aggregation tools for meteorological and climate data.
+  license: Apache License Version 2.0
diff --git a/packages/earthkit/meta.yaml b/packages/earthkit/meta.yaml
new file mode 100644
index 00000000..28361f70
--- /dev/null
+++ b/packages/earthkit/meta.yaml
@@ -0,0 +1,22 @@
+package:
+  name: earthkit
+  version: 0.6.2
+  top-level:
+    - earthkit
+source:
+  url: https://files.pythonhosted.org/packages/5d/0c/757c585b05a441e161c6e0bc6b5fb794b331197c77980e4b4322e08424fa/earthkit-0.6.2-py3-none-any.whl
+  sha256: ba2b524acd3043d4abc0f5759c410251b2d61cefe9941a261ef33ee000862716
+requirements:
+  run:
+    - numpy
+    - earthkit-data
+    - earthkit-geo
+    - earthkit-maps
+    - earthkit-meteo
+    - earthkit-plots
+    - earthkit-regrid
+    - earthkit-transforms
+about:
+  home: https://github.com/ecmwf/earthkit
+  PyPI: https://pypi.org/project/earthkit
+  license: Apache License 2.0
diff --git a/packages/eccodes/meta.yaml b/packages/eccodes/meta.yaml
new file mode 100644
index 00000000..e9d35356
--- /dev/null
+++ b/packages/eccodes/meta.yaml
@@ -0,0 +1,28 @@
+package:
+  name: eccodes
+  version: 1.7.0
+  top-level:
+    - eccodes
+    - gribapi
+source:
+  url: https://files.pythonhosted.org/packages/d7/b1/445b5976010f31d5a78e14f9a7cf92fadd9d24c82553d9598078746262d3/eccodes-1.7.0.tar.gz
+  sha256: 0f233009eac228b99be6e40e5f7cc175b477d322bd91c0dac6bf226f0222cb17
+  patches:
+    - patches/0001-shared-library-include.patch
+requirements:
+  run:
+    - attrs
+    - cffi
+    - findlibs
+    - numpy
+  host:
+    - libeccodes
+build:
+  vendor-sharedlib: true
+  script: |
+    cp ${WASM_LIBRARY_DIR}/lib/libeccodes.so gribapi/
+about:
+  home: https://github.com/ecmwf/eccodes-python
+  PyPI: https://pypi.org/project/eccodes
+  summary: Python interface to the ecCodes GRIB and BUFR decoder/encoder
+  license: Apache License Version 2.0
diff --git a/packages/eccodes/patches/0001-shared-library-include.patch b/packages/eccodes/patches/0001-shared-library-include.patch
new file mode 100644
index 00000000..d7b58869
--- /dev/null
+++ b/packages/eccodes/patches/0001-shared-library-include.patch
@@ -0,0 +1,40 @@
+diff --git a/gribapi/bindings.py b/gribapi/bindings.py
+index 32fdc34..c65c4c2 100644
+--- a/gribapi/bindings.py
++++ b/gribapi/bindings.py
+@@ -15,6 +15,7 @@
+ #
+ 
+ from __future__ import absolute_import, division, print_function, unicode_literals
++from pathlib import Path
+ 
+ import logging
+ import pkgutil
+@@ -25,14 +26,7 @@ __version__ = "1.7.0"
+ 
+ LOG = logging.getLogger(__name__)
+ 
+-try:
+-    import ecmwflibs as findlibs
+-except ImportError:
+-    import findlibs
+-
+-library_path = findlibs.find("eccodes")
+-if library_path is None:
+-    raise RuntimeError("Cannot find the ecCodes library")
++library_path = str(Path(__file__).parent / "libeccodes.so")
+ 
+ # default encoding for ecCodes strings
+ ENC = "ascii"
+diff --git a/setup.py b/setup.py
+index 3e4050e..e26b91a 100644
+--- a/setup.py
++++ b/setup.py
+@@ -57,6 +57,7 @@ setuptools.setup(
+     url="https://github.com/ecmwf/eccodes-python",
+     packages=setuptools.find_packages(),
+     include_package_data=True,
++    package_data={'gribapi': ["libeccodes.so"]},
+     install_requires=install_requires,
+     tests_require=[
+         "pytest",
diff --git a/packages/ecmwf-api-client/meta.yaml b/packages/ecmwf-api-client/meta.yaml
new file mode 100644
index 00000000..5d95d8f6
--- /dev/null
+++ b/packages/ecmwf-api-client/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: ecmwf-api-client
+  version: 1.6.3
+  top-level:
+    - ecmwfapi
+source:
+  url: https://files.pythonhosted.org/packages/5b/44/ddeb18174b1cce4fe2c714c1968cd0e4272c6869c5073a3b270f071e5549/ecmwf-api-client-1.6.3.tar.gz
+  sha256: 3a00bda34a72e2d5198c97399a4750b42a6633efdb5e1b3a5fd2b2bbaa5db0d6
+about:
+  home: https://github.com/ecmwf/ecmwf-api-client
+  PyPI: https://pypi.org/project/ecmwf-api-client
+  summary: Python client for ECMWF web services API.
+  license: Apache License Version 2.0
diff --git a/packages/entrypoints/meta.yaml b/packages/entrypoints/meta.yaml
new file mode 100644
index 00000000..45d496cf
--- /dev/null
+++ b/packages/entrypoints/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: entrypoints
+  version: "0.4"
+  top-level:
+    - entrypoints
+source:
+  url: https://files.pythonhosted.org/packages/35/a8/365059bbcd4572cbc41de17fd5b682be5868b218c3c5479071865cab9078/entrypoints-0.4-py3-none-any.whl
+  sha256: f174b5ff827504fd3cd97cc3f8649f3693f51538c7e4bdf3ef002c8429d42f9f
+about:
+  home: https://github.com/takluyver/entrypoints
+  PyPI: https://pypi.org/project/entrypoints
+  summary: Discover and load entry points from installed packages.
+  license: MIT
diff --git a/packages/executing/meta.yaml b/packages/executing/meta.yaml
new file mode 100644
index 00000000..b8d8fae1
--- /dev/null
+++ b/packages/executing/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: executing
+  version: 2.0.1
+  top-level:
+    - executing
+source:
+  url: https://files.pythonhosted.org/packages/80/03/6ea8b1b2a5ab40a7a60dc464d3daa7aa546e0a74d74a9f8ff551ea7905db/executing-2.0.1-py2.py3-none-any.whl
+  sha256: eac49ca94516ccc753f9fb5ce82603156e590b27525a8bc32cce8ae302eb61bc
+about:
+  home: https://github.com/alexmojaki/executing
+  PyPI: https://pypi.org/project/executing
+  summary: Get the currently executing AST node of a frame, and other information
+  license: MIT
diff --git a/packages/field-compression-benchmark/meta.yaml b/packages/field-compression-benchmark/meta.yaml
new file mode 100644
index 00000000..d38d2460
--- /dev/null
+++ b/packages/field-compression-benchmark/meta.yaml
@@ -0,0 +1,40 @@
+package:
+  name: field-compression-benchmark
+  version: 0.0.9
+  top-level:
+    - fcbench
+source:
+  path: ./field-compression-benchmark
+  # TODO: include patches once fcbench is included from git or PyPi
+  # patches:
+  #   - patches/0001-codecs-build.patch
+build:
+  script: |
+    # Set up a more modern nightly toolchain with support for emscripten and wasm
+    export RUSTUP_TOOLCHAIN="nightly-2024-07-21"  # last 1.81 nightly
+    rustup toolchain install ${RUSTUP_TOOLCHAIN}
+    rustup target add wasm32-unknown-emscripten --toolchain ${RUSTUP_TOOLCHAIN}
+    rustup target add wasm32-unknown-unknown --toolchain ${RUSTUP_TOOLCHAIN}
+    rustup component add rust-src --toolchain ${RUSTUP_TOOLCHAIN}
+requirements:
+  executable:
+    - rustup
+  run:
+    - cfgrib  # 0.9.10.4
+    - dask  # 2024.2.1
+    - matplotlib  # 3.5.2
+    - netcdf4  # 1.6.5
+    - numcodecs  # 0.12.1
+    - numpy  # 1.26.4
+    - pint  # 0.23
+    - xarray  # 2023.12.0
+    - xeofs  # 2.3.1
+    - xhistogram  # 0.3.2
+    - zarr  # 2.17.0
+about:
+  home: https://github.com/juntyr/field-compression-benchmark
+  summary:
+    The suite compares the performance of various data compression methods with
+    different settings across a variety of variables and their derivatives from
+    different GRIB, NetCDF, or Zarr datasets.
+  license: MIT OR Apache-2.0
diff --git a/packages/field-compression-benchmark/patches/0001-codecs-build.patch b/packages/field-compression-benchmark/patches/0001-codecs-build.patch
new file mode 100644
index 00000000..324b322c
--- /dev/null
+++ b/packages/field-compression-benchmark/patches/0001-codecs-build.patch
@@ -0,0 +1,135 @@
+diff --git a/codecs/build/Cargo.toml b/codecs/build/Cargo.toml
+index 136736e9..ad5c6d39 100644
+--- a/codecs/build/Cargo.toml
++++ b/codecs/build/Cargo.toml
+@@ -16,22 +16,22 @@ wasi-preview1-component-adapter-provider = { workspace = true }
+ wit-component = { workspace = true }
+ 
+ # list of all codecs we build
+-bit-round-codec = { workspace = true }
+-fixed-offset-scale-codec = { workspace = true }
+-identity-codec = { workspace = true }
+-linear-quantize-codec = { workspace = true }
+-log-codec = { workspace = true }
+-random-projection-codec = { workspace = true }
+-reinterpret-codec = { workspace = true }
+-round-codec = { workspace = true }
+-swizzle-reshape-codec = { workspace = true }
+-uniform-noise-codec = { workspace = true }
+-zfp-codec = { workspace = true }
+-zlib-codec = { workspace = true }
+-zstd-codec = { workspace = true }
++# bit-round-codec = { workspace = true }
++# fixed-offset-scale-codec = { workspace = true }
++# identity-codec = { workspace = true }
++# linear-quantize-codec = { workspace = true }
++# log-codec = { workspace = true }
++# random-projection-codec = { workspace = true }
++# reinterpret-codec = { workspace = true }
++# round-codec = { workspace = true }
++# swizzle-reshape-codec = { workspace = true }
++# uniform-noise-codec = { workspace = true }
++# zfp-codec = { workspace = true }
++# zlib-codec = { workspace = true }
++# zstd-codec = { workspace = true }
+ 
+-[target.'cfg(not(target_arch = "wasm32"))'.build-dependencies]
+-sz3-codec = { workspace = true }
++# [target.'cfg(not(target_arch = "wasm32"))'.build-dependencies]
++# sz3-codec = { workspace = true }
+ 
+ [lints]
+ workspace = true
+diff --git a/codecs/build/build.rs b/codecs/build/build.rs
+index 0c4865f3..fa9d5738 100644
+--- a/codecs/build/build.rs
++++ b/codecs/build/build.rs
+@@ -5,14 +5,14 @@ use std::{
+     process::Command,
+ };
+ 
+-#[cfg(not(target_arch = "wasm32"))]
+-use sz3_codec as _;
+-use ::{
+-    bit_round_codec as _, fixed_offset_scale_codec as _, identity_codec as _,
+-    linear_quantize_codec as _, log_codec as _, random_projection_codec as _,
+-    reinterpret_codec as _, round_codec as _, swizzle_reshape_codec as _, uniform_noise_codec as _,
+-    zfp_codec as _, zlib_codec as _, zstd_codec as _,
+-};
++// #[cfg(not(target_arch = "wasm32"))]
++// use sz3_codec as _;
++// use ::{
++//     bit_round_codec as _, fixed_offset_scale_codec as _, identity_codec as _,
++//     linear_quantize_codec as _, log_codec as _, random_projection_codec as _,
++//     reinterpret_codec as _, round_codec as _, swizzle_reshape_codec as _, uniform_noise_codec as _,
++//     zfp_codec as _, zlib_codec as _, zstd_codec as _,
++// };
+ 
+ fn main() -> io::Result<()> {
+     // Check for `clippy` and return early in this case
+diff --git a/fcbench/Cargo.toml b/fcbench/Cargo.toml
+index a0329180..856c21a9 100644
+--- a/fcbench/Cargo.toml
++++ b/fcbench/Cargo.toml
+@@ -14,7 +14,7 @@ name = "fcbench"
+ crate-type = ["cdylib"]
+ 
+ [dependencies]
+-codecs-build = { workspace = true }
++# codecs-build = { workspace = true }
+ convert_case = { workspace = true }
+ core-benchmark = { workspace = true }
+ core-compressor = { workspace = true }
+diff --git a/fcbench/src/lib.rs b/fcbench/src/lib.rs
+index af8660b7..76dc2bd5 100644
+--- a/fcbench/src/lib.rs
++++ b/fcbench/src/lib.rs
+@@ -3,7 +3,7 @@
+ 
+ use pyo3::prelude::*;
+ 
+-use codecs_build as _;
++// use codecs_build as _;
+ 
+ mod benchmark;
+ pub mod compressor;
+diff --git a/wasi/build/Cargo.toml b/wasi/build/Cargo.toml
+index 47ccdb44..67644654 100644
+--- a/wasi/build/Cargo.toml
++++ b/wasi/build/Cargo.toml
+@@ -15,11 +15,11 @@ scratch = { workspace = true }
+ wit-component = { workspace = true }
+ 
+ # list of all WASI components we build
+-virtual-wasi-cli = { workspace = true }
+-virtual-wasi-clocks = { workspace = true }
+-virtual-wasi-filesystem = { workspace = true }
+-virtual-wasi-io = { workspace = true }
+-virtual-wasi-random = { workspace = true }
++# virtual-wasi-cli = { workspace = true }
++# virtual-wasi-clocks = { workspace = true }
++# virtual-wasi-filesystem = { workspace = true }
++# virtual-wasi-io = { workspace = true }
++# virtual-wasi-random = { workspace = true }
+ 
+ [lints]
+ workspace = true
+diff --git a/wasi/build/build.rs b/wasi/build/build.rs
+index 7a5032cb..40e01431 100644
+--- a/wasi/build/build.rs
++++ b/wasi/build/build.rs
+@@ -5,10 +5,10 @@ use std::{
+     process::Command,
+ };
+ 
+-use ::{
+-    virtual_wasi_cli as _, virtual_wasi_clocks as _, virtual_wasi_filesystem as _,
+-    virtual_wasi_io as _, virtual_wasi_random as _,
+-};
++// use ::{
++//     virtual_wasi_cli as _, virtual_wasi_clocks as _, virtual_wasi_filesystem as _,
++//     virtual_wasi_io as _, virtual_wasi_random as _,
++// };
+ 
+ fn main() -> io::Result<()> {
+     // Check for `clippy` and skip compilation in that case
diff --git a/packages/filelock/meta.yaml b/packages/filelock/meta.yaml
new file mode 100644
index 00000000..8acc00dc
--- /dev/null
+++ b/packages/filelock/meta.yaml
@@ -0,0 +1,15 @@
+package:
+  name: filelock
+  version: 3.13.4
+  top-level:
+    - filelock
+source:
+  url: https://files.pythonhosted.org/packages/38/ff/877f1dbe369a2b9920e2ada3c9ab81cf6fe8fa2dce45f40cad510ef2df62/filelock-3.13.4.tar.gz
+  sha256: d13f466618bfde72bd2c18255e269f72542c6e70e7bac83a0232d6b1cc5c8cf4
+  patches:
+    - patches/0001-fcntl-lock-check.patch
+about:
+  home: https://github.com/tox-dev/filelock
+  PyPI: https://pypi.org/project/filelock
+  summary: A platform independent file lock.
+  license: The Unlicense
diff --git a/packages/filelock/patches/0001-fcntl-lock-check.patch b/packages/filelock/patches/0001-fcntl-lock-check.patch
new file mode 100644
index 00000000..6a52dbe3
--- /dev/null
+++ b/packages/filelock/patches/0001-fcntl-lock-check.patch
@@ -0,0 +1,14 @@
+diff --git a/src/filelock/_unix.py b/src/filelock/_unix.py
+index 4ae1fbe..dbbe408 100644
+--- a/src/filelock/_unix.py
++++ b/src/filelock/_unix.py
+@@ -26,7 +26,8 @@ if sys.platform == "win32":  # pragma: win32 cover
+ else:  # pragma: win32 no cover
+     try:
+         import fcntl
+-    except ImportError:
++        _ = (fcntl.lock, fcntl.LOCK_EX, fcntl.LOCK_NB, fcntl.LOCK_UN)
++    except (ImportError, AttributeError):
+         pass
+     else:
+         has_fcntl = True
diff --git a/packages/findlibs/meta.yaml b/packages/findlibs/meta.yaml
new file mode 100644
index 00000000..b4213bfc
--- /dev/null
+++ b/packages/findlibs/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: findlibs
+  version: 0.0.5
+  top-level:
+    - findlibs
+source:
+  url: https://files.pythonhosted.org/packages/ae/be/6c72ef9d990cd25fe3dd97ebe9d77a859f7d27b7273e62ad750846d207ee/findlibs-0.0.5.tar.gz
+  sha256: 7a801571e999d0ee83f9b92cbb598c21f861ee26ca9dba74cea8958ba4335e7e
+about:
+  home: https://github.com/ecmwf/findlibs
+  PyPI: https://pypi.org/project/findlibs
+  summary: A packages to search for shared libraries on various platforms
+  license: Apache License Version 2.0
diff --git a/packages/fsspec/meta.yaml b/packages/fsspec/meta.yaml
index 3572b48d..027d42fe 100644
--- a/packages/fsspec/meta.yaml
+++ b/packages/fsspec/meta.yaml
@@ -1,11 +1,13 @@
 package:
   name: fsspec
-  version: 2023.6.0
+  version: 2024.2.0
   top-level:
     - fsspec
 source:
-  url: https://files.pythonhosted.org/packages/e3/bd/4c0a4619494188a9db5d77e2100ab7d544a42e76b2447869d8e124e981d8/fsspec-2023.6.0-py3-none-any.whl
-  sha256: 1cbad1faef3e391fba6dc005ae9b5bdcbf43005c9167ce78c915549c352c869a
+  url: https://files.pythonhosted.org/packages/28/d3/c2e0403c735548abf991bba3f45ba39194dff4569f76a99fbe77078ba7c5/fsspec-2024.2.0.tar.gz
+  sha256: b6ad1a679f760dda52b1168c859d01b7b80648ea6f7f7c7f5a8a91dc3f3ecb84
+  patches:
+    - patches/0001-syncify-awaitable.patch
 about:
   home: http://github.com/fsspec/filesystem_spec
   PyPI: https://pypi.org/project/fsspec
diff --git a/packages/fsspec/patches/0001-syncify-awaitable.patch b/packages/fsspec/patches/0001-syncify-awaitable.patch
new file mode 100644
index 00000000..c1ce5c84
--- /dev/null
+++ b/packages/fsspec/patches/0001-syncify-awaitable.patch
@@ -0,0 +1,177 @@
+diff --git a/fsspec/asyn.py b/fsspec/asyn.py
+index fb4e05e..45b060e 100644
+--- a/fsspec/asyn.py
++++ b/fsspec/asyn.py
+@@ -18,7 +18,7 @@ from .spec import AbstractBufferedFile, AbstractFileSystem
+ from .utils import glob_translate, is_exception, other_paths
+ 
+ private = re.compile("_[^_]")
+-iothread = [None]  # dedicated fsspec IO thread
++# iothread = [None]  # dedicated fsspec IO thread
+ loop = [None]  # global event loop for any non-async instance
+ _lock = None  # global lock placeholder
+ get_running_loop = asyncio.get_running_loop
+@@ -43,7 +43,7 @@ def reset_lock():
+     """
+     global _lock
+ 
+-    iothread[0] = None
++    # iothread[0] = None
+     loop[0] = None
+     _lock = None
+ 
+@@ -69,40 +69,54 @@ def sync(loop, func, *args, timeout=None, **kwargs):
+     >>> fsspec.asyn.sync(fsspec.asyn.get_loop(), func, *args,
+                          timeout=timeout, **kwargs)
+     """
+-    timeout = timeout if timeout else None  # convert 0 or 0.0 to None
+-    # NB: if the loop is not running *yet*, it is OK to submit work
+-    # and we will wait for it
+-    if loop is None or loop.is_closed():
+-        raise RuntimeError("Loop is not running")
+-    try:
+-        loop0 = asyncio.events.get_running_loop()
+-        if loop0 is loop:
+-            raise NotImplementedError("Calling sync() from within a running loop")
+-    except NotImplementedError:
+-        raise
+-    except RuntimeError:
+-        pass
++
+     coro = func(*args, **kwargs)
+-    result = [None]
+-    event = threading.Event()
+-    asyncio.run_coroutine_threadsafe(_runner(event, coro, result, timeout), loop)
+-    while True:
+-        # this loops allows thread to get interrupted
+-        if event.wait(1):
+-            break
+-        if timeout is not None:
+-            timeout -= 1
+-            if timeout < 0:
+-                raise FSTimeoutError
+-
+-    return_result = result[0]
+-    if isinstance(return_result, asyncio.TimeoutError):
+-        # suppress asyncio.TimeoutError, raise FSTimeoutError
+-        raise FSTimeoutError from return_result
+-    elif isinstance(return_result, BaseException):
+-        raise return_result
++    awaitable = coro.__await__()
++
++    try:
++        next(awaitable)
++    except StopIteration as result:
++        return result.value
++    except Exception as err:
++        raise err
+     else:
+-        return return_result
++        raise RuntimeError("could not syncify an awaitable")
++
++
++    # timeout = timeout if timeout else None  # convert 0 or 0.0 to None
++    # # NB: if the loop is not running *yet*, it is OK to submit work
++    # # and we will wait for it
++    # if loop is None or loop.is_closed():
++    #     raise RuntimeError("Loop is not running")
++    # try:
++    #     loop0 = asyncio.events.get_running_loop()
++    #     if loop0 is loop:
++    #         raise NotImplementedError("Calling sync() from within a running loop")
++    # except NotImplementedError:
++    #     raise
++    # except RuntimeError:
++    #     pass
++    # coro = func(*args, **kwargs)
++    # result = [None]
++    # event = threading.Event()
++    # asyncio.run_coroutine_threadsafe(_runner(event, coro, result, timeout), loop)
++    # while True:
++    #     # this loops allows thread to get interrupted
++    #     if event.wait(1):
++    #         break
++    #     if timeout is not None:
++    #         timeout -= 1
++    #         if timeout < 0:
++    #             raise FSTimeoutError
++
++    # return_result = result[0]
++    # if isinstance(return_result, asyncio.TimeoutError):
++    #     # suppress asyncio.TimeoutError, raise FSTimeoutError
++    #     raise FSTimeoutError from return_result
++    # elif isinstance(return_result, BaseException):
++    #     raise return_result
++    # else:
++    #     return return_result
+ 
+ 
+ def sync_wrapper(func, obj=None):
+@@ -144,10 +158,10 @@ def get_loop():
+             if loop[0] is None:
+                 with _selector_policy():
+                     loop[0] = asyncio.new_event_loop()
+-                th = threading.Thread(target=loop[0].run_forever, name="fsspecIO")
+-                th.daemon = True
+-                th.start()
+-                iothread[0] = th
++                # th = threading.Thread(target=loop[0].run_forever, name="fsspecIO")
++                # th.daemon = True
++                # th.start()
++                # iothread[0] = th
+     return loop[0]
+ 
+ 
+@@ -232,28 +246,30 @@ async def _run_coros_in_chunks(
+         If yes, you normally expect smaller batches.
+     """
+ 
+-    if batch_size is None:
+-        batch_size = _get_batch_size(nofiles=nofiles)
+-
+-    if batch_size == -1:
+-        batch_size = len(coros)
+-
+-    assert batch_size > 0
+-    results = []
+-    for start in range(0, len(coros), batch_size):
+-        chunk = [
+-            asyncio.Task(asyncio.wait_for(c, timeout=timeout))
+-            for c in coros[start : start + batch_size]
+-        ]
+-        if callback is not DEFAULT_CALLBACK:
+-            [
+-                t.add_done_callback(lambda *_, **__: callback.relative_update(1))
+-                for t in chunk
+-            ]
+-        results.extend(
+-            await asyncio.gather(*chunk, return_exceptions=return_exceptions),
+-        )
+-    return results
++    return [await c for c in coros]
++
++    # if batch_size is None:
++    #     batch_size = _get_batch_size(nofiles=nofiles)
++
++    # if batch_size == -1:
++    #     batch_size = len(coros)
++
++    # assert batch_size > 0
++    # results = []
++    # for start in range(0, len(coros), batch_size):
++    #     chunk = [
++    #         asyncio.Task(asyncio.wait_for(c, timeout=timeout))
++    #         for c in coros[start : start + batch_size]
++    #     ]
++    #     if callback is not DEFAULT_CALLBACK:
++    #         [
++    #             t.add_done_callback(lambda *_, **__: callback.relative_update(1))
++    #             for t in chunk
++    #         ]
++    #     results.extend(
++    #         await asyncio.gather(*chunk, return_exceptions=return_exceptions),
++    #     )
++    # return results
+ 
+ 
+ # these methods should be implemented as async by any async-able backend
diff --git a/packages/git2/git2/git2/__init__.py b/packages/git2/git2/git2/__init__.py
new file mode 100644
index 00000000..30068c6a
--- /dev/null
+++ b/packages/git2/git2/git2/__init__.py
@@ -0,0 +1,38 @@
+import ctypes as _ctypes
+import shlex as _shlex
+import sys as _sys
+
+from pathlib import Path as _Path
+from tempfile import TemporaryFile as _TemporaryFile
+
+
+_dll = _ctypes.CDLL(_Path(__file__).parent / "libgit2.so")
+
+
+def git(*args: list[str]):
+    argc = len(args) + 1
+
+    argv = (_ctypes.c_char_p * argc)()
+    argv[0] = "git".encode("utf-8")
+    argv[1:] = [a.encode("utf-8") for a in args]
+
+    with _TemporaryFile() as out, _TemporaryFile() as err:
+        status = _dll.git_main(argc, argv, out.fileno(), err.fileno())
+
+        out.seek(0); out = out.read().decode("utf-8").rstrip()
+        err.seek(0); err = err.read().decode("utf-8").rstrip()
+    
+    if len(out) > 0:
+        print(out, end="", file=_sys.stdout, flush=True)
+    if len(err) > 0:
+        print(err, end="", file=_sys.stderr, flush=True)
+
+
+try:
+    from IPython.core.magic import register_line_magic as _register_line_magic
+except ModuleNotFoundError:
+    pass
+else:
+    @_register_line_magic("git")
+    def _git_magic(line):
+        git(*_shlex.split(line))
diff --git a/packages/git2/git2/pyproject.toml b/packages/git2/git2/pyproject.toml
new file mode 100644
index 00000000..537ce3ca
--- /dev/null
+++ b/packages/git2/git2/pyproject.toml
@@ -0,0 +1,12 @@
+[build-system]
+requires = ["setuptools"]
+build-backend = "setuptools.build_meta"
+
+[project]
+name = "git2"
+version = "1.7.1"
+
+dependencies = []
+
+[tool.setuptools.package-data]
+git2 = ["libgit2.so"]
diff --git a/packages/git2/meta.yaml b/packages/git2/meta.yaml
new file mode 100644
index 00000000..98de1e7b
--- /dev/null
+++ b/packages/git2/meta.yaml
@@ -0,0 +1,14 @@
+package:
+  name: git2
+  version: 1.7.1
+  top-level:
+    - git2
+source:
+  path: ./git2
+requirements:
+  host:
+    - libgit2
+build:
+  vendor-sharedlib: true
+  script: |
+    cp ${WASM_LIBRARY_DIR}/lib/libgit2.so git2/
diff --git a/packages/h5netcdf/meta.yaml b/packages/h5netcdf/meta.yaml
new file mode 100644
index 00000000..59d3abbf
--- /dev/null
+++ b/packages/h5netcdf/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: h5netcdf
+  version: 1.3.0
+  top-level:
+    - h5netcdf
+requirements:
+  run:
+    - h5py
+    - packaging
+source:
+  url: https://files.pythonhosted.org/packages/68/2d/63851081b19d1ccf245091255797cb358c53c886609b5056da5457f7dbbf/h5netcdf-1.3.0-py3-none-any.whl
+  sha256: f2df69dcd3665dc9c4d43eb6529dedd113b2508090d12ac973573305a8406465
+about:
+  home: "https://github.com/h5netcdf/h5netcdf"
+  PyPI: https://pypi.org/project/h5netcdf
+  summary: netCDF4 via h5py
+  license: BSD-3-Clause
diff --git a/packages/h5py/meta.yaml b/packages/h5py/meta.yaml
index 3e67ba26..e3b3e76f 100644
--- a/packages/h5py/meta.yaml
+++ b/packages/h5py/meta.yaml
@@ -1,14 +1,19 @@
 package:
   name: h5py
-  version: 3.7.0
+  version: 3.10.0
   top-level:
     - h5py
 source:
-  url: https://files.pythonhosted.org/packages/c5/40/7cf58e6230f0e76699f011c6d293dd47755997709a303a4e644823f3a753/h5py-3.7.0.tar.gz
-  sha256: 3fcf37884383c5da64846ab510190720027dca0768def34dd8dcb659dbe5cbf3
+  url: https://files.pythonhosted.org/packages/37/fc/0b1825077a1c4c79a13984c59997e4b36702962df0bca420698f77b70b10/h5py-3.10.0.tar.gz
+  sha256: d93adc48ceeb33347eb24a634fb787efc7ae4644e6ea4ba733d099605045c049
   patches:
     - patches/0001-Fix-incompatible-pointer-type.patch
     - patches/configure.patch
+about:
+  home: https://github.com/h5py/h5py
+  PyPI: https://pypi.org/project/h5py
+  summary: Read and write HDF5 files from Python
+  license: BSD-3-Clause
 
 requirements:
   run:
@@ -22,5 +27,5 @@ build:
   script: |
     export HDF5_MPI=OFF
     export H5PY_SETUP_REQUIRES="0"
-    export HDF5_VERSION=1.12.1
+    export HDF5_VERSION=1.14.3
     export HDF5_DIR=${WASM_LIBRARY_DIR}
diff --git a/packages/h5py/patches/0001-Fix-incompatible-pointer-type.patch b/packages/h5py/patches/0001-Fix-incompatible-pointer-type.patch
index f52cd8e5..00351e83 100644
--- a/packages/h5py/patches/0001-Fix-incompatible-pointer-type.patch
+++ b/packages/h5py/patches/0001-Fix-incompatible-pointer-type.patch
@@ -3,37 +3,18 @@ From: Gyeongjae Choi <def6488@gmail.com>
 Date: Fri, 2 Sep 2022 07:54:44 +0000
 Subject: [PATCH] Fix incompatible pointer type
 
+
+Removed hunks upstreamed in 3.10.0
+
 ---
  h5py/_errors.pxd | 2 +-
  h5py/_errors.pyx | 6 +++---
  2 files changed, 4 insertions(+), 4 deletions(-)
 
-diff --git a/h5py/_errors.pxd b/h5py/_errors.pxd
-index 13b299e2..e7791a6b 100644
---- a/h5py/_errors.pxd
-+++ b/h5py/_errors.pxd
-@@ -412,7 +412,7 @@ cdef extern from "hdf5.h":
- 
-     herr_t    H5Eprint(hid_t estack_id, void *stream)
- 
--    ctypedef herr_t (*H5E_walk_t)(int n, H5E_error_t *err_desc, void* client_data)
-+    ctypedef herr_t (*H5E_walk_t)(unsigned int n, const H5E_error_t *err_desc, void* client_data)
-     herr_t    H5Ewalk(hid_t estack_id, H5E_direction_t direction, H5E_walk_t func, void* client_data)
- 
- # --- Functions for managing the HDF5 error callback mechanism ---
 diff --git a/h5py/_errors.pyx b/h5py/_errors.pyx
 index 612052fb..dabbc632 100644
 --- a/h5py/_errors.pyx
 +++ b/h5py/_errors.pyx
-@@ -94,7 +94,7 @@ cdef struct err_data_t:
-     H5E_error_t err
-     int n
- 
--cdef herr_t walk_cb(int n, H5E_error_t *desc, void *e) nogil:
-+cdef herr_t walk_cb(unsigned int n, const H5E_error_t *desc, void *e) nogil:
- 
-     cdef err_data_t *ee = <err_data_t*>e
- 
 @@ -120,7 +120,7 @@ cdef int set_exception() except -1:
  
      err.n = -1
diff --git a/packages/idna/meta.yaml b/packages/idna/meta.yaml
index 0fcf8f57..e74aaa1a 100644
--- a/packages/idna/meta.yaml
+++ b/packages/idna/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: idna
-  version: "3.4"
+  version: "3.6"
   top-level:
     - idna
 source:
-  url: https://files.pythonhosted.org/packages/fc/34/3030de6f1370931b9dbb4dad48f6ab1015ab1d32447850b9fc94e60097be/idna-3.4-py3-none-any.whl
-  sha256: 90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2
+  url: https://files.pythonhosted.org/packages/c2/e7/a82b05cf63a603df6e68d59ae6a68bf5064484a0718ea5033660af4b54a9/idna-3.6-py3-none-any.whl
+  sha256: c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f
 about:
   home: https://github.com/kjd/idna
   PyPI: https://pypi.org/project/idna
diff --git a/packages/importlib_metadata/meta.yaml b/packages/importlib_metadata/meta.yaml
new file mode 100644
index 00000000..7453bee4
--- /dev/null
+++ b/packages/importlib_metadata/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: importlib_metadata
+  version: 7.0.1
+  top-level:
+    - importlib_metadata
+source:
+  url: https://files.pythonhosted.org/packages/c0/8b/d8427f023c081a8303e6ac7209c16e6878f2765d5b59667f3903fbcfd365/importlib_metadata-7.0.1-py3-none-any.whl
+  sha256: 4805911c3a4ec7c3966410053e9ec6a1fecd629117df5adee56dfc9432a1081e
+requirements:
+  run:
+    - zipp
+about:
+  home: https://github.com/python/importlib_metadata
+  PyPI: https://pypi.org/project/importlib_metadata
+  summary: Read metadata from Python packages
+  license: "Apache Software License"
diff --git a/packages/ipyfilite/meta.yaml b/packages/ipyfilite/meta.yaml
new file mode 100644
index 00000000..2618f15a
--- /dev/null
+++ b/packages/ipyfilite/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: ipyfilite
+  version: 0.1.27
+  top-level:
+    - ipyfilite
+source:
+  url: https://files.pythonhosted.org/packages/9e/6d/6fbfe3cf613507188327710775ef193312869c348d7c2001407eff67b712/ipyfilite-0.1.27-py3-none-any.whl
+  sha256: d12a003a0e366fabeb236e7b7e9beefe7051a962d617cded60f59e445a88a35c
+requirements:
+  run:
+    - ipywidgets
+about:
+  home: https://github.com/juntyr/ipyfilite
+  PyPI: https://pypi.org/project/ipyfilite
+  summary:
+    File upload widget specifically for Pyodide kernels running in JupyterLite.
+    Uploaded files are not loaded into memory but mounted as read-only files in a
+    new WORKERFS.
+  license: BSD 3-Clause License
diff --git a/packages/ipyloglite/meta.yaml b/packages/ipyloglite/meta.yaml
new file mode 100644
index 00000000..1b52b7a3
--- /dev/null
+++ b/packages/ipyloglite/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: ipyloglite
+  version: 0.1.2
+  top-level:
+    - ipyloglite
+source:
+  url: https://files.pythonhosted.org/packages/1f/00/69dfe374606d8b1c13b8df6e96fb2ad455cbec4fa281c56ab2f373ea13ca/ipyloglite-0.1.2-py3-none-any.whl
+  sha256: dbfdccbb93a7e981574448fa2496330648e57d0aec64be50694e830776bab8a8
+about:
+  home: https://github.com/juntyr/ipyloglite
+  PyPI: https://pypi.org/project/ipyloglite
+  summary: Forward console.log and friends to cell outputs in JupyterLite.
+  license: MIT OR Apache-2.0
diff --git a/packages/ipython/meta.yaml b/packages/ipython/meta.yaml
new file mode 100644
index 00000000..692b8e28
--- /dev/null
+++ b/packages/ipython/meta.yaml
@@ -0,0 +1,26 @@
+package:
+  name: ipython
+  version: 8.22.1
+  top-level:
+    - IPython
+source:
+  url: https://files.pythonhosted.org/packages/95/2c/9ef08ee0cc836f95bc2750e7c3f18790a90dff596d372cee4bcd2561ae1c/ipython-8.22.1.tar.gz
+  sha256: 39c6f9efc079fb19bfb0f17eee903978fe9a290b1b82d68196c641cecb76ea22
+  patches:
+    - patches/0001-jupyterlite-preload.patch
+requirements:
+  run:
+    - comm
+    - decorator
+    - jedi
+    - matplotlib-inline
+    - prompt_toolkit
+    - Pygments
+    - stack_data
+    - traitlets
+    - jupyterlite-preload
+about:
+  home: "https://ipython.org/"
+  PyPI: https://pypi.org/project/ipython
+  summary: "IPython: Productive Interactive Computing"
+  license: BSD-3-Clause
diff --git a/packages/ipython/patches/0001-jupyterlite-preload.patch b/packages/ipython/patches/0001-jupyterlite-preload.patch
new file mode 100644
index 00000000..84bcb0b0
--- /dev/null
+++ b/packages/ipython/patches/0001-jupyterlite-preload.patch
@@ -0,0 +1,13 @@
+diff --git a/IPython/__init__.py b/IPython/__init__.py
+index b7235481f..679ee70d8 100644
+--- a/IPython/__init__.py
++++ b/IPython/__init__.py
+@@ -19,6 +19,8 @@
+ # Imports
+ #-----------------------------------------------------------------------------
+ 
++import jupyterlite_preload
++
+ import sys
+ 
+ #-----------------------------------------------------------------------------
diff --git a/packages/ipywidgets/meta.yaml b/packages/ipywidgets/meta.yaml
new file mode 100644
index 00000000..f4e47d07
--- /dev/null
+++ b/packages/ipywidgets/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: ipywidgets
+  version: 8.0.6
+  top-level:
+    - ipywidgets
+source:
+  url: https://files.pythonhosted.org/packages/50/7d/2c8b7bba2b1c2b5d1299f22fa7853f09b573c84e63b62870c13a6ec11990/ipywidgets-8.0.6-py3-none-any.whl
+  sha256: a60bf8d2528997e05ac83fd19ea2fbe65f2e79fbe1b2b35779bdfc46c2941dcc
+requirements:
+  run:
+    - widgetsnbextension
+    - jupyterlab_widgets
+about:
+  home: http://jupyter.org
+  PyPI: https://pypi.org/project/ipywidgets
+  summary: Jupyter interactive widgets
+  license: BSD 3-Clause License
diff --git a/packages/jmespath/meta.yaml b/packages/jmespath/meta.yaml
new file mode 100644
index 00000000..37df9349
--- /dev/null
+++ b/packages/jmespath/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: jmespath
+  version: 1.0.1
+  top-level:
+    - jmespath
+source:
+  url: https://files.pythonhosted.org/packages/31/b4/b9b800c45527aadd64d5b442f9b932b00648617eb5d63d2c7a6587b7cafc/jmespath-1.0.1-py3-none-any.whl
+  sha256: 02e2e4cc71b5bcab88332eebf907519190dd9e6e82107fa7f83b1003a6252980
+about:
+  home: https://github.com/jmespath/jmespath.py
+  PyPI: https://pypi.org/project/jmespath
+  summary: JSON Matching Expressions
+  license: MIT
diff --git a/packages/jupyterlab_widgets/meta.yaml b/packages/jupyterlab_widgets/meta.yaml
new file mode 100644
index 00000000..f8920c6c
--- /dev/null
+++ b/packages/jupyterlab_widgets/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: jupyterlab_widgets
+  version: 3.0.7
+  top-level:
+    - jupyterlab_widgets
+source:
+  url: https://files.pythonhosted.org/packages/46/98/e7ce879b7b5d4871b80e291be967d22e5e66fa43474c476a95fe6231f50d/jupyterlab_widgets-3.0.7-py3-none-any.whl
+  sha256: c73f8370338ec19f1bec47254752d6505b03601cbd5a67e6a0b184532f73a459
+about:
+  home: https://github.com/jupyter-widgets/ipywidgets
+  PyPI: https://pypi.org/project/jupyterlab_widgets
+  summary: Jupyter interactive widgets for JupyterLab
+  license: BSD-3-Clause
diff --git a/packages/jupyterlite-preload/jupyterlite-preload/jupyterlite_preload.py b/packages/jupyterlite-preload/jupyterlite-preload/jupyterlite_preload.py
new file mode 100644
index 00000000..11d6b439
--- /dev/null
+++ b/packages/jupyterlite-preload/jupyterlite-preload/jupyterlite_preload.py
@@ -0,0 +1,66 @@
+import asyncio
+import importlib
+import sys
+from pathlib import Path
+
+import pyodide
+import pyodide_js
+
+import ipyloglite
+
+import pyodide_http
+pyodide_http.patch_all()
+
+
+async def asyncio_gather(*coros_or_futures, return_exceptions=False):
+    results = []
+
+    for coro in coros_or_futures:
+        try:
+            results.append(await coro)
+        except Exception as err:
+            if return_exceptions:
+                results.append(err)
+            else:
+                raise
+
+    return results
+
+
+# FIXME: somehow detect if we're actually running on a loop and use the actual
+#        async sleep in that case
+async def asyncio_sleep(delay, result=None):
+    import time
+    time.sleep(delay)
+    return result
+
+
+asyncio.gather = asyncio_gather
+asyncio.sleep = asyncio_sleep
+
+
+async def loadPackagesFromImports(
+    code: str, options=dict(checkIntegrity=True),
+):
+    imports = set()
+
+    for name in pyodide.code.find_imports(code):
+        if name in sys.modules:
+            continue
+
+        spec = importlib.util.find_spec(name)
+        if spec is not None and Path(spec.origin).parts[:2] == (
+            "/", "drive",
+        ):
+            with open(spec.origin, "r") as f:
+                await loadPackagesFromImports(f.read(), options=options)
+
+        if name in pyodide_js._api._import_name_to_package_name:
+            imports.add(
+                pyodide_js._api._import_name_to_package_name[name]
+            )
+
+    return await pyodide_js.loadPackage(list(imports))
+
+
+pyodide_js.loadPackagesFromImports = loadPackagesFromImports
diff --git a/packages/jupyterlite-preload/jupyterlite-preload/pyproject.toml b/packages/jupyterlite-preload/jupyterlite-preload/pyproject.toml
new file mode 100644
index 00000000..44219eaa
--- /dev/null
+++ b/packages/jupyterlite-preload/jupyterlite-preload/pyproject.toml
@@ -0,0 +1,12 @@
+[build-system]
+requires = ["setuptools"]
+build-backend = "setuptools.build_meta"
+
+[project]
+name = "jupyterlite-preload"
+version = "0.0.0"
+
+dependencies = [
+    "ipyloglite == 0.0.0",
+    "pyodide-http == 0.2.1",
+]
diff --git a/packages/jupyterlite-preload/meta.yaml b/packages/jupyterlite-preload/meta.yaml
new file mode 100644
index 00000000..d34d2d36
--- /dev/null
+++ b/packages/jupyterlite-preload/meta.yaml
@@ -0,0 +1,11 @@
+package:
+  name: jupyterlite-preload
+  version: 0.0.0
+  top-level:
+    - jupyterlite_preload
+source:
+  path: ./jupyterlite-preload
+requirements:
+  run:
+    - ipyloglite  # 0.0.0
+    - pyodide-http  # 0.2.1
diff --git a/packages/kerchunk/meta.yaml b/packages/kerchunk/meta.yaml
new file mode 100644
index 00000000..0e6dad88
--- /dev/null
+++ b/packages/kerchunk/meta.yaml
@@ -0,0 +1,25 @@
+package:
+  name: kerchunk
+  version: 0.2.6
+  top-level:
+    - kerchunk
+source:
+  url: https://files.pythonhosted.org/packages/82/8c/117feba86c75d42b8434f8e65085165df4cd415c754bcde3df007f036293/kerchunk-0.2.6-py3-none-any.whl
+  sha256: dc55fcea6560688ffc2390ff5882847fdf736982c1817553632a2bd7eb59de73
+requirements:
+  run:
+    - fsspec
+    - numcodecs
+    - numpy
+    - ujson
+    - zarr
+    - cftime
+    - xarray
+    - h5py
+    - cfgrib
+    - scipy
+about:
+  home: https://github.com/fsspec/kerchunk
+  PyPI: https://pypi.org/project/kerchunk
+  summary: Functions to make reference descriptions for ReferenceFileSystem
+  license: MIT
diff --git a/packages/kiwisolver/meta.yaml b/packages/kiwisolver/meta.yaml
index 7069d169..f05036af 100644
--- a/packages/kiwisolver/meta.yaml
+++ b/packages/kiwisolver/meta.yaml
@@ -1,8 +1,8 @@
 package:
   name: kiwisolver
-  version: 1.4.4
+  version: 1.4.5
   top-level:
     - kiwisolver
 source:
-  sha256: d41997519fcba4a1e46eb4a2fe31bc12f0ff957b2b81bac28db24744f333e955
-  url: https://files.pythonhosted.org/packages/5f/5c/272a7dd49a1914f35cd8d6d9f386defa8b047f6fbd06badd6b77b3ba24e7/kiwisolver-1.4.4.tar.gz
+  sha256: e57e563a57fb22a142da34f38acc2fc1a5c864bc29ca1517a88abc963e60d6ec
+  url: https://files.pythonhosted.org/packages/b9/2d/226779e405724344fc678fcc025b812587617ea1a48b9442628b688e85ea/kiwisolver-1.4.5.tar.gz
diff --git a/packages/libaec/meta.yaml b/packages/libaec/meta.yaml
new file mode 100644
index 00000000..4342d7a4
--- /dev/null
+++ b/packages/libaec/meta.yaml
@@ -0,0 +1,26 @@
+package:
+  name: libaec
+  version: 1.1.2
+
+source:
+  url: https://gitlab.dkrz.de/k202009/libaec/-/archive/v1.1.2/libaec-v1.1.2.tar.gz
+  sha256: cde2097c6e0f18dbc4771930cebe907dfbdfcb7921f74d2594d46221581b6ef1
+  # patches:
+  #   - patches/0001-build-only-static-library.patch
+
+build:
+  type: static_library
+  script: |
+    mkdir -p build;
+
+    cd build \
+        && emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=${WASM_LIBRARY_DIR} \
+        -DCMAKE_INSTALL_LIBDIR=lib \
+        -DCMAKE_INSTALL_INCLUDEDIR=include;
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make -j ${PYODIDE_JOBS:-3} install;
+
+    cp -P ${WASM_LIBRARY_DIR}/lib/libaec.a ${DISTDIR}
+    rm ${WASM_LIBRARY_DIR}/lib/libaec.so
diff --git a/packages/libaec/patches/0001-build-only-static-library.patch b/packages/libaec/patches/0001-build-only-static-library.patch
new file mode 100644
index 00000000..4e87e31b
--- /dev/null
+++ b/packages/libaec/patches/0001-build-only-static-library.patch
@@ -0,0 +1,55 @@
+diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
+index 7abf455..3314942 100644
+--- a/src/CMakeLists.txt
++++ b/src/CMakeLists.txt
+@@ -11,42 +11,24 @@ target_include_directories(aec
+   "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/../include>"
+   "$<INSTALL_INTERFACE:include>")
+ 
+-# Create both static and shared aec library.
++# Create the static aec library.
+ add_library(aec_static STATIC "$<TARGET_OBJECTS:aec>")
+ target_link_libraries(aec_static PUBLIC aec)
+ set_target_properties(aec_static
+   PROPERTIES
+   OUTPUT_NAME $<IF:$<BOOL:${MSVC}>,aec-static,aec>)
+ 
+-add_library(aec_shared SHARED "$<TARGET_OBJECTS:aec>")
+-target_link_libraries(aec_shared PUBLIC aec)
+-set_target_properties(aec_shared
+-  PROPERTIES
+-  VERSION 0.1.2
+-  SOVERSION 0
+-  OUTPUT_NAME aec
+-  PUBLIC_HEADER ${CMAKE_CURRENT_BINARY_DIR}/../include/libaec.h)
+-
+ # Wrapper for compatibility with szip
+ add_library(sz OBJECT sz_compat.c)
+ target_link_libraries(sz PUBLIC aec)
+ 
+-# Create both static and shared szip library.
++# Create the static szip library.
+ add_library(sz_static STATIC "$<TARGET_OBJECTS:sz>" "$<TARGET_OBJECTS:aec>")
+ set_target_properties(sz_static
+   PROPERTIES
+   OUTPUT_NAME $<IF:$<BOOL:${MSVC}>,szip-static,sz>)
+ target_link_libraries(sz_static PUBLIC sz)
+ 
+-add_library(sz_shared SHARED "$<TARGET_OBJECTS:sz>" "$<TARGET_OBJECTS:aec>")
+-target_link_libraries(sz_shared PUBLIC sz)
+-set_target_properties(sz_shared
+-  PROPERTIES
+-  VERSION 2.0.1
+-  SOVERSION 2
+-  OUTPUT_NAME $<IF:$<BOOL:${MSVC}>,szip,sz>
+-  PUBLIC_HEADER ../include/szlib.h)
+-
+ # Simple executable for testing and benchmarking.
+ add_executable(graec graec.c)
+ target_link_libraries(graec aec)
+@@ -71,4 +53,4 @@ if(UNIX)
+     DEPENDS graec utime)
+ endif()
+ 
+-install(TARGETS aec_static aec_shared sz_static sz_shared)
++install(TARGETS aec_static sz_static)
diff --git a/packages/libeccodes/meta.yaml b/packages/libeccodes/meta.yaml
new file mode 100644
index 00000000..d358382b
--- /dev/null
+++ b/packages/libeccodes/meta.yaml
@@ -0,0 +1,46 @@
+package:
+  name: libeccodes
+  version: 2.34.1
+
+source:
+  url: https://github.com/ecmwf/eccodes/archive/refs/tags/2.34.1.tar.gz
+  sha256: 256665de709d59a41f38f69513343b7895d4c325ab1fb775e6ac5becbc8a52e7
+  patches:
+    - patches/0001-32bit-support-hack.patch
+
+requirements:
+  host:
+    - libaec
+
+build:
+  type: shared_library
+  script: |
+    git clone --branch 3.7.0 --depth 1 https://github.com/ecmwf/ecbuild;
+
+    mkdir -p build;
+
+    cd build \
+        && emcmake cmake ../ \
+        -DCMAKE_INSTALL_PREFIX=${WASM_LIBRARY_DIR} \
+        -DBUILD_SHARED_LIBS=ON \
+        -DENABLE_NETCDF=OFF \
+        -DENABLE_JPG=ON \
+        -DENABLE_JPG_LIBOPENJPEG=OFF \
+        -DENABLE_JPG_LIBJASPER=OFF \
+        -DENABLE_PNG=ON \
+        -DENABLE_AEC=ON \
+        -DENABLE_FORTRAN=OFF \
+        -DENABLE_MEMFS=ON \
+        -DDISABLE_OS_CHECK=ON \
+        -DENABLE_TESTS=OFF \
+        -DENABLE_PRODUCT_GRIB=ON \
+        -DENABLE_PRODUCT_BUFR=ON \
+        -DENABLE_EXAMPLES=OFF \
+        -DENABLE_BUILD_TOOLS=OFF \
+        -DENABLE_INSTALL_ECCODES_DEFINITIONS=ON \
+        -DENABLE_INSTALL_ECCODES_SAMPLES=OFF;
+
+    emmake make -j ${PYODIDE_JOBS:-3};
+    emmake make -j ${PYODIDE_JOBS:-3} install;
+
+    cp -P ${WASM_LIBRARY_DIR}/lib/libeccodes.so ${DISTDIR}
diff --git a/packages/libeccodes/patches/0001-32bit-support-hack.patch b/packages/libeccodes/patches/0001-32bit-support-hack.patch
new file mode 100644
index 00000000..0d4e2838
--- /dev/null
+++ b/packages/libeccodes/patches/0001-32bit-support-hack.patch
@@ -0,0 +1,86 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index f60682739..45b5624c8 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -66,9 +66,9 @@ ecbuild_debug("ECCODES_LITTLE_ENDIAN=${ECCODES_LITTLE_ENDIAN}")
+ ecbuild_info("Operating system=${CMAKE_SYSTEM} (${EC_OS_BITS} bits)")
+ 
+ # Only support 64 bit operating systems
+-if( NOT EC_OS_BITS EQUAL "64" )
+-    ecbuild_critical( "Operating system ${CMAKE_SYSTEM} (${EC_OS_BITS} bits) -- ecCodes only supports 64 bit platforms" )
+-endif()
++# if( NOT EC_OS_BITS EQUAL "64" )
++#     ecbuild_critical( "Operating system ${CMAKE_SYSTEM} (${EC_OS_BITS} bits) -- ecCodes only supports 64 bit platforms" )
++# endif()
+ 
+ ###############################################################################
+ # some variables/options of this project
+@@ -427,7 +427,7 @@ if( HAVE_BUILD_TOOLS )
+ endif()
+ add_subdirectory( fortran )
+ 
+-add_subdirectory( tests )
++# add_subdirectory( tests )
+ add_subdirectory( examples )
+ add_subdirectory( data )
+ add_subdirectory( samples )
+diff --git a/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc b/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
+index d337dba48..5c888355b 100644
+--- a/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
++++ b/src/grib_accessor_class_data_g1second_order_general_extended_packing.cc
+@@ -184,6 +184,17 @@ grib_accessor_class* grib_accessor_class_data_g1second_order_general_extended_pa
+ #define MAX_NUMBER_OF_GROUPS 65534
+ #define EFDEBUG 0
+ 
++static const size_t nbits[32]={
++    0x1, 0x2, 0x4, 0x8,
++    0x10, 0x20, 0x40, 0x80,
++    0x100, 0x200, 0x400, 0x800,
++    0x1000, 0x2000, 0x4000, 0x8000,
++    0x10000, 0x20000, 0x40000, 0x80000,
++    0x100000, 0x200000, 0x400000, 0x800000,
++    0x1000000, 0x2000000, 0x4000000, 0x8000000,
++    0x10000000, 0x20000000, 0x40000000, 0x80000000,
++};
++/*
+ static const unsigned long nbits[64] = {
+     0x1, 0x2, 0x4, 0x8,
+     0x10, 0x20, 0x40, 0x80,
+@@ -202,6 +213,7 @@ static const unsigned long nbits[64] = {
+     0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
+     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
+ };
++*/
+ 
+ static long number_of_bits(grib_handle* h, unsigned long x)
+ {
+diff --git a/src/grib_accessor_class_second_order_bits_per_value.cc b/src/grib_accessor_class_second_order_bits_per_value.cc
+index 74c4b4c05..507fb4f3e 100644
+--- a/src/grib_accessor_class_second_order_bits_per_value.cc
++++ b/src/grib_accessor_class_second_order_bits_per_value.cc
+@@ -111,6 +111,17 @@ grib_accessor_class* grib_accessor_class_second_order_bits_per_value = &_grib_ac
+ 
+ /* END_CLASS_IMP */
+ 
++static const size_t nbits[32]={
++    0x1, 0x2, 0x4, 0x8,
++    0x10, 0x20, 0x40, 0x80,
++    0x100, 0x200, 0x400, 0x800,
++    0x1000, 0x2000, 0x4000, 0x8000,
++    0x10000, 0x20000, 0x40000, 0x80000,
++    0x100000, 0x200000, 0x400000, 0x800000,
++    0x1000000, 0x2000000, 0x4000000, 0x8000000,
++    0x10000000, 0x20000000, 0x40000000, 0x80000000,
++};
++/*
+ static const size_t nbits[64] = {
+     0x1, 0x2, 0x4, 0x8,
+     0x10, 0x20, 0x40, 0x80,
+@@ -129,6 +140,7 @@ static const size_t nbits[64] = {
+     0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
+     0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000
+ };
++*/
+ 
+ static int number_of_bits(size_t x, long* result)
+ {
diff --git a/packages/libf2c/meta.yaml b/packages/libf2c/meta.yaml
index 29b24307..0ae23ca1 100644
--- a/packages/libf2c/meta.yaml
+++ b/packages/libf2c/meta.yaml
@@ -22,6 +22,7 @@ source:
     # In CLAPACK's F2CLIBS/libf2c Makefile, some commands are mistakenly (?) hardcoded
     # instead of using the right variables
     - patches/0006-adjust-ld-ar-ranlib.patch
+    - patches/0007-add-singlecomplex.patch
 
   extras:
     - [extras/make.inc, make.inc]
diff --git a/packages/libf2c/patches/0007-add-singlecomplex.patch b/packages/libf2c/patches/0007-add-singlecomplex.patch
new file mode 100644
index 00000000..982d3065
--- /dev/null
+++ b/packages/libf2c/patches/0007-add-singlecomplex.patch
@@ -0,0 +1,10 @@
+--- a/INCLUDE/f2c.h
++++ b/INCLUDE/f2c.h
+@@ -14,6 +14,7 @@ typedef short int shortint;
+ typedef float real;
+ typedef double doublereal;
+ typedef struct { real r, i; } complex;
++typedef struct { real r, i; } singlecomplex;
+ typedef struct { doublereal r, i; } doublecomplex;
+ typedef long int logical;
+ typedef short int shortlogical;
diff --git a/packages/libgit2/meta.yaml b/packages/libgit2/meta.yaml
new file mode 100644
index 00000000..f09be2ed
--- /dev/null
+++ b/packages/libgit2/meta.yaml
@@ -0,0 +1,35 @@
+# Based on https://github.com/petersalomonsen/wasm-git
+
+package:
+  name: libgit2
+  version: 1.7.1
+
+source:
+  url: https://github.com/libgit2/libgit2/archive/refs/tags/v1.7.1.tar.gz
+  sha256: 17d2b292f21be3892b704dddff29327b3564f96099a1c53b00edc23160c71327
+  patches:
+    - patches/0001-emscripten-transport-fs.patch
+
+build:
+  type: shared_library
+  exports: requested
+  script: |
+    emcmake cmake \
+      -DCMAKE_BUILD_TYPE=Release \
+      -DCMAKE_C_FLAGS="-Oz -lz" \
+      -DREGEX_BACKEND=regcomp \
+      -DSONAME=OFF \
+      -DUSE_HTTPS=OFF \
+      -DBUILD_SHARED_LIBS=OFF \
+      -DTHREADSAFE=OFF \
+      -DUSE_SSH=OFF \
+      -DBUILD_CLAR=OFF \
+      -DBUILD_EXAMPLES=ON \
+      .
+    emmake make lg2 -j ${PYODIDE_JOBS:-3}
+
+    cp -P examples/liblg2.so ${DISTDIR}/libgit2.so
+    cp -P examples/liblg2.so ${WASM_LIBRARY_DIR}/lib/libgit2.so
+requirements:
+  host:
+    - zlib
diff --git a/packages/libgit2/patches/0001-emscripten-transport-fs.patch b/packages/libgit2/patches/0001-emscripten-transport-fs.patch
new file mode 100644
index 00000000..6a169af0
--- /dev/null
+++ b/packages/libgit2/patches/0001-emscripten-transport-fs.patch
@@ -0,0 +1,2666 @@
+diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
+index 8e38c7d4e..ac44f03c1 100644
+--- a/examples/CMakeLists.txt
++++ b/examples/CMakeLists.txt
+@@ -2,7 +2,7 @@
+ 
+ file(GLOB SRC_EXAMPLES *.c *.h)
+ 
+-add_executable(lg2 ${SRC_EXAMPLES})
++add_library(lg2 SHARED ${SRC_EXAMPLES})
+ set_target_properties(lg2 PROPERTIES C_STANDARD 90)
+ 
+ # Ensure that we do not use deprecated functions internally
+@@ -16,3 +16,4 @@ if(WIN32 OR ANDROID)
+ else()
+ 	target_link_libraries(lg2 libgit2package pthread)
+ endif()
++set(CMAKE_C90_STANDARD_COMPILE_OPTION "-std=gnu90")
+diff --git a/examples/add.c b/examples/add.c
+index 1c93b1140..542360ea9 100644
+--- a/examples/add.c
++++ b/examples/add.c
+@@ -28,7 +28,7 @@
+ 
+ enum index_mode {
+ 	INDEX_NONE,
+-	INDEX_ADD
++	INDEX_ADD,
+ };
+ 
+ struct index_options {
+@@ -110,7 +110,22 @@ int print_matched_cb(const char *path, const char *matched_pathspec, void *paylo
+ 	return ret;
+ }
+ 
+-static void print_usage(void)
++void init_array(git_strarray *array, int argc, char **argv)
++{
++	unsigned int i;
++
++	array->count = argc;
++	array->strings = calloc(array->count, sizeof(char *));
++	assert(array->strings != NULL);
++
++	for (i = 0; i < array->count; i++) {
++		array->strings[i] = argv[i];
++	}
++
++	return;
++}
++
++void print_usage(void)
+ {
+ 	fprintf(stderr, "usage: add [options] [--] file-spec [file-spec] [...]\n\n");
+ 	fprintf(stderr, "\t-n, --dry-run    dry run\n");
+diff --git a/examples/checkout.c b/examples/checkout.c
+index ac7b7422d..db4ad1c6a 100644
+--- a/examples/checkout.c
++++ b/examples/checkout.c
+@@ -14,7 +14,7 @@
+ 
+ #include "common.h"
+ 
+-/* Define the printf format specifier to use for size_t output */
++/* Define the printf format specifer to use for size_t output */
+ #if defined(_MSC_VER) || defined(__MINGW32__)
+ #	define PRIuZ "Iu"
+ #	define PRIxZ "Ix"
+@@ -29,6 +29,7 @@
+  * The following example demonstrates how to do checkouts with libgit2.
+  *
+  * Recognized options are :
++ *  -b: create new branch
+  *  --force: force the checkout to happen.
+  *  --[no-]progress: show checkout progress, on by default.
+  *  --perf: show performance data.
+@@ -43,11 +44,12 @@ typedef struct {
+ static void print_usage(void)
+ {
+ 	fprintf(stderr, "usage: checkout [options] <branch>\n"
+-		"Options are :\n"
+-		"  --git-dir: use the following git repository.\n"
+-		"  --force: force the checkout.\n"
+-		"  --[no-]progress: show checkout progress.\n"
+-		"  --perf: show performance data.\n");
++					"Options are :\n"
++					"  -b: create new branch"
++					"  --git-dir: use the following git repository.\n"
++					"  --force: force the checkout.\n"
++					"  --[no-]progress: show checkout progress.\n"
++					"  --perf: show performance data.\n");
+ 	exit(1);
+ }
+ 
+@@ -104,7 +106,7 @@ static void print_perf_data(const git_checkout_perfdata *perfdata, void *payload
+ {
+ 	(void)payload;
+ 	printf("perf: stat: %" PRIuZ " mkdir: %" PRIuZ " chmod: %" PRIuZ "\n",
+-	       perfdata->stat_calls, perfdata->mkdir_calls, perfdata->chmod_calls);
++		   perfdata->stat_calls, perfdata->mkdir_calls, perfdata->chmod_calls);
+ }
+ 
+ /**
+@@ -223,7 +225,7 @@ static int guess_refish(git_annotated_commit **out, git_repository *repo, const
+ 			goto next;
+ 
+ 		break;
+-next:
++	next:
+ 		free(refname);
+ 		if (error < 0 && error != GIT_ENOTFOUND)
+ 			break;
+@@ -250,6 +252,14 @@ int lg2_checkout(git_repository *repo, int argc, char **argv)
+ 	checkout_options opts;
+ 	git_repository_state_t state;
+ 	git_annotated_commit *checkout_target = NULL;
++	git_reference *new_branch_ref = NULL;
++	git_object *target_obj = NULL;
++	git_commit *target_commit = NULL;
++	git_reference *branch_ref = NULL;
++	git_reference *upstream_ref = NULL;
++
++	const char *opt_new_branch;
++
+ 	int err = 0;
+ 	const char *path = ".";
+ 
+@@ -263,28 +273,93 @@ int lg2_checkout(git_repository *repo, int argc, char **argv)
+ 		goto cleanup;
+ 	}
+ 
++	if (optional_str_arg(&opt_new_branch, &args, "-b", "")) {
++		err = git_revparse_single(&target_obj, repo, "HEAD");
++		if (err != 0) {
++			fprintf(stderr, "error: %s\n", git_error_last()->message);
++			goto cleanup;
++		}
++		err = git_commit_lookup(&target_commit, repo, git_object_id(target_obj));
++		if (err != 0) {
++			fprintf(stderr, "error looking up commit: %s\n", git_error_last()->message);
++			goto cleanup;
++		}
++		err = git_branch_create(&new_branch_ref, repo, opt_new_branch, target_commit, 0);
++		if (err != 0) {
++			fprintf(stderr, "error creating branch: %s\n", git_error_last()->message);
++			goto cleanup;
++		}
++	}
++
+ 	if (match_arg_separator(&args)) {
+ 		/**
+-		 * Try to checkout the given path
++		 * Try to checkout the given path(s)
+ 		 */
+ 
+-		fprintf(stderr, "unhandled path-based checkout\n");
+-		err = 1;
+-		goto cleanup;
++		git_checkout_options copts = GIT_CHECKOUT_OPTIONS_INIT;
++		git_strarray paths;
++
++		copts.checkout_strategy = GIT_CHECKOUT_FORCE;
++
++		paths.count = args.argc - args.pos;
++
++		if (paths.count == 0) {
++			fprintf(stderr, "error: no paths specified\n");
++			return GIT_ERROR_INVALID;
++		}
++
++		paths.strings = &args.argv[args.pos];
++		copts.paths = paths;
++
++		err = git_checkout_head(repo, &copts);
++		if (err != 0) {
++			fprintf(stderr, "error: %s\n", git_error_last()->message);
++		}
++		return err;
+ 	} else {
+ 		/**
+ 		 * Try to resolve a "refish" argument to a target libgit2 can use
+ 		 */
++
++		const char *branchname;
++		char upstreamname[1024] = "origin/";
++
+ 		if ((err = resolve_refish(&checkout_target, repo, args.argv[args.pos])) < 0 &&
+-		    (err = guess_refish(&checkout_target, repo, args.argv[args.pos])) < 0) {
++			(err = guess_refish(&checkout_target, repo, args.argv[args.pos])) < 0) {
+ 			fprintf(stderr, "failed to resolve %s: %s\n", args.argv[args.pos], git_error_last()->message);
+ 			goto cleanup;
+ 		}
+ 		err = perform_checkout_ref(repo, checkout_target, args.argv[args.pos], &opts);
++		if (err != 0) {
++			fprintf(stderr, "failed to checkout %s: %s\n", args.argv[args.pos], git_error_last()->message);
++			goto cleanup;
++		}
++	    err = git_repository_head(&branch_ref, repo);
++		if (!err && git_branch_upstream(&upstream_ref, branch_ref) == GIT_ENOTFOUND) {
++			branchname = git_reference_shorthand(branch_ref);
++			strcat(upstreamname, branchname);
++
++			err = git_branch_set_upstream(branch_ref,upstreamname);
++			if (err == GIT_ENOTFOUND) {
++				// no upstream exists
++				git_error_clear();
++				err = 0;
++			}
++			if (err != 0) {
++				fprintf(stderr, "error: %s\n", git_error_last()->message);
++				goto cleanup;
++			}
++			printf("Branch '%s' set up to track remote branch '%s'\n", branchname, upstreamname);
++		}
+ 	}
+ 
+ cleanup:
+-	git_annotated_commit_free(checkout_target);
++	git_commit_free(target_commit);
++	git_object_free(target_obj);
+ 
++	git_annotated_commit_free(checkout_target);
++	git_reference_free(new_branch_ref);
++	git_reference_free(branch_ref);
++	git_reference_free(upstream_ref);	
+ 	return err;
+ }
+diff --git a/examples/commit.c b/examples/commit.c
+index aedc1af7e..b477e7568 100644
+--- a/examples/commit.c
++++ b/examples/commit.c
+@@ -26,7 +26,7 @@
+  * This does have:
+  *
+  * - Example of performing a git commit with a comment
+- *
++ * 
+  */
+ int lg2_commit(git_repository *repo, int argc, char **argv)
+ {
+@@ -36,10 +36,10 @@ int lg2_commit(git_repository *repo, int argc, char **argv)
+ 
+ 	git_oid commit_oid,tree_oid;
+ 	git_tree *tree;
+-	git_index *index;
++	git_index *index;	
+ 	git_object *parent = NULL;
+ 	git_reference *ref = NULL;
+-	git_signature *signature;
++	git_signature *signature;	
+ 
+ 	/* Validate args */
+ 	if (argc < 3 || strcmp(opt, "-m") != 0) {
+@@ -62,25 +62,40 @@ int lg2_commit(git_repository *repo, int argc, char **argv)
+ 	check_lg2(git_index_write(index), "Could not write index", NULL);;
+ 
+ 	check_lg2(git_tree_lookup(&tree, repo, &tree_oid), "Error looking up tree", NULL);
+-
++	
+ 	check_lg2(git_signature_default(&signature, repo), "Error creating signature", NULL);
+-
+-	check_lg2(git_commit_create_v(
+-		&commit_oid,
+-		repo,
+-		"HEAD",
+-		signature,
+-		signature,
+-		NULL,
+-		comment,
+-		tree,
+-		parent ? 1 : 0, parent), "Error creating commit", NULL);
+-
++	
++	if (git_repository_state(repo) == GIT_REPOSITORY_STATE_MERGE) {
++		git_object * mergehead = NULL;
++		git_reference * mergeheadref = NULL;
++	
++		check_lg2(git_revparse_ext(&mergehead, &mergeheadref, repo, "MERGE_HEAD"), "Error looking up MERGE_HEAD", NULL);
++		check_lg2(git_commit_create_v(
++					&commit_oid,
++					repo,
++					"HEAD",
++					signature,
++					signature,
++					NULL,
++					comment,
++					tree,
++					2, parent, mergehead), "Error creating commit", NULL);
++		git_repository_state_cleanup(repo);
++	} else {
++		check_lg2(git_commit_create_v(
++			&commit_oid,
++			repo,
++			"HEAD",
++			signature,
++			signature,
++			NULL,
++			comment,
++			tree,
++			parent ? 1 : 0, parent), "Error creating commit", NULL);
++	}
+ 	git_index_free(index);
+ 	git_signature_free(signature);
+-	git_tree_free(tree);
+-	git_object_free(parent);
+-	git_reference_free(ref);
++	git_tree_free(tree);	
+ 
+ 	return error;
+ }
+diff --git a/examples/common.h b/examples/common.h
+index 901c04146..3fccf5b9c 100644
+--- a/examples/common.h
++++ b/examples/common.h
+@@ -36,7 +36,7 @@
+ #endif
+ 
+ #ifndef PRIuZ
+-/* Define the printf format specifier to use for size_t output */
++/* Define the printf format specifer to use for size_t output */
+ #if defined(_MSC_VER) || defined(__MINGW32__)
+ #	define PRIuZ "Iu"
+ #else
+@@ -45,7 +45,7 @@
+ #endif
+ 
+ #ifdef _MSC_VER
+-#define snprintf _snprintf
++#define snprintf sprintf_s
+ #define strcasecmp strcmpi
+ #endif
+ 
+@@ -74,6 +74,8 @@ extern int lg2_ls_remote(git_repository *repo, int argc, char **argv);
+ extern int lg2_merge(git_repository *repo, int argc, char **argv);
+ extern int lg2_push(git_repository *repo, int argc, char **argv);
+ extern int lg2_remote(git_repository *repo, int argc, char **argv);
++extern int lg2_reset(git_repository *repo, int argc, char **argv);
++extern int lg2_revert(git_repository *repo, int argc, char **argv);
+ extern int lg2_rev_list(git_repository *repo, int argc, char **argv);
+ extern int lg2_rev_parse(git_repository *repo, int argc, char **argv);
+ extern int lg2_show_index(git_repository *repo, int argc, char **argv);
+diff --git a/examples/lg2.c b/examples/lg2.c
+index 7946bc215..cf198cf8b 100644
+--- a/examples/lg2.c
++++ b/examples/lg2.c
+@@ -1,5 +1,13 @@
+ #include "common.h"
+ 
++#include <setjmp.h>
++
++jmp_buf git_exit__jmp_buffer;
++
++void exit(int status) {
++    longjmp(git_exit__jmp_buffer, status);
++}
++
+ /* This part is not strictly libgit2-dependent, but you can use this
+  * as a starting point for a git-like tool */
+ 
+@@ -30,6 +38,8 @@ struct {
+ 	{ "merge",        lg2_merge,        1 },
+ 	{ "push",         lg2_push,        1  },
+ 	{ "remote",       lg2_remote,       1 },
++	{ "reset",        lg2_reset,       1 },
++	{ "revert",        lg2_revert,       1 },
+ 	{ "rev-list",     lg2_rev_list,     1 },
+ 	{ "rev-parse",    lg2_rev_parse,    1 },
+ 	{ "show-index",   lg2_show_index,   0 },
+@@ -65,7 +75,7 @@ static int usage(const char *prog)
+ 	exit(EXIT_FAILURE);
+ }
+ 
+-int main(int argc, char **argv)
++__attribute__((visibility("default"))) int git_main(int argc, char **argv, int out, int err)
+ {
+ 	struct args_info args = ARGS_INFO_INIT;
+ 	git_repository *repo = NULL;
+@@ -73,6 +83,23 @@ int main(int argc, char **argv)
+ 	int return_code = 1;
+ 	size_t i;
+ 
++	fflush(stdout);
++	fflush(stderr);
++
++    int save_out = dup(fileno(stdout));
++    int save_err = dup(fileno(stderr));
++
++	dup2(out, fileno(stdout));
++	dup2(err, fileno(stderr));
++
++	int exit_code;
++	exit_code = setjmp(git_exit__jmp_buffer);
++
++	if (exit_code != 0) {
++		return_code = exit_code;
++		goto post_shutdown;
++	}
++
+ 	if (argc < 2)
+ 		usage(argv[0]);
+ 
+@@ -120,5 +147,15 @@ shutdown:
+ 	git_repository_free(repo);
+ 	git_libgit2_shutdown();
+ 
++post_shutdown:
++	fflush(stdout);
++    fflush(stderr);
++
++    dup2(save_out, fileno(stdout));
++    dup2(save_err, fileno(stderr));
++
++    close(save_out);
++    close(save_err);
++
+ 	return return_code;
+ }
+diff --git a/examples/push.c b/examples/push.c
+index bcf307607..3072eb0c2 100644
+--- a/examples/push.c
++++ b/examples/push.c
+@@ -33,7 +33,12 @@
+ int lg2_push(git_repository *repo, int argc, char **argv) {
+ 	git_push_options options;
+ 	git_remote* remote = NULL;
+-	char *refspec = "refs/heads/master";
++	char *refspec = NULL;
++	git_reference* head_ref;
++	
++	git_reference_lookup(&head_ref, repo, "HEAD");
++	refspec = git_reference_symbolic_target(head_ref);
++
+ 	const git_strarray refspecs = {
+ 		&refspec,
+ 		1
+@@ -52,5 +57,6 @@ int lg2_push(git_repository *repo, int argc, char **argv) {
+ 	check_lg2(git_remote_push(remote, &refspecs, &options), "Error pushing", NULL);
+ 
+ 	printf("pushed\n");
++	git_reference_free(head_ref);
+ 	return 0;
+ }
+diff --git a/examples/reset.c b/examples/reset.c
+new file mode 100644
+index 000000000..7021e137d
+--- /dev/null
++++ b/examples/reset.c
+@@ -0,0 +1,69 @@
++/*
++ * libgit2 "reset" example - Reset current HEAD to the specified state
++ *
++ * Written by the libgit2 contributors
++ *
++ * To the extent possible under law, the author(s) have dedicated all copyright
++ * and related and neighboring rights to this software to the public domain
++ * worldwide. This software is distributed without any warranty.
++ *
++ * You should have received a copy of the CC0 Public Domain Dedication along
++ * with this software. If not, see
++ * <http://creativecommons.org/publicdomain/zero/1.0/>.
++ */
++
++#include "common.h"
++
++/**
++ * The following example demonstrates how to reset libgit2.
++ *
++ * It will use the repository in the current working directory, and reset to the specified revspec
++ *
++ * Recognized options are:
++ *   --hard: reset hard
++ * 	 --soft: reset soft
++ */
++
++int lg2_reset(git_repository *repo, int argc, char **argv)
++{
++	git_checkout_options checkout_opts = GIT_CHECKOUT_OPTIONS_INIT;
++	git_commit *target_commit = NULL;
++	git_revspec revspec;
++	git_reset_t reset_type = GIT_RESET_MIXED;
++	int err;
++
++	err = git_revparse(&revspec, repo, argv[argc - 1]);
++	if (err != 0)
++	{
++		fprintf(stderr, "failed to lookup rev: %s\n", git_error_last()->message);
++		goto cleanup;
++	}
++	err = git_commit_lookup(&target_commit, repo, revspec.from);
++	if (err != 0)
++	{
++		fprintf(stderr, "failed to lookup commit: %s\n", git_error_last()->message);
++		goto cleanup;
++	}
++
++	if (argc > 1)
++	{
++		if (!strcmp(argv[argc - 2], "--hard"))
++		{
++			reset_type = GIT_RESET_HARD;
++		}
++		else if (!strcmp(argv[argc - 2], "--soft"))
++		{
++			reset_type = GIT_RESET_SOFT;
++		}
++	}
++	err = git_reset(repo, target_commit, reset_type, &checkout_opts);
++	if (err != 0)
++	{
++		fprintf(stderr, "reset error: %s\n", git_error_last()->message);
++		goto cleanup;
++	}
++cleanup:
++	git_commit_free(target_commit);
++
++	return 0;
++}
+diff --git a/examples/revert.c b/examples/revert.c
+new file mode 100644
+index 000000000..4c488f6b4
+--- /dev/null
++++ b/examples/revert.c
+@@ -0,0 +1,53 @@
++/*
++ * libgit2 "revert" example - shows how to git revert
++ *
++ * Written by the libgit2 contributors
++ *
++ * To the extent possible under law, the author(s) have dedicated all copyright
++ * and related and neighboring rights to this software to the public domain
++ * worldwide. This software is distributed without any warranty.
++ *
++ * You should have received a copy of the CC0 Public Domain Dedication along
++ * with this software. If not, see
++ * <http://creativecommons.org/publicdomain/zero/1.0/>.
++ */
++
++#include "common.h"
++
++/**
++ * This example demonstrates the libgit2 revert APIs to roughly
++ * simulate `git revert`.
++ *
++ * This does not have:
++ *
++ * - Robust error handling
++ * - Most of the `git revert` options
++ * 
++ */
++int lg2_revert(git_repository *repo, int argc, char **argv)
++{
++    git_revert_options revert_options;
++    git_commit *target_commit = NULL;
++	git_revspec revspec;
++	int err = 0;
++
++    check_lg2(git_revert_options_init(&revert_options, GIT_REVERT_OPTIONS_VERSION), git_error_last()->message, NULL);
++
++    err = git_revparse(&revspec, repo, argv[argc - 1]);
++	if (err != 0)
++	{
++		fprintf(stderr, "failed to lookup rev: %s\n", git_error_last()->message);
++		goto cleanup;
++	}
++	err = git_commit_lookup(&target_commit, repo, revspec.from);
++	if (err != 0)
++	{
++		fprintf(stderr, "failed to lookup commit: %s\n", git_error_last()->message);
++		goto cleanup;
++	}
++    err = git_revert(repo, target_commit, &revert_options);
++cleanup:
++	git_commit_free(target_commit);
++
++	return err;
++}
+diff --git a/examples/stash.c b/examples/stash.c
+index 8142439c7..71177ce63 100644
+--- a/examples/stash.c
++++ b/examples/stash.c
+@@ -20,7 +20,8 @@ enum subcmd {
+ 	SUBCMD_APPLY,
+ 	SUBCMD_LIST,
+ 	SUBCMD_POP,
+-	SUBCMD_PUSH
++	SUBCMD_PUSH,
++	SUBCMD_DROP,
+ };
+ 
+ struct opts {
+@@ -34,7 +35,7 @@ static void usage(const char *fmt, ...)
+ 	va_list ap;
+ 
+ 	fputs("usage: git stash list\n", stderr);
+-	fputs("   or: git stash ( pop | apply )\n", stderr);
++	fputs("   or: git stash ( pop | apply | drop )\n", stderr);
+ 	fputs("   or: git stash [push]\n", stderr);
+ 	fputs("\n", stderr);
+ 
+@@ -58,6 +59,8 @@ static void parse_subcommand(struct opts *opts, int argc, char *argv[])
+ 		cmd = SUBCMD_POP;
+ 	} else if (!strcmp(arg, "push")) {
+ 		cmd = SUBCMD_PUSH;
++	} else if (!strcmp(arg, "drop")) {
++		cmd = SUBCMD_DROP;
+ 	} else {
+ 		usage("invalid command %s", arg);
+ 		return;
+@@ -70,10 +73,9 @@ static void parse_subcommand(struct opts *opts, int argc, char *argv[])
+ 
+ static int cmd_apply(git_repository *repo, struct opts *opts)
+ {
+-	if (opts->argc)
+-		usage("apply does not accept any parameters");
+-
+-	check_lg2(git_stash_apply(repo, 0, NULL),
++	unsigned long index = strtoul(opts->argc ? opts->argv[2] : "0", NULL, 10);
++	printf("Applying index: %lu\n", index);
++	check_lg2(git_stash_apply(repo, index, NULL),
+ 		  "Unable to apply stash", NULL);
+ 
+ 	return 0;
+@@ -123,6 +125,18 @@ static int cmd_push(git_repository *repo, struct opts *opts)
+ 	return 0;
+ }
+ 
++static int cmd_drop(git_repository* repo, struct opts* opts)
++{
++	unsigned long index = strtoul(opts->argc ? opts->argv[2] : "0", NULL, 10);
++	printf("Dropping index: %lu\n", index);
++	check_lg2(git_stash_drop(repo, index),
++		"Unable to drop stash", NULL);
++
++	printf("Dropped refs/stash@{%lu}\n", index);
++
++	return 0;
++}
++
+ static int cmd_pop(git_repository *repo, struct opts *opts)
+ {
+ 	if (opts->argc)
+@@ -151,6 +165,8 @@ int lg2_stash(git_repository *repo, int argc, char *argv[])
+ 			return cmd_push(repo, &opts);
+ 		case SUBCMD_POP:
+ 			return cmd_pop(repo, &opts);
++		case SUBCMD_DROP:
++			return cmd_drop(repo, &opts);
+ 	}
+ 
+ 	return -1;
+diff --git a/examples/status.c b/examples/status.c
+index e659efb05..4b117b235 100644
+--- a/examples/status.c
++++ b/examples/status.c
+@@ -32,56 +32,61 @@
+  * - A sample status formatter that matches the default "long" format
+  *   from `git status`
+  * - A sample status formatter that matches the "short" format
++ * - Count of commits ahead/behind the remote upstream
+  */
+ 
+-enum {
+-	FORMAT_DEFAULT   = 0,
+-	FORMAT_LONG      = 1,
+-	FORMAT_SHORT     = 2,
+-	FORMAT_PORCELAIN = 3
++enum
++{
++    FORMAT_DEFAULT = 0,
++    FORMAT_LONG = 1,
++    FORMAT_SHORT = 2,
++    FORMAT_PORCELAIN = 3,
+ };
+ 
+ #define MAX_PATHSPEC 8
+ 
+-struct status_opts {
+-	git_status_options statusopt;
+-	char *repodir;
+-	char *pathspec[MAX_PATHSPEC];
+-	int npaths;
+-	int format;
+-	int zterm;
+-	int showbranch;
+-	int showsubmod;
+-	int repeat;
++struct status_opts
++{
++    git_status_options statusopt;
++    char *repodir;
++    char *pathspec[MAX_PATHSPEC];
++    int npaths;
++    int format;
++    int zterm;
++    int showbranch;
++    int showsubmod;
++    int repeat;
+ };
+ 
+ static void parse_opts(struct status_opts *o, int argc, char *argv[]);
+ static void show_branch(git_repository *repo, int format);
++static void show_ahead_behind(git_repository *repo);
++static void print_conflicts(git_repository *repo);
+ static void print_long(git_status_list *status);
+ static void print_short(git_repository *repo, git_status_list *status);
+ static int print_submod(git_submodule *sm, const char *name, void *payload);
+ 
+ int lg2_status(git_repository *repo, int argc, char *argv[])
+ {
+-	git_status_list *status;
+-	struct status_opts o = { GIT_STATUS_OPTIONS_INIT, "." };
++    git_status_list *status;
++    struct status_opts o = {GIT_STATUS_OPTIONS_INIT, "."};
+ 
+-	o.statusopt.show  = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
+-	o.statusopt.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED |
+-		GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX |
+-		GIT_STATUS_OPT_SORT_CASE_SENSITIVELY;
++    o.statusopt.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
++    o.statusopt.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED |
++                        GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX |
++                        GIT_STATUS_OPT_SORT_CASE_SENSITIVELY;
+ 
+-	parse_opts(&o, argc, argv);
++    parse_opts(&o, argc, argv);
+ 
+-	if (git_repository_is_bare(repo))
+-		fatal("Cannot report status on bare repository",
+-			git_repository_path(repo));
++    if (git_repository_is_bare(repo))
++        fatal("Cannot report status on bare repository",
++              git_repository_path(repo));
+ 
+ show_status:
+-	if (o.repeat)
+-		printf("\033[H\033[2J");
++    if (o.repeat)
++        printf("\033[H\033[2J");
+ 
+-	/**
++    /**
+ 	 * Run status on the repository
+ 	 *
+ 	 * We use `git_status_list_new()` to generate a list of status
+@@ -94,31 +99,37 @@ show_status:
+ 	 * callback for each entry. The latter gives you more control
+ 	 * about what results are presented.
+ 	 */
+-	check_lg2(git_status_list_new(&status, repo, &o.statusopt),
+-		"Could not get status", NULL);
++    check_lg2(git_status_list_new(&status, repo, &o.statusopt),
++              "Could not get status", NULL);
+ 
+-	if (o.showbranch)
+-		show_branch(repo, o.format);
++    if (o.showbranch)
++        show_branch(repo, o.format);
+ 
+-	if (o.showsubmod) {
+-		int submod_count = 0;
+-		check_lg2(git_submodule_foreach(repo, print_submod, &submod_count),
+-			"Cannot iterate submodules", o.repodir);
+-	}
++    show_ahead_behind(repo);
+ 
+-	if (o.format == FORMAT_LONG)
+-		print_long(status);
+-	else
+-		print_short(repo, status);
++    if (o.showsubmod)
++    {
++        int submod_count = 0;
++        check_lg2(git_submodule_foreach(repo, print_submod, &submod_count),
++                  "Cannot iterate submodules", o.repodir);
++    }
+ 
+-	git_status_list_free(status);
++    if (o.format == FORMAT_LONG)
++        print_long(status);
++    else
++        print_short(repo, status);
+ 
+-	if (o.repeat) {
+-		sleep(o.repeat);
+-		goto show_status;
+-	}
++	print_conflicts(repo);
++
++    git_status_list_free(status);
+ 
+-	return 0;
++    if (o.repeat)
++    {
++        sleep(o.repeat);
++        goto show_status;
++    }
++
++    return 0;
+ }
+ 
+ /**
+@@ -127,181 +138,261 @@ show_status:
+  */
+ static void show_branch(git_repository *repo, int format)
+ {
+-	int error = 0;
+-	const char *branch = NULL;
+-	git_reference *head = NULL;
+-
+-	error = git_repository_head(&head, repo);
+-
+-	if (error == GIT_EUNBORNBRANCH || error == GIT_ENOTFOUND)
+-		branch = NULL;
+-	else if (!error) {
+-		branch = git_reference_shorthand(head);
+-	} else
+-		check_lg2(error, "failed to get current branch", NULL);
+-
+-	if (format == FORMAT_LONG)
+-		printf("# On branch %s\n",
+-			branch ? branch : "Not currently on any branch.");
+-	else
+-		printf("## %s\n", branch ? branch : "HEAD (no branch)");
+-
+-	git_reference_free(head);
++    int error = 0;
++    const char *branch = NULL;
++    git_reference *head = NULL;
++
++    error = git_repository_head(&head, repo);
++
++    if (error == GIT_EUNBORNBRANCH || error == GIT_ENOTFOUND)
++        branch = NULL;
++    else if (!error)
++    {
++        branch = git_reference_shorthand(head);
++    }
++    else
++        check_lg2(error, "failed to get current branch", NULL);
++
++    if (format == FORMAT_LONG)
++        printf("# On branch %s\n",
++               branch ? branch : "Not currently on any branch.");
++    else
++        printf("## %s\n", branch ? branch : "HEAD (no branch)");
++
++    git_reference_free(head);
++}
++
++static void show_ahead_behind(git_repository *repo)
++{
++    git_reference *upstream = NULL;
++    git_reference *head_ref = NULL;
++    size_t ahead;
++    size_t behind;    
++    int err;
++
++    err = git_repository_head(&head_ref, repo);
++    if (err != 0)
++    {
++        fprintf(stderr, "error: %s\n", git_error_last()->message);
++        goto cleanup;
++    }
++
++    err = git_branch_upstream(&upstream, head_ref);
++    if (err != 0)
++    {
++        goto cleanup;
++    }
++    err = git_graph_ahead_behind(&ahead, &behind, repo, git_reference_target(head_ref), git_reference_target(upstream));
++    if (err != 0)
++    {
++        fprintf(stderr, "error: %s\n", git_error_last()->message);
++        goto cleanup;
++    }
++    if (ahead > 0 || behind > 0) {
++        printf("# Your branch is ahead by %d, behind by %d commits.\n", ahead, behind);
++    }
++cleanup:
++    git_reference_free(head_ref);
++    git_reference_free(upstream);
+ }
+ 
+ /**
+- * This function print out an output similar to git's status command
+- * in long form, including the command-line hints.
++ * Simple printing of conflicts
+  */
+-static void print_long(git_status_list *status)
+-{
+-	size_t i, maxi = git_status_list_entrycount(status);
+-	const git_status_entry *s;
+-	int header = 0, changes_in_index = 0;
+-	int changed_in_workdir = 0, rm_in_workdir = 0;
+-	const char *old_path, *new_path;
+-
+-	/** Print index changes. */
+-
+-	for (i = 0; i < maxi; ++i) {
+-		char *istatus = NULL;
+-
+-		s = git_status_byindex(status, i);
+-
+-		if (s->status == GIT_STATUS_CURRENT)
+-			continue;
+-
+-		if (s->status & GIT_STATUS_WT_DELETED)
+-			rm_in_workdir = 1;
+-
+-		if (s->status & GIT_STATUS_INDEX_NEW)
+-			istatus = "new file: ";
+-		if (s->status & GIT_STATUS_INDEX_MODIFIED)
+-			istatus = "modified: ";
+-		if (s->status & GIT_STATUS_INDEX_DELETED)
+-			istatus = "deleted:  ";
+-		if (s->status & GIT_STATUS_INDEX_RENAMED)
+-			istatus = "renamed:  ";
+-		if (s->status & GIT_STATUS_INDEX_TYPECHANGE)
+-			istatus = "typechange:";
+-
+-		if (istatus == NULL)
+-			continue;
+-
+-		if (!header) {
+-			printf("# Changes to be committed:\n");
+-			printf("#   (use \"git reset HEAD <file>...\" to unstage)\n");
+-			printf("#\n");
+-			header = 1;
++static void print_conflicts(git_repository *repo) {
++	git_index *index = NULL;
++	git_repository_index(&index, repo);
++
++	if(git_index_has_conflicts(index)) {
++		git_index_conflict_iterator *conflicts;
++		const git_index_entry *ancestor = NULL;
++		const git_index_entry *our = NULL;
++		const git_index_entry *their = NULL;
++		int err = 0;
++
++		git_index_conflict_iterator_new(&conflicts, index);
++
++		while ((err = git_index_conflict_next(&ancestor, &our, &their, conflicts)) == 0) {
++			printf("conflict: a:%s o:%s t:%s\n",
++					ancestor!=NULL ? ancestor->path : "NULL",
++					our!=NULL ? our->path : "NULL",
++					their!=NULL ? their->path : "NULL");
+ 		}
+ 
+-		old_path = s->head_to_index->old_file.path;
+-		new_path = s->head_to_index->new_file.path;
+-
+-		if (old_path && new_path && strcmp(old_path, new_path))
+-			printf("#\t%s  %s -> %s\n", istatus, old_path, new_path);
+-		else
+-			printf("#\t%s  %s\n", istatus, old_path ? old_path : new_path);
+-	}
++		if (err != GIT_ITEROVER) {
++			fprintf(stderr, "error iterating conflicts\n");
++		}
+ 
+-	if (header) {
+-		changes_in_index = 1;
+-		printf("#\n");
++		git_index_conflict_iterator_free(conflicts);
+ 	}
+-	header = 0;
+-
+-	/** Print workdir changes to tracked files. */
+-
+-	for (i = 0; i < maxi; ++i) {
+-		char *wstatus = NULL;
+-
+-		s = git_status_byindex(status, i);
++	git_index_free(index);
++}
+ 
+-		/**
++/**
++ * This function print out an output similar to git's status command
++ * in long form, including the command-line hints.
++ */
++static void print_long(git_status_list *status)
++{
++    size_t i, maxi = git_status_list_entrycount(status);
++    const git_status_entry *s;
++    int header = 0, changes_in_index = 0;
++    int changed_in_workdir = 0, rm_in_workdir = 0;
++    const char *old_path, *new_path;
++
++    /** Print index changes. */
++
++    for (i = 0; i < maxi; ++i)
++    {
++        char *istatus = NULL;
++
++        s = git_status_byindex(status, i);
++
++        if (s->status == GIT_STATUS_CURRENT)
++            continue;
++
++        if (s->status & GIT_STATUS_WT_DELETED)
++            rm_in_workdir = 1;
++
++        if (s->status & GIT_STATUS_INDEX_NEW)
++            istatus = "new file: ";
++        if (s->status & GIT_STATUS_INDEX_MODIFIED)
++            istatus = "modified: ";
++        if (s->status & GIT_STATUS_INDEX_DELETED)
++            istatus = "deleted:  ";
++        if (s->status & GIT_STATUS_INDEX_RENAMED)
++            istatus = "renamed:  ";
++        if (s->status & GIT_STATUS_INDEX_TYPECHANGE)
++            istatus = "typechange:";
++
++        if (istatus == NULL)
++            continue;
++
++        if (!header)
++        {
++            printf("# Changes to be committed:\n");
++            printf("#   (use \"git reset HEAD <file>...\" to unstage)\n");
++            printf("#\n");
++            header = 1;
++        }
++
++        old_path = s->head_to_index->old_file.path;
++        new_path = s->head_to_index->new_file.path;
++
++        if (old_path && new_path && strcmp(old_path, new_path))
++            printf("#\t%s  %s -> %s\n", istatus, old_path, new_path);
++        else
++            printf("#\t%s  %s\n", istatus, old_path ? old_path : new_path);
++    }
++
++    if (header)
++    {
++        changes_in_index = 1;
++        printf("#\n");
++    }
++    header = 0;
++
++    /** Print workdir changes to tracked files. */
++
++    for (i = 0; i < maxi; ++i)
++    {
++        char *wstatus = NULL;
++
++        s = git_status_byindex(status, i);
++
++        /**
+ 		 * With `GIT_STATUS_OPT_INCLUDE_UNMODIFIED` (not used in this example)
+ 		 * `index_to_workdir` may not be `NULL` even if there are
+ 		 * no differences, in which case it will be a `GIT_DELTA_UNMODIFIED`.
+ 		 */
+-		if (s->status == GIT_STATUS_CURRENT || s->index_to_workdir == NULL)
+-			continue;
+-
+-		/** Print out the output since we know the file has some changes */
+-		if (s->status & GIT_STATUS_WT_MODIFIED)
+-			wstatus = "modified: ";
+-		if (s->status & GIT_STATUS_WT_DELETED)
+-			wstatus = "deleted:  ";
+-		if (s->status & GIT_STATUS_WT_RENAMED)
+-			wstatus = "renamed:  ";
+-		if (s->status & GIT_STATUS_WT_TYPECHANGE)
+-			wstatus = "typechange:";
+-
+-		if (wstatus == NULL)
+-			continue;
+-
+-		if (!header) {
+-			printf("# Changes not staged for commit:\n");
+-			printf("#   (use \"git add%s <file>...\" to update what will be committed)\n", rm_in_workdir ? "/rm" : "");
+-			printf("#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n");
+-			printf("#\n");
+-			header = 1;
+-		}
+-
+-		old_path = s->index_to_workdir->old_file.path;
+-		new_path = s->index_to_workdir->new_file.path;
+-
+-		if (old_path && new_path && strcmp(old_path, new_path))
+-			printf("#\t%s  %s -> %s\n", wstatus, old_path, new_path);
+-		else
+-			printf("#\t%s  %s\n", wstatus, old_path ? old_path : new_path);
+-	}
+-
+-	if (header) {
+-		changed_in_workdir = 1;
+-		printf("#\n");
+-	}
+-
+-	/** Print untracked files. */
+-
+-	header = 0;
+-
+-	for (i = 0; i < maxi; ++i) {
+-		s = git_status_byindex(status, i);
+-
+-		if (s->status == GIT_STATUS_WT_NEW) {
+-
+-			if (!header) {
+-				printf("# Untracked files:\n");
+-				printf("#   (use \"git add <file>...\" to include in what will be committed)\n");
+-				printf("#\n");
+-				header = 1;
+-			}
+-
+-			printf("#\t%s\n", s->index_to_workdir->old_file.path);
+-		}
+-	}
+-
+-	header = 0;
+-
+-	/** Print ignored files. */
+-
+-	for (i = 0; i < maxi; ++i) {
+-		s = git_status_byindex(status, i);
+-
+-		if (s->status == GIT_STATUS_IGNORED) {
+-
+-			if (!header) {
+-				printf("# Ignored files:\n");
+-				printf("#   (use \"git add -f <file>...\" to include in what will be committed)\n");
+-				printf("#\n");
+-				header = 1;
+-			}
+-
+-			printf("#\t%s\n", s->index_to_workdir->old_file.path);
+-		}
+-	}
+-
+-	if (!changes_in_index && changed_in_workdir)
+-		printf("no changes added to commit (use \"git add\" and/or \"git commit -a\")\n");
++        if (s->status == GIT_STATUS_CURRENT || s->index_to_workdir == NULL)
++            continue;
++
++        /** Print out the output since we know the file has some changes */
++        if (s->status & GIT_STATUS_WT_MODIFIED)
++            wstatus = "modified: ";
++        if (s->status & GIT_STATUS_WT_DELETED)
++            wstatus = "deleted:  ";
++        if (s->status & GIT_STATUS_WT_RENAMED)
++            wstatus = "renamed:  ";
++        if (s->status & GIT_STATUS_WT_TYPECHANGE)
++            wstatus = "typechange:";
++
++        if (wstatus == NULL)
++            continue;
++
++        if (!header)
++        {
++            printf("# Changes not staged for commit:\n");
++            printf("#   (use \"git add%s <file>...\" to update what will be committed)\n", rm_in_workdir ? "/rm" : "");
++            printf("#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n");
++            printf("#\n");
++            header = 1;
++        }
++
++        old_path = s->index_to_workdir->old_file.path;
++        new_path = s->index_to_workdir->new_file.path;
++
++        if (old_path && new_path && strcmp(old_path, new_path))
++            printf("#\t%s  %s -> %s\n", wstatus, old_path, new_path);
++        else
++            printf("#\t%s  %s\n", wstatus, old_path ? old_path : new_path);
++    }
++
++    if (header)
++    {
++        changed_in_workdir = 1;
++        printf("#\n");
++    }
++
++    /** Print untracked files. */
++
++    header = 0;
++
++    for (i = 0; i < maxi; ++i)
++    {
++        s = git_status_byindex(status, i);
++
++        if (s->status == GIT_STATUS_WT_NEW)
++        {
++
++            if (!header)
++            {
++                printf("# Untracked files:\n");
++                printf("#   (use \"git add <file>...\" to include in what will be committed)\n");
++                printf("#\n");
++                header = 1;
++            }
++
++            printf("#\t%s\n", s->index_to_workdir->old_file.path);
++        }
++    }
++
++    header = 0;
++
++    /** Print ignored files. */
++
++    for (i = 0; i < maxi; ++i)
++    {
++        s = git_status_byindex(status, i);
++
++        if (s->status == GIT_STATUS_IGNORED)
++        {
++
++            if (!header)
++            {
++                printf("# Ignored files:\n");
++                printf("#   (use \"git add -f <file>...\" to include in what will be committed)\n");
++                printf("#\n");
++                header = 1;
++            }
++
++            printf("#\t%s\n", s->index_to_workdir->old_file.path);
++        }
++    }
++
++    if (!changes_in_index && changed_in_workdir)
++        printf("no changes added to commit (use \"git add\" and/or \"git commit -a\")\n");
+ }
+ 
+ /**
+@@ -310,126 +401,136 @@ static void print_long(git_status_list *status)
+  */
+ static void print_short(git_repository *repo, git_status_list *status)
+ {
+-	size_t i, maxi = git_status_list_entrycount(status);
+-	const git_status_entry *s;
+-	char istatus, wstatus;
+-	const char *extra, *a, *b, *c;
+-
+-	for (i = 0; i < maxi; ++i) {
+-		s = git_status_byindex(status, i);
+-
+-		if (s->status == GIT_STATUS_CURRENT)
+-			continue;
+-
+-		a = b = c = NULL;
+-		istatus = wstatus = ' ';
+-		extra = "";
+-
+-		if (s->status & GIT_STATUS_INDEX_NEW)
+-			istatus = 'A';
+-		if (s->status & GIT_STATUS_INDEX_MODIFIED)
+-			istatus = 'M';
+-		if (s->status & GIT_STATUS_INDEX_DELETED)
+-			istatus = 'D';
+-		if (s->status & GIT_STATUS_INDEX_RENAMED)
+-			istatus = 'R';
+-		if (s->status & GIT_STATUS_INDEX_TYPECHANGE)
+-			istatus = 'T';
+-
+-		if (s->status & GIT_STATUS_WT_NEW) {
+-			if (istatus == ' ')
+-				istatus = '?';
+-			wstatus = '?';
+-		}
+-		if (s->status & GIT_STATUS_WT_MODIFIED)
+-			wstatus = 'M';
+-		if (s->status & GIT_STATUS_WT_DELETED)
+-			wstatus = 'D';
+-		if (s->status & GIT_STATUS_WT_RENAMED)
+-			wstatus = 'R';
+-		if (s->status & GIT_STATUS_WT_TYPECHANGE)
+-			wstatus = 'T';
+-
+-		if (s->status & GIT_STATUS_IGNORED) {
+-			istatus = '!';
+-			wstatus = '!';
+-		}
+-
+-		if (istatus == '?' && wstatus == '?')
+-			continue;
+-
+-		/**
++    size_t i, maxi = git_status_list_entrycount(status);
++    const git_status_entry *s;
++    char istatus, wstatus;
++    const char *extra, *a, *b, *c;
++
++    for (i = 0; i < maxi; ++i)
++    {
++        s = git_status_byindex(status, i);
++
++        if (s->status == GIT_STATUS_CURRENT)
++            continue;
++
++        a = b = c = NULL;
++        istatus = wstatus = ' ';
++        extra = "";
++
++        if (s->status & GIT_STATUS_INDEX_NEW)
++            istatus = 'A';
++        if (s->status & GIT_STATUS_INDEX_MODIFIED)
++            istatus = 'M';
++        if (s->status & GIT_STATUS_INDEX_DELETED)
++            istatus = 'D';
++        if (s->status & GIT_STATUS_INDEX_RENAMED)
++            istatus = 'R';
++        if (s->status & GIT_STATUS_INDEX_TYPECHANGE)
++            istatus = 'T';
++
++        if (s->status & GIT_STATUS_WT_NEW)
++        {
++            if (istatus == ' ')
++                istatus = '?';
++            wstatus = '?';
++        }
++        if (s->status & GIT_STATUS_WT_MODIFIED)
++            wstatus = 'M';
++        if (s->status & GIT_STATUS_WT_DELETED)
++            wstatus = 'D';
++        if (s->status & GIT_STATUS_WT_RENAMED)
++            wstatus = 'R';
++        if (s->status & GIT_STATUS_WT_TYPECHANGE)
++            wstatus = 'T';
++
++        if (s->status & GIT_STATUS_IGNORED)
++        {
++            istatus = '!';
++            wstatus = '!';
++        }
++
++        if (istatus == '?' && wstatus == '?')
++            continue;
++
++        /**
+ 		 * A commit in a tree is how submodules are stored, so
+ 		 * let's go take a look at its status.
+ 		 */
+-		if (s->index_to_workdir &&
+-			s->index_to_workdir->new_file.mode == GIT_FILEMODE_COMMIT)
+-		{
+-			unsigned int smstatus = 0;
+-
+-			if (!git_submodule_status(&smstatus, repo, s->index_to_workdir->new_file.path,
+-						  GIT_SUBMODULE_IGNORE_UNSPECIFIED)) {
+-				if (smstatus & GIT_SUBMODULE_STATUS_WD_MODIFIED)
+-					extra = " (new commits)";
+-				else if (smstatus & GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED)
+-					extra = " (modified content)";
+-				else if (smstatus & GIT_SUBMODULE_STATUS_WD_WD_MODIFIED)
+-					extra = " (modified content)";
+-				else if (smstatus & GIT_SUBMODULE_STATUS_WD_UNTRACKED)
+-					extra = " (untracked content)";
+-			}
+-		}
+-
+-		/**
++        if (s->index_to_workdir &&
++            s->index_to_workdir->new_file.mode == GIT_FILEMODE_COMMIT)
++        {
++            unsigned int smstatus = 0;
++
++            if (!git_submodule_status(&smstatus, repo, s->index_to_workdir->new_file.path,
++                                      GIT_SUBMODULE_IGNORE_UNSPECIFIED))
++            {
++                if (smstatus & GIT_SUBMODULE_STATUS_WD_MODIFIED)
++                    extra = " (new commits)";
++                else if (smstatus & GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED)
++                    extra = " (modified content)";
++                else if (smstatus & GIT_SUBMODULE_STATUS_WD_WD_MODIFIED)
++                    extra = " (modified content)";
++                else if (smstatus & GIT_SUBMODULE_STATUS_WD_UNTRACKED)
++                    extra = " (untracked content)";
++            }
++        }
++
++        /**
+ 		 * Now that we have all the information, format the output.
+ 		 */
+ 
+-		if (s->head_to_index) {
+-			a = s->head_to_index->old_file.path;
+-			b = s->head_to_index->new_file.path;
+-		}
+-		if (s->index_to_workdir) {
+-			if (!a)
+-				a = s->index_to_workdir->old_file.path;
+-			if (!b)
+-				b = s->index_to_workdir->old_file.path;
+-			c = s->index_to_workdir->new_file.path;
+-		}
+-
+-		if (istatus == 'R') {
+-			if (wstatus == 'R')
+-				printf("%c%c %s %s %s%s\n", istatus, wstatus, a, b, c, extra);
+-			else
+-				printf("%c%c %s %s%s\n", istatus, wstatus, a, b, extra);
+-		} else {
+-			if (wstatus == 'R')
+-				printf("%c%c %s %s%s\n", istatus, wstatus, a, c, extra);
+-			else
+-				printf("%c%c %s%s\n", istatus, wstatus, a, extra);
+-		}
+-	}
+-
+-	for (i = 0; i < maxi; ++i) {
+-		s = git_status_byindex(status, i);
+-
+-		if (s->status == GIT_STATUS_WT_NEW)
+-			printf("?? %s\n", s->index_to_workdir->old_file.path);
+-	}
++        if (s->head_to_index)
++        {
++            a = s->head_to_index->old_file.path;
++            b = s->head_to_index->new_file.path;
++        }
++        if (s->index_to_workdir)
++        {
++            if (!a)
++                a = s->index_to_workdir->old_file.path;
++            if (!b)
++                b = s->index_to_workdir->old_file.path;
++            c = s->index_to_workdir->new_file.path;
++        }
++
++        if (istatus == 'R')
++        {
++            if (wstatus == 'R')
++                printf("%c%c %s %s %s%s\n", istatus, wstatus, a, b, c, extra);
++            else
++                printf("%c%c %s %s%s\n", istatus, wstatus, a, b, extra);
++        }
++        else
++        {
++            if (wstatus == 'R')
++                printf("%c%c %s %s%s\n", istatus, wstatus, a, c, extra);
++            else
++                printf("%c%c %s%s\n", istatus, wstatus, a, extra);
++        }
++    }
++
++    for (i = 0; i < maxi; ++i)
++    {
++        s = git_status_byindex(status, i);
++
++        if (s->status == GIT_STATUS_WT_NEW)
++            printf("?? %s\n", s->index_to_workdir->old_file.path);
++    }
+ }
+ 
+ static int print_submod(git_submodule *sm, const char *name, void *payload)
+ {
+-	int *count = payload;
+-	(void)name;
++    int *count = payload;
++    (void)name;
+ 
+-	if (*count == 0)
+-		printf("# Submodules\n");
+-	(*count)++;
++    if (*count == 0)
++        printf("# Submodules\n");
++    (*count)++;
+ 
+-	printf("# - submodule '%s' at %s\n",
+-		git_submodule_name(sm), git_submodule_path(sm));
++    printf("# - submodule '%s' at %s\n",
++           git_submodule_name(sm), git_submodule_path(sm));
+ 
+-	return 0;
++    return 0;
+ }
+ 
+ /**
+@@ -437,62 +538,66 @@ static int print_submod(git_submodule *sm, const char *name, void *payload)
+  */
+ static void parse_opts(struct status_opts *o, int argc, char *argv[])
+ {
+-	struct args_info args = ARGS_INFO_INIT;
+-
+-	for (args.pos = 1; args.pos < argc; ++args.pos) {
+-		char *a = argv[args.pos];
+-
+-		if (a[0] != '-') {
+-			if (o->npaths < MAX_PATHSPEC)
+-				o->pathspec[o->npaths++] = a;
+-			else
+-				fatal("Example only supports a limited pathspec", NULL);
+-		}
+-		else if (!strcmp(a, "-s") || !strcmp(a, "--short"))
+-			o->format = FORMAT_SHORT;
+-		else if (!strcmp(a, "--long"))
+-			o->format = FORMAT_LONG;
+-		else if (!strcmp(a, "--porcelain"))
+-			o->format = FORMAT_PORCELAIN;
+-		else if (!strcmp(a, "-b") || !strcmp(a, "--branch"))
+-			o->showbranch = 1;
+-		else if (!strcmp(a, "-z")) {
+-			o->zterm = 1;
+-			if (o->format == FORMAT_DEFAULT)
+-				o->format = FORMAT_PORCELAIN;
+-		}
+-		else if (!strcmp(a, "--ignored"))
+-			o->statusopt.flags |= GIT_STATUS_OPT_INCLUDE_IGNORED;
+-		else if (!strcmp(a, "-uno") ||
+-				 !strcmp(a, "--untracked-files=no"))
+-			o->statusopt.flags &= ~GIT_STATUS_OPT_INCLUDE_UNTRACKED;
+-		else if (!strcmp(a, "-unormal") ||
+-				 !strcmp(a, "--untracked-files=normal"))
+-			o->statusopt.flags |= GIT_STATUS_OPT_INCLUDE_UNTRACKED;
+-		else if (!strcmp(a, "-uall") ||
+-				 !strcmp(a, "--untracked-files=all"))
+-			o->statusopt.flags |= GIT_STATUS_OPT_INCLUDE_UNTRACKED |
+-				GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS;
+-		else if (!strcmp(a, "--ignore-submodules=all"))
+-			o->statusopt.flags |= GIT_STATUS_OPT_EXCLUDE_SUBMODULES;
+-		else if (!strncmp(a, "--git-dir=", strlen("--git-dir=")))
+-			o->repodir = a + strlen("--git-dir=");
+-		else if (!strcmp(a, "--repeat"))
+-			o->repeat = 10;
+-		else if (match_int_arg(&o->repeat, &args, "--repeat", 0))
+-			/* okay */;
+-		else if (!strcmp(a, "--list-submodules"))
+-			o->showsubmod = 1;
+-		else
+-			check_lg2(-1, "Unsupported option", a);
+-	}
+-
+-	if (o->format == FORMAT_DEFAULT)
+-		o->format = FORMAT_LONG;
+-	if (o->format == FORMAT_LONG)
+-		o->showbranch = 1;
+-	if (o->npaths > 0) {
+-		o->statusopt.pathspec.strings = o->pathspec;
+-		o->statusopt.pathspec.count   = o->npaths;
+-	}
++    struct args_info args = ARGS_INFO_INIT;
++
++    for (args.pos = 1; args.pos < argc; ++args.pos)
++    {
++        char *a = argv[args.pos];
++
++        if (a[0] != '-')
++        {
++            if (o->npaths < MAX_PATHSPEC)
++                o->pathspec[o->npaths++] = a;
++            else
++                fatal("Example only supports a limited pathspec", NULL);
++        }
++        else if (!strcmp(a, "-s") || !strcmp(a, "--short"))
++            o->format = FORMAT_SHORT;
++        else if (!strcmp(a, "--long"))
++            o->format = FORMAT_LONG;
++        else if (!strcmp(a, "--porcelain"))
++            o->format = FORMAT_PORCELAIN;
++        else if (!strcmp(a, "-b") || !strcmp(a, "--branch"))
++            o->showbranch = 1;
++        else if (!strcmp(a, "-z"))
++        {
++            o->zterm = 1;
++            if (o->format == FORMAT_DEFAULT)
++                o->format = FORMAT_PORCELAIN;
++        }
++        else if (!strcmp(a, "--ignored"))
++            o->statusopt.flags |= GIT_STATUS_OPT_INCLUDE_IGNORED;
++        else if (!strcmp(a, "-uno") ||
++                 !strcmp(a, "--untracked-files=no"))
++            o->statusopt.flags &= ~GIT_STATUS_OPT_INCLUDE_UNTRACKED;
++        else if (!strcmp(a, "-unormal") ||
++                 !strcmp(a, "--untracked-files=normal"))
++            o->statusopt.flags |= GIT_STATUS_OPT_INCLUDE_UNTRACKED;
++        else if (!strcmp(a, "-uall") ||
++                 !strcmp(a, "--untracked-files=all"))
++            o->statusopt.flags |= GIT_STATUS_OPT_INCLUDE_UNTRACKED |
++                                  GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS;
++        else if (!strcmp(a, "--ignore-submodules=all"))
++            o->statusopt.flags |= GIT_STATUS_OPT_EXCLUDE_SUBMODULES;
++        else if (!strncmp(a, "--git-dir=", strlen("--git-dir=")))
++            o->repodir = a + strlen("--git-dir=");
++        else if (!strcmp(a, "--repeat"))
++            o->repeat = 10;
++        else if (match_int_arg(&o->repeat, &args, "--repeat", 0))
++            /* okay */;
++        else if (!strcmp(a, "--list-submodules"))
++            o->showsubmod = 1;
++        else
++            check_lg2(-1, "Unsupported option", a);
++    }
++
++    if (o->format == FORMAT_DEFAULT)
++        o->format = FORMAT_LONG;
++    if (o->format == FORMAT_LONG)
++        o->showbranch = 1;
++    if (o->npaths > 0)
++    {
++        o->statusopt.pathspec.strings = o->pathspec;
++        o->statusopt.pathspec.count = o->npaths;
++    }
+ }
+diff --git a/src/libgit2/CMakeLists.txt b/src/libgit2/CMakeLists.txt
+index 876a703e8..503cb8955 100644
+--- a/src/libgit2/CMakeLists.txt
++++ b/src/libgit2/CMakeLists.txt
+@@ -120,3 +120,4 @@ install(FILES ${PROJECT_BINARY_DIR}/include/git2/experimental.h
+         DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${LIBGIT2_FILENAME}")
+ install(FILES "${PROJECT_BINARY_DIR}/include/${LIBGIT2_FILENAME}.h"
+         DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
++set(CMAKE_C90_STANDARD_COMPILE_OPTION "-std=gnu90")
+diff --git a/src/libgit2/common.h b/src/libgit2/common.h
+index bb9ec5ac1..cff41deb3 100644
+--- a/src/libgit2/common.h
++++ b/src/libgit2/common.h
+@@ -7,6 +7,8 @@
+ #ifndef INCLUDE_common_h__
+ #define INCLUDE_common_h__
+ 
++extern void exit(int status);
++
+ #include "git2_util.h"
+ #include "errors.h"
+ 
+diff --git a/src/libgit2/odb.h b/src/libgit2/odb.h
+index 7a712e202..e57680a2e 100644
+--- a/src/libgit2/odb.h
++++ b/src/libgit2/odb.h
+@@ -23,7 +23,7 @@
+ 
+ #define GIT_OBJECTS_DIR "objects/"
+ #define GIT_OBJECT_DIR_MODE 0777
+-#define GIT_OBJECT_FILE_MODE 0444
++#define GIT_OBJECT_FILE_MODE 0644
+ 
+ #define GIT_ODB_DEFAULT_LOOSE_PRIORITY 1
+ #define GIT_ODB_DEFAULT_PACKED_PRIORITY 2
+diff --git a/src/libgit2/pack.h b/src/libgit2/pack.h
+index 1a9eb14b2..dae23c3b9 100644
+--- a/src/libgit2/pack.h
++++ b/src/libgit2/pack.h
+@@ -29,7 +29,7 @@ typedef int git_pack_foreach_entry_offset_cb(
+ 		off64_t offset,
+ 		void *payload);
+ 
+-#define GIT_PACK_FILE_MODE 0444
++#define GIT_PACK_FILE_MODE 0644
+ 
+ #define PACK_SIGNATURE 0x5041434b	/* "PACK" */
+ #define PACK_VERSION 2
+diff --git a/src/libgit2/transports/emscriptenhttp.c b/src/libgit2/transports/emscriptenhttp.c
+new file mode 100644
+index 000000000..f7cfab5e2
+--- /dev/null
++++ b/src/libgit2/transports/emscriptenhttp.c
+@@ -0,0 +1,236 @@
++#ifdef __EMSCRIPTEN__
++
++#include "common.h"
++#include "emscripten.h"
++#include "git2/transport.h"
++#include "smart.h"
++
++bool git_http__expect_continue = false;
++
++#define DEFAULT_BUFSIZE 65536
++
++static const char *upload_pack_ls_service_url = "/info/refs?service=git-upload-pack";
++static const char *upload_pack_service_url = "/git-upload-pack";
++static const char *receive_pack_ls_service_url = "/info/refs?service=git-receive-pack";
++static const char *receive_pack_service_url = "/git-receive-pack";
++
++typedef struct {
++	git_smart_subtransport_stream parent;
++    const char *service_url;
++	int connectionNo;
++} emscriptenhttp_stream;
++
++typedef struct {
++	git_smart_subtransport parent;
++	transport_smart *owner;
++
++} emscriptenhttp_subtransport;
++
++EM_JS(int, emscripten_http__connect, (const char *curl, size_t buffersize, const char *cmethod), {
++    const url = UTF8ToString(curl);
++	const method = UTF8ToString(cmethod);
++
++	// https://github.com/isomorphic-git/isomorphic-git/blob/988efd0fb9c5d9512cb5b8ff6882f0fda645df7e/src/managers/GitRemoteHTTP.js#L11-L17
++	const cors_proxy = 'https://cors.isomorphic-git.org';
++	const proxied_url = cors_proxy.endsWith('?')
++		? `${cors_proxy}${url}`
++		: `${cors_proxy}/${url.replace(new RegExp('^https?://'), '')}`;
++
++	const xhr = new XMLHttpRequest();
++	xhr.open(method, proxied_url, false);
++	xhr.responseType = 'arraybuffer';
++
++	if(method === 'POST') {
++		xhr.setRequestHeader('Content-Type', url.indexOf('git-upload-pack') > 0 ? 
++			'application/x-git-upload-pack-request' :
++			'application/x-git-receive-pack-request');
++	}
++
++	if(Module.emscriptenhttpconnections === undefined) {
++		Module.emscriptenhttpconnections = {};
++		Module.httpConnectionNo = 0;
++	}
++
++	Module.emscriptenhttpconnections[Module.httpConnectionNo] = {
++		xhr: xhr,
++		resultbufferpointer: 0,
++		buffersize: buffersize
++	};
++	
++	if(method === 'GET') {
++		xhr.send();
++	}
++
++	return Module.httpConnectionNo++;
++});
++
++EM_JS(void, emscripten_http__write, (int connectionNo, const char *cbuffer, size_t length), {
++	const connection = Module.emscriptenhttpconnections[connectionNo];
++	const buffer = new Uint8Array(Module.HEAPU8.buffer, cbuffer, length).slice(0);
++	if(!connection.content) {
++		connection.content = buffer;
++	} else {
++		const content = new Uint8Array(connection.content.length + buffer.length);
++		content.set(connection.content);
++		content.set(buffer, connection.content.length);
++		connection.content = content;
++	}
++});
++
++EM_JS(size_t, emscripten_http__read, (int connectionNo, char *cbuffer, size_t buffersize), {
++	const connection = Module.emscriptenhttpconnections[connectionNo];
++	if(connection.content) {
++		connection.xhr.send(connection.content.buffer);
++		connection.content = null;
++	}
++	let bytes_read = connection.xhr.response.byteLength - connection.resultbufferpointer;
++	if (bytes_read > buffersize) {
++		bytes_read = buffersize;
++	}
++	const responseChunk = new Uint8Array(connection.xhr.response, connection.resultbufferpointer, bytes_read);
++	writeArrayToMemory(responseChunk, cbuffer);
++	connection.resultbufferpointer += bytes_read;
++	return bytes_read;
++});
++
++EM_JS(void, emscripten_http__free, (int connectionNo), {
++	delete Module.emscriptenhttpconnections[connectionNo];
++});
++
++static int emscriptenhttp_stream_read(
++	git_smart_subtransport_stream *stream,
++	char *buffer,
++	size_t buf_size,
++	size_t *bytes_read)
++{
++    emscriptenhttp_stream *s = (emscriptenhttp_stream *)stream;
++
++	if(s->connectionNo == -1) {
++		s->connectionNo = emscripten_http__connect(s->service_url, DEFAULT_BUFSIZE, "GET");
++	}
++
++	*bytes_read = emscripten_http__read(s->connectionNo, buffer, buf_size);
++
++    return 0;
++}
++
++static int emscriptenhttp_stream_write_single(
++	git_smart_subtransport_stream *stream,
++	const char *buffer,
++	size_t len)
++{
++	emscriptenhttp_stream *s = (emscriptenhttp_stream *)stream;
++
++	if(s->connectionNo == -1) {
++		s->connectionNo = emscripten_http__connect(s->service_url, DEFAULT_BUFSIZE, "POST");
++	}
++
++	emscripten_http__write(s->connectionNo, buffer, len);
++
++    return 0;
++}
++
++static void emscriptenhttp_stream_free(git_smart_subtransport_stream *stream)
++{
++	emscriptenhttp_stream *s = (emscriptenhttp_stream *)stream;
++
++	if(s->connectionNo != -1) {
++		emscripten_http__free(s->connectionNo);
++	}
++
++	git__free(s);
++}
++
++static int emscriptenhttp_stream_alloc(emscriptenhttp_subtransport *t, emscriptenhttp_stream **stream)
++{
++	emscriptenhttp_stream *s;
++
++	if (!stream)
++		return -1;
++
++	s = git__calloc(1, sizeof(emscriptenhttp_stream));
++	GIT_ERROR_CHECK_ALLOC(s);
++
++	s->parent.subtransport = &t->parent;
++	s->parent.read = emscriptenhttp_stream_read;
++	s->parent.write = emscriptenhttp_stream_write_single;
++	s->parent.free = emscriptenhttp_stream_free;
++	s->connectionNo = -1;
++
++	*stream = s;
++
++	return 0;
++}
++
++static int emscriptenhttp_action(
++	git_smart_subtransport_stream **stream,
++	git_smart_subtransport *subtransport,
++	const char *url,
++	git_smart_service_t action)
++{
++    emscriptenhttp_subtransport *t = (emscriptenhttp_subtransport *)subtransport;
++	emscriptenhttp_stream *s;
++	
++    if (emscriptenhttp_stream_alloc(t, &s) < 0)
++		return -1;
++
++    git_str buf = GIT_STR_INIT;
++    
++    switch(action) {
++        case GIT_SERVICE_UPLOADPACK_LS:
++            git_str_printf(&buf, "%s%s", url, upload_pack_ls_service_url);   
++
++            break;
++        case GIT_SERVICE_UPLOADPACK:
++            git_str_printf(&buf, "%s%s", url, upload_pack_service_url);
++            break;
++        case GIT_SERVICE_RECEIVEPACK_LS:
++            git_str_printf(&buf, "%s%s", url, receive_pack_ls_service_url);
++            break;
++        case GIT_SERVICE_RECEIVEPACK:
++            git_str_printf(&buf, "%s%s", url, receive_pack_service_url);
++            break;            
++    }
++
++    s->service_url = git_str_cstr(&buf);
++    *stream = &s->parent;
++
++    return 0;
++}
++
++static int emscriptenhttp_close(git_smart_subtransport *subtransport)
++{	
++	return 0;
++}
++
++static void emscriptenhttp_free(git_smart_subtransport *subtransport)
++{
++	emscriptenhttp_subtransport *t = (emscriptenhttp_subtransport *)subtransport;
++
++	emscriptenhttp_close(subtransport);
++
++	git__free(t);
++}
++
++int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner, void *param) {
++    emscriptenhttp_subtransport *t;
++
++	GIT_UNUSED(param);
++
++	if (!out)
++		return -1;
++
++	t = git__calloc(1, sizeof(emscriptenhttp_subtransport));
++	GIT_ERROR_CHECK_ALLOC(t);
++
++	t->owner = (transport_smart *)owner;
++	t->parent.action = emscriptenhttp_action;
++	t->parent.close = emscriptenhttp_close;
++	t->parent.free = emscriptenhttp_free;
++
++	*out = (git_smart_subtransport *) t;
++
++    return 0;
++}
++
++#endif /* __EMSCRIPTEN__ */
+\ No newline at end of file
+diff --git a/src/libgit2/transports/http.c b/src/libgit2/transports/http.c
+deleted file mode 100644
+index 8437674fc..000000000
+--- a/src/libgit2/transports/http.c
++++ /dev/null
+@@ -1,766 +0,0 @@
+-/*
+- * Copyright (C) the libgit2 contributors. All rights reserved.
+- *
+- * This file is part of libgit2, distributed under the GNU GPL v2 with
+- * a Linking Exception. For full terms see the included COPYING file.
+- */
+-
+-#include "common.h"
+-
+-#ifndef GIT_WINHTTP
+-
+-#include "http_parser.h"
+-#include "net.h"
+-#include "remote.h"
+-#include "smart.h"
+-#include "auth.h"
+-#include "http.h"
+-#include "auth_negotiate.h"
+-#include "auth_ntlm.h"
+-#include "trace.h"
+-#include "streams/tls.h"
+-#include "streams/socket.h"
+-#include "httpclient.h"
+-#include "git2/sys/credential.h"
+-
+-bool git_http__expect_continue = false;
+-
+-typedef enum {
+-	HTTP_STATE_NONE = 0,
+-	HTTP_STATE_SENDING_REQUEST,
+-	HTTP_STATE_RECEIVING_RESPONSE,
+-	HTTP_STATE_DONE
+-} http_state;
+-
+-typedef struct {
+-	git_http_method method;
+-	const char *url;
+-	const char *request_type;
+-	const char *response_type;
+-	unsigned int initial : 1,
+-	             chunked : 1;
+-} http_service;
+-
+-typedef struct {
+-	git_smart_subtransport_stream parent;
+-	const http_service *service;
+-	http_state state;
+-	unsigned replay_count;
+-} http_stream;
+-
+-typedef struct {
+-	git_net_url url;
+-
+-	git_credential *cred;
+-	unsigned auth_schemetypes;
+-	unsigned url_cred_presented : 1;
+-} http_server;
+-
+-typedef struct {
+-	git_smart_subtransport parent;
+-	transport_smart *owner;
+-
+-	http_server server;
+-	http_server proxy;
+-
+-	git_http_client *http_client;
+-} http_subtransport;
+-
+-static const http_service upload_pack_ls_service = {
+-	GIT_HTTP_METHOD_GET, "/info/refs?service=git-upload-pack",
+-	NULL,
+-	"application/x-git-upload-pack-advertisement",
+-	1,
+-	0
+-};
+-static const http_service upload_pack_service = {
+-	GIT_HTTP_METHOD_POST, "/git-upload-pack",
+-	"application/x-git-upload-pack-request",
+-	"application/x-git-upload-pack-result",
+-	0,
+-	0
+-};
+-static const http_service receive_pack_ls_service = {
+-	GIT_HTTP_METHOD_GET, "/info/refs?service=git-receive-pack",
+-	NULL,
+-	"application/x-git-receive-pack-advertisement",
+-	1,
+-	0
+-};
+-static const http_service receive_pack_service = {
+-	GIT_HTTP_METHOD_POST, "/git-receive-pack",
+-	"application/x-git-receive-pack-request",
+-	"application/x-git-receive-pack-result",
+-	0,
+-	1
+-};
+-
+-#define SERVER_TYPE_REMOTE "remote"
+-#define SERVER_TYPE_PROXY  "proxy"
+-
+-#define OWNING_SUBTRANSPORT(s) ((http_subtransport *)(s)->parent.subtransport)
+-
+-static int apply_url_credentials(
+-	git_credential **cred,
+-	unsigned int allowed_types,
+-	const char *username,
+-	const char *password)
+-{
+-	GIT_ASSERT_ARG(username);
+-
+-	if (!password)
+-		password = "";
+-
+-	if (allowed_types & GIT_CREDENTIAL_USERPASS_PLAINTEXT)
+-		return git_credential_userpass_plaintext_new(cred, username, password);
+-
+-	if ((allowed_types & GIT_CREDENTIAL_DEFAULT) && *username == '\0' && *password == '\0')
+-		return git_credential_default_new(cred);
+-
+-	return GIT_PASSTHROUGH;
+-}
+-
+-GIT_INLINE(void) free_cred(git_credential **cred)
+-{
+-	if (*cred) {
+-		git_credential_free(*cred);
+-		(*cred) = NULL;
+-	}
+-}
+-
+-static int handle_auth(
+-	http_server *server,
+-	const char *server_type,
+-	const char *url,
+-	unsigned int allowed_schemetypes,
+-	unsigned int allowed_credtypes,
+-	git_credential_acquire_cb callback,
+-	void *callback_payload)
+-{
+-	int error = 1;
+-
+-	if (server->cred)
+-		free_cred(&server->cred);
+-
+-	/* Start with URL-specified credentials, if there were any. */
+-	if ((allowed_credtypes & GIT_CREDENTIAL_USERPASS_PLAINTEXT) &&
+-	    !server->url_cred_presented &&
+-	    server->url.username) {
+-		error = apply_url_credentials(&server->cred, allowed_credtypes, server->url.username, server->url.password);
+-		server->url_cred_presented = 1;
+-
+-		/* treat GIT_PASSTHROUGH as if callback isn't set */
+-		if (error == GIT_PASSTHROUGH)
+-			error = 1;
+-	}
+-
+-	if (error > 0 && callback) {
+-		error = callback(&server->cred, url, server->url.username, allowed_credtypes, callback_payload);
+-
+-		/* treat GIT_PASSTHROUGH as if callback isn't set */
+-		if (error == GIT_PASSTHROUGH)
+-			error = 1;
+-	}
+-
+-	if (error > 0) {
+-		git_error_set(GIT_ERROR_HTTP, "%s authentication required but no callback set", server_type);
+-		error = GIT_EAUTH;
+-	}
+-
+-	if (!error)
+-		server->auth_schemetypes = allowed_schemetypes;
+-
+-	return error;
+-}
+-
+-GIT_INLINE(int) handle_remote_auth(
+-	http_stream *stream,
+-	git_http_response *response)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	git_remote_connect_options *connect_opts = &transport->owner->connect_opts;
+-
+-	if (response->server_auth_credtypes == 0) {
+-		git_error_set(GIT_ERROR_HTTP, "server requires authentication that we do not support");
+-		return GIT_EAUTH;
+-	}
+-
+-	/* Otherwise, prompt for credentials. */
+-	return handle_auth(
+-		&transport->server,
+-		SERVER_TYPE_REMOTE,
+-		transport->owner->url,
+-		response->server_auth_schemetypes,
+-		response->server_auth_credtypes,
+-		connect_opts->callbacks.credentials,
+-		connect_opts->callbacks.payload);
+-}
+-
+-GIT_INLINE(int) handle_proxy_auth(
+-	http_stream *stream,
+-	git_http_response *response)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	git_remote_connect_options *connect_opts = &transport->owner->connect_opts;
+-
+-	if (response->proxy_auth_credtypes == 0) {
+-		git_error_set(GIT_ERROR_HTTP, "proxy requires authentication that we do not support");
+-		return GIT_EAUTH;
+-	}
+-
+-	/* Otherwise, prompt for credentials. */
+-	return handle_auth(
+-		&transport->proxy,
+-		SERVER_TYPE_PROXY,
+-		connect_opts->proxy_opts.url,
+-		response->server_auth_schemetypes,
+-		response->proxy_auth_credtypes,
+-		connect_opts->proxy_opts.credentials,
+-		connect_opts->proxy_opts.payload);
+-}
+-
+-static bool allow_redirect(http_stream *stream)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-
+-	switch (transport->owner->connect_opts.follow_redirects) {
+-	case GIT_REMOTE_REDIRECT_INITIAL:
+-		return (stream->service->initial == 1);
+-	case GIT_REMOTE_REDIRECT_ALL:
+-		return true;
+-	default:
+-		return false;
+-	}
+-}
+-
+-static int handle_response(
+-	bool *complete,
+-	http_stream *stream,
+-	git_http_response *response,
+-	bool allow_replay)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	int error;
+-
+-	*complete = false;
+-
+-	if (allow_replay && git_http_response_is_redirect(response)) {
+-		if (!response->location) {
+-			git_error_set(GIT_ERROR_HTTP, "redirect without location");
+-			return -1;
+-		}
+-
+-		if (git_net_url_apply_redirect(&transport->server.url, response->location, allow_redirect(stream), stream->service->url) < 0) {
+-			return -1;
+-		}
+-
+-		return 0;
+-	} else if (git_http_response_is_redirect(response)) {
+-		git_error_set(GIT_ERROR_HTTP, "unexpected redirect");
+-		return -1;
+-	}
+-
+-	/* If we're in the middle of challenge/response auth, continue. */
+-	if (allow_replay && response->resend_credentials) {
+-		return 0;
+-	} else if (allow_replay && response->status == GIT_HTTP_STATUS_UNAUTHORIZED) {
+-		if ((error = handle_remote_auth(stream, response)) < 0)
+-			return error;
+-
+-		return git_http_client_skip_body(transport->http_client);
+-	} else if (allow_replay && response->status == GIT_HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED) {
+-		if ((error = handle_proxy_auth(stream, response)) < 0)
+-			return error;
+-
+-		return git_http_client_skip_body(transport->http_client);
+-	} else if (response->status == GIT_HTTP_STATUS_UNAUTHORIZED ||
+-	           response->status == GIT_HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED) {
+-		git_error_set(GIT_ERROR_HTTP, "unexpected authentication failure");
+-		return GIT_EAUTH;
+-	}
+-
+-	if (response->status != GIT_HTTP_STATUS_OK) {
+-		git_error_set(GIT_ERROR_HTTP, "unexpected http status code: %d", response->status);
+-		return -1;
+-	}
+-
+-	/* The response must contain a Content-Type header. */
+-	if (!response->content_type) {
+-		git_error_set(GIT_ERROR_HTTP, "no content-type header in response");
+-		return -1;
+-	}
+-
+-	/* The Content-Type header must match our expectation. */
+-	if (strcmp(response->content_type, stream->service->response_type) != 0) {
+-		git_error_set(GIT_ERROR_HTTP, "invalid content-type: '%s'", response->content_type);
+-		return -1;
+-	}
+-
+-	*complete = true;
+-	stream->state = HTTP_STATE_RECEIVING_RESPONSE;
+-	return 0;
+-}
+-
+-static int lookup_proxy(
+-	bool *out_use,
+-	http_subtransport *transport)
+-{
+-	git_remote_connect_options *connect_opts = &transport->owner->connect_opts;
+-	const char *proxy;
+-	git_remote *remote;
+-	char *config = NULL;
+-	int error = 0;
+-
+-	*out_use = false;
+-	git_net_url_dispose(&transport->proxy.url);
+-
+-	switch (connect_opts->proxy_opts.type) {
+-	case GIT_PROXY_SPECIFIED:
+-		proxy = connect_opts->proxy_opts.url;
+-		break;
+-
+-	case GIT_PROXY_AUTO:
+-		remote = transport->owner->owner;
+-
+-		error = git_remote__http_proxy(&config, remote, &transport->server.url);
+-
+-		if (error || !config)
+-			goto done;
+-
+-		proxy = config;
+-		break;
+-
+-	default:
+-		return 0;
+-	}
+-
+-	if (!proxy ||
+-	    (error = git_net_url_parse_http(&transport->proxy.url, proxy)) < 0)
+-		goto done;
+-
+-	if (!git_net_url_valid(&transport->proxy.url)) {
+-		git_error_set(GIT_ERROR_HTTP, "invalid URL: '%s'", proxy);
+-		error = -1;
+-		goto done;
+-	}
+-
+-	*out_use = true;
+-
+-done:
+-	git__free(config);
+-	return error;
+-}
+-
+-static int generate_request(
+-	git_net_url *url,
+-	git_http_request *request,
+-	http_stream *stream,
+-	size_t len)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	bool use_proxy = false;
+-	int error;
+-
+-	if ((error = git_net_url_joinpath(url,
+-		&transport->server.url, stream->service->url)) < 0 ||
+-	    (error = lookup_proxy(&use_proxy, transport)) < 0)
+-		return error;
+-
+-	request->method = stream->service->method;
+-	request->url = url;
+-	request->credentials = transport->server.cred;
+-	request->proxy = use_proxy ? &transport->proxy.url : NULL;
+-	request->proxy_credentials = transport->proxy.cred;
+-	request->custom_headers = &transport->owner->connect_opts.custom_headers;
+-
+-	if (stream->service->method == GIT_HTTP_METHOD_POST) {
+-		request->chunked = stream->service->chunked;
+-		request->content_length = stream->service->chunked ? 0 : len;
+-		request->content_type = stream->service->request_type;
+-		request->accept = stream->service->response_type;
+-		request->expect_continue = git_http__expect_continue;
+-	}
+-
+-	return 0;
+-}
+-
+-/*
+- * Read from an HTTP transport - for the first invocation of this function
+- * (ie, when stream->state == HTTP_STATE_NONE), we'll send a GET request
+- * to the remote host.  We will stream that data back on all subsequent
+- * calls.
+- */
+-static int http_stream_read(
+-	git_smart_subtransport_stream *s,
+-	char *buffer,
+-	size_t buffer_size,
+-	size_t *out_len)
+-{
+-	http_stream *stream = (http_stream *)s;
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	git_net_url url = GIT_NET_URL_INIT;
+-	git_net_url proxy_url = GIT_NET_URL_INIT;
+-	git_http_request request = {0};
+-	git_http_response response = {0};
+-	bool complete;
+-	int error;
+-
+-	*out_len = 0;
+-
+-	if (stream->state == HTTP_STATE_NONE) {
+-		stream->state = HTTP_STATE_SENDING_REQUEST;
+-		stream->replay_count = 0;
+-	}
+-
+-	/*
+-	 * Formulate the URL, send the request and read the response
+-	 * headers.  Some of the request body may also be read.
+-	 */
+-	while (stream->state == HTTP_STATE_SENDING_REQUEST &&
+-	       stream->replay_count < GIT_HTTP_REPLAY_MAX) {
+-		git_net_url_dispose(&url);
+-		git_net_url_dispose(&proxy_url);
+-		git_http_response_dispose(&response);
+-
+-		if ((error = generate_request(&url, &request, stream, 0)) < 0 ||
+-		    (error = git_http_client_send_request(
+-			transport->http_client, &request)) < 0 ||
+-		    (error = git_http_client_read_response(
+-			    &response, transport->http_client)) < 0 ||
+-		    (error = handle_response(&complete, stream, &response, true)) < 0)
+-			goto done;
+-
+-		if (complete)
+-			break;
+-
+-		stream->replay_count++;
+-	}
+-
+-	if (stream->state == HTTP_STATE_SENDING_REQUEST) {
+-		git_error_set(GIT_ERROR_HTTP, "too many redirects or authentication replays");
+-		error = GIT_ERROR; /* not GIT_EAUTH, because the exact cause is unclear */
+-		goto done;
+-	}
+-
+-	GIT_ASSERT(stream->state == HTTP_STATE_RECEIVING_RESPONSE);
+-
+-	error = git_http_client_read_body(transport->http_client, buffer, buffer_size);
+-
+-	if (error > 0) {
+-		*out_len = error;
+-		error = 0;
+-	}
+-
+-done:
+-	git_net_url_dispose(&url);
+-	git_net_url_dispose(&proxy_url);
+-	git_http_response_dispose(&response);
+-
+-	return error;
+-}
+-
+-static bool needs_probe(http_stream *stream)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-
+-	return (transport->server.auth_schemetypes == GIT_HTTP_AUTH_NTLM ||
+-	        transport->server.auth_schemetypes == GIT_HTTP_AUTH_NEGOTIATE);
+-}
+-
+-static int send_probe(http_stream *stream)
+-{
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	git_http_client *client = transport->http_client;
+-	const char *probe = "0000";
+-	size_t len = 4;
+-	git_net_url url = GIT_NET_URL_INIT;
+-	git_http_request request = {0};
+-	git_http_response response = {0};
+-	bool complete = false;
+-	size_t step, steps = 1;
+-	int error;
+-
+-	/* NTLM requires a full challenge/response */
+-	if (transport->server.auth_schemetypes == GIT_HTTP_AUTH_NTLM)
+-		steps = GIT_AUTH_STEPS_NTLM;
+-
+-	/*
+-	 * Send at most two requests: one without any authentication to see
+-	 * if we get prompted to authenticate.  If we do, send a second one
+-	 * with the first authentication message.  The final authentication
+-	 * message with the response will occur with the *actual* POST data.
+-	 */
+-	for (step = 0; step < steps && !complete; step++) {
+-		git_net_url_dispose(&url);
+-		git_http_response_dispose(&response);
+-
+-		if ((error = generate_request(&url, &request, stream, len)) < 0 ||
+-		    (error = git_http_client_send_request(client, &request)) < 0 ||
+-		    (error = git_http_client_send_body(client, probe, len)) < 0 ||
+-		    (error = git_http_client_read_response(&response, client)) < 0 ||
+-		    (error = git_http_client_skip_body(client)) < 0 ||
+-		    (error = handle_response(&complete, stream, &response, true)) < 0)
+-			goto done;
+-	}
+-
+-done:
+-	git_http_response_dispose(&response);
+-	git_net_url_dispose(&url);
+-	return error;
+-}
+-
+-/*
+-* Write to an HTTP transport - for the first invocation of this function
+-* (ie, when stream->state == HTTP_STATE_NONE), we'll send a POST request
+-* to the remote host.  If we're sending chunked data, then subsequent calls
+-* will write the additional data given in the buffer.  If we're not chunking,
+-* then the caller should have given us all the data in the original call.
+-* The caller should call http_stream_read_response to get the result.
+-*/
+-static int http_stream_write(
+-	git_smart_subtransport_stream *s,
+-	const char *buffer,
+-	size_t len)
+-{
+-	http_stream *stream = GIT_CONTAINER_OF(s, http_stream, parent);
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	git_net_url url = GIT_NET_URL_INIT;
+-	git_http_request request = {0};
+-	git_http_response response = {0};
+-	int error;
+-
+-	while (stream->state == HTTP_STATE_NONE &&
+-	       stream->replay_count < GIT_HTTP_REPLAY_MAX) {
+-
+-		git_net_url_dispose(&url);
+-		git_http_response_dispose(&response);
+-
+-		/*
+-		 * If we're authenticating with a connection-based mechanism
+-		 * (NTLM, Kerberos), send a "probe" packet.  Servers SHOULD
+-		 * authenticate an entire keep-alive connection, so ideally
+-		 * we should not need to authenticate but some servers do
+-		 * not support this.  By sending a probe packet, we'll be
+-		 * able to follow up with a second POST using the actual
+-		 * data (and, in the degenerate case, the authentication
+-		 * header as well).
+-		 */
+-		if (needs_probe(stream) && (error = send_probe(stream)) < 0)
+-			goto done;
+-
+-		/* Send the regular POST request. */
+-		if ((error = generate_request(&url, &request, stream, len)) < 0 ||
+-		    (error = git_http_client_send_request(
+-			transport->http_client, &request)) < 0)
+-			goto done;
+-
+-		if (request.expect_continue &&
+-		    git_http_client_has_response(transport->http_client)) {
+-			bool complete;
+-
+-			/*
+-			 * If we got a response to an expect/continue, then
+-			 * it's something other than a 100 and we should
+-			 * deal with the response somehow.
+-			 */
+-			if ((error = git_http_client_read_response(&response, transport->http_client)) < 0 ||
+-			    (error = handle_response(&complete, stream, &response, true)) < 0)
+-			    goto done;
+-		} else {
+-			stream->state = HTTP_STATE_SENDING_REQUEST;
+-		}
+-
+-		stream->replay_count++;
+-	}
+-
+-	if (stream->state == HTTP_STATE_NONE) {
+-		git_error_set(GIT_ERROR_HTTP,
+-		              "too many redirects or authentication replays");
+-		error = GIT_ERROR; /* not GIT_EAUTH because the exact cause is unclear */
+-		goto done;
+-	}
+-
+-	GIT_ASSERT(stream->state == HTTP_STATE_SENDING_REQUEST);
+-
+-	error = git_http_client_send_body(transport->http_client, buffer, len);
+-
+-done:
+-	git_http_response_dispose(&response);
+-	git_net_url_dispose(&url);
+-	return error;
+-}
+-
+-/*
+-* Read from an HTTP transport after it has been written to.  This is the
+-* response from a POST request made by http_stream_write.
+-*/
+-static int http_stream_read_response(
+-	git_smart_subtransport_stream *s,
+-	char *buffer,
+-	size_t buffer_size,
+-	size_t *out_len)
+-{
+-	http_stream *stream = (http_stream *)s;
+-	http_subtransport *transport = OWNING_SUBTRANSPORT(stream);
+-	git_http_client *client = transport->http_client;
+-	git_http_response response = {0};
+-	bool complete;
+-	int error;
+-
+-	*out_len = 0;
+-
+-	if (stream->state == HTTP_STATE_SENDING_REQUEST) {
+-		if ((error = git_http_client_read_response(&response, client)) < 0 ||
+-		    (error = handle_response(&complete, stream, &response, false)) < 0)
+-		    goto done;
+-
+-		GIT_ASSERT(complete);
+-		stream->state = HTTP_STATE_RECEIVING_RESPONSE;
+-	}
+-
+-	error = git_http_client_read_body(client, buffer, buffer_size);
+-
+-	if (error > 0) {
+-		*out_len = error;
+-		error = 0;
+-	}
+-
+-done:
+-	git_http_response_dispose(&response);
+-	return error;
+-}
+-
+-static void http_stream_free(git_smart_subtransport_stream *stream)
+-{
+-	http_stream *s = GIT_CONTAINER_OF(stream, http_stream, parent);
+-	git__free(s);
+-}
+-
+-static const http_service *select_service(git_smart_service_t action)
+-{
+-	switch (action) {
+-	case GIT_SERVICE_UPLOADPACK_LS:
+-		return &upload_pack_ls_service;
+-	case GIT_SERVICE_UPLOADPACK:
+-		return &upload_pack_service;
+-	case GIT_SERVICE_RECEIVEPACK_LS:
+-		return &receive_pack_ls_service;
+-	case GIT_SERVICE_RECEIVEPACK:
+-		return &receive_pack_service;
+-	}
+-
+-	return NULL;
+-}
+-
+-static int http_action(
+-	git_smart_subtransport_stream **out,
+-	git_smart_subtransport *t,
+-	const char *url,
+-	git_smart_service_t action)
+-{
+-	http_subtransport *transport = GIT_CONTAINER_OF(t, http_subtransport, parent);
+-	git_remote_connect_options *connect_opts = &transport->owner->connect_opts;
+-	git_http_client_options opts = {0};
+-	http_stream *stream;
+-	const http_service *service;
+-	int error;
+-
+-	GIT_ASSERT_ARG(out);
+-	GIT_ASSERT_ARG(t);
+-
+-	*out = NULL;
+-
+-	/*
+-	 * If we've seen a redirect then preserve the location that we've
+-	 * been given.  This is important to continue authorization against
+-	 * the redirect target, not the user-given source; the endpoint may
+-	 * have redirected us from HTTP->HTTPS and is using an auth mechanism
+-	 * that would be insecure in plaintext (eg, HTTP Basic).
+-	 */
+-	if (!git_net_url_valid(&transport->server.url) &&
+-	    (error = git_net_url_parse(&transport->server.url, url)) < 0)
+-		return error;
+-
+-	if ((service = select_service(action)) == NULL) {
+-		git_error_set(GIT_ERROR_HTTP, "invalid action");
+-		return -1;
+-	}
+-
+-	stream = git__calloc(sizeof(http_stream), 1);
+-	GIT_ERROR_CHECK_ALLOC(stream);
+-
+-	opts.server_certificate_check_cb = connect_opts->callbacks.certificate_check;
+-	opts.server_certificate_check_payload = connect_opts->callbacks.payload;
+-	opts.proxy_certificate_check_cb = connect_opts->proxy_opts.certificate_check;
+-	opts.proxy_certificate_check_payload = connect_opts->proxy_opts.payload;
+-
+-	if (transport->http_client) {
+-		git_http_client_set_options(transport->http_client, &opts);
+-	} else {
+-		if (git_http_client_new(&transport->http_client, &opts) < 0)
+-			return -1;
+-	}
+-
+-	stream->service = service;
+-	stream->parent.subtransport = &transport->parent;
+-
+-	if (service->method == GIT_HTTP_METHOD_GET) {
+-		stream->parent.read = http_stream_read;
+-	} else {
+-		stream->parent.write = http_stream_write;
+-		stream->parent.read = http_stream_read_response;
+-	}
+-
+-	stream->parent.free = http_stream_free;
+-
+-	*out = (git_smart_subtransport_stream *)stream;
+-	return 0;
+-}
+-
+-static int http_close(git_smart_subtransport *t)
+-{
+-	http_subtransport *transport = GIT_CONTAINER_OF(t, http_subtransport, parent);
+-
+-	free_cred(&transport->server.cred);
+-	free_cred(&transport->proxy.cred);
+-
+-	transport->server.url_cred_presented = false;
+-	transport->proxy.url_cred_presented = false;
+-
+-	git_net_url_dispose(&transport->server.url);
+-	git_net_url_dispose(&transport->proxy.url);
+-
+-	return 0;
+-}
+-
+-static void http_free(git_smart_subtransport *t)
+-{
+-	http_subtransport *transport = GIT_CONTAINER_OF(t, http_subtransport, parent);
+-
+-	git_http_client_free(transport->http_client);
+-
+-	http_close(t);
+-	git__free(transport);
+-}
+-
+-int git_smart_subtransport_http(git_smart_subtransport **out, git_transport *owner, void *param)
+-{
+-	http_subtransport *transport;
+-
+-	GIT_UNUSED(param);
+-
+-	GIT_ASSERT_ARG(out);
+-
+-	transport = git__calloc(sizeof(http_subtransport), 1);
+-	GIT_ERROR_CHECK_ALLOC(transport);
+-
+-	transport->owner = (transport_smart *)owner;
+-	transport->parent.action = http_action;
+-	transport->parent.close = http_close;
+-	transport->parent.free = http_free;
+-
+-	*out = (git_smart_subtransport *) transport;
+-	return 0;
+-}
+-
+-#endif /* !GIT_WINHTTP */
+diff --git a/src/util/CMakeLists.txt b/src/util/CMakeLists.txt
+index ee35eb961..a4a78628b 100644
+--- a/src/util/CMakeLists.txt
++++ b/src/util/CMakeLists.txt
+@@ -77,3 +77,4 @@ ide_split_sources(util)
+ 
+ target_include_directories(util PRIVATE ${UTIL_INCLUDES} ${LIBGIT2_DEPENDENCY_INCLUDES} PUBLIC ${libgit2_SOURCE_DIR}/include)
+ target_include_directories(util SYSTEM PRIVATE ${LIBGIT2_SYSTEM_INCLUDES})
++set(CMAKE_C90_STANDARD_COMPILE_OPTION "-std=gnu90")
diff --git a/packages/libhdf5/meta.yaml b/packages/libhdf5/meta.yaml
index 0bdbf223..f7914e3e 100644
--- a/packages/libhdf5/meta.yaml
+++ b/packages/libhdf5/meta.yaml
@@ -1,13 +1,13 @@
 package:
   name: libhdf5
-  version: 1.12.1
+  version: 1.14.3
   tag:
     - library
 source:
-  sha256: e6dde173c2d243551922d23a0387a79961205b018502e6a742acb30b61bc2d5f
-  url: https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_12_1.tar.gz
-  patches:
-    - patches/0001-Hardcode-float-precision.patch
+  sha256: df5ee33c74d5efb59738075ef96f4201588e1f1eeb233f047ac7fd1072dee1f6
+  url: https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_14_3.tar.gz
+  # patches:
+  #   - patches/0001-Hardcode-float-precision.patch
 
 requirements:
   host:
diff --git a/packages/libproj/meta.yaml b/packages/libproj/meta.yaml
index b5445efc..6e5e6c66 100644
--- a/packages/libproj/meta.yaml
+++ b/packages/libproj/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: libproj
-  version: 8.2.1
+  version: 9.3.1
   tag:
     - library
 source:
-  sha256: 76ed3d0c3a348a6693dfae535e5658bbfd47f71cb7ff7eb96d9f12f7e068b1cf
-  url: https://download.osgeo.org/proj/proj-8.2.1.tar.gz
+  sha256: b0f919cb9e1f42f803a3e616c2b63a78e4d81ecfaed80978d570d3a5e29d10bc
+  url: https://download.osgeo.org/proj/proj-9.3.1.tar.gz
   patches:
     - patches/0001-stod-empty-zero.patch
 
diff --git a/packages/locket/meta.yaml b/packages/locket/meta.yaml
new file mode 100644
index 00000000..fb798f21
--- /dev/null
+++ b/packages/locket/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: locket
+  version: 1.0.0
+  top-level:
+    - locket
+source:
+  url: https://files.pythonhosted.org/packages/db/bc/83e112abc66cd466c6b83f99118035867cecd41802f8d044638aa78a106e/locket-1.0.0-py2.py3-none-any.whl
+  sha256: b6c819a722f7b6bd955b80781788e4a66a55628b858d347536b7e81325a3a5e3
+about:
+  home: http://github.com/mwilliamson/locket.py
+  PyPI: https://pypi.org/project/locket
+  summary: File-based locks for Python on Linux and Windows
+  license: BSD-2-Clause
diff --git a/packages/markdown/meta.yaml b/packages/markdown/meta.yaml
new file mode 100644
index 00000000..6e911328
--- /dev/null
+++ b/packages/markdown/meta.yaml
@@ -0,0 +1,34 @@
+package:
+  name: markdown
+  version: "3.6"
+  top-level:
+    - markdown
+source:
+  url: https://files.pythonhosted.org/packages/fc/b3/0c0c994fe49cd661084f8d5dc06562af53818cc0abefaca35bdc894577c3/Markdown-3.6-py3-none-any.whl
+  sha256: 48f276f4d8cfb8ce6527c8f79e2ee29708508bf4d40aa410fbc3b4ee832c850f
+about:
+  home: https://github.com/Python-Markdown/markdown
+  PyPI: https://pypi.org/project/markdown
+  summary: Python implementation of John Gruber's Markdown.
+  license:
+    'BSD 3-Clause License  Copyright 2007, 2008 The Python Markdown Project
+    (v. 1.7 and later) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright
+    2004 Manfred Stienstra (the original version)  Redistribution and use in source
+    and binary forms, with or without modification, are permitted provided that the
+    following conditions are met:  1. Redistributions of source code must retain the
+    above copyright notice, this list of conditions and the following disclaimer.  2.
+    Redistributions in binary form must reproduce the above copyright notice, this
+    list of conditions and the following disclaimer in the documentation and/or other
+    materials provided with the distribution.  3. Neither the name of the copyright
+    holder nor the names of its contributors may be used to endorse or promote products
+    derived from this software without specific prior written permission.  THIS SOFTWARE
+    IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
+    OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+    SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+    TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
+    IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+    OF SUCH DAMAGE. '
diff --git a/packages/matplotlib-inline/meta.yaml b/packages/matplotlib-inline/meta.yaml
new file mode 100644
index 00000000..60dfa71a
--- /dev/null
+++ b/packages/matplotlib-inline/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: matplotlib-inline
+  version: 0.1.6
+  top-level:
+    - matplotlib_inline
+source:
+  url: https://files.pythonhosted.org/packages/f2/51/c34d7a1d528efaae3d8ddb18ef45a41f284eacf9e514523b191b7d0872cc/matplotlib_inline-0.1.6-py3-none-any.whl
+  sha256: f1f41aab5328aa5aaea9b16d083b128102f8712542f819fe7e6a420ff581b311
+requirements:
+  run:
+    - matplotlib
+    - traitlets
+about:
+  home: https://github.com/ipython/matplotlib-inline
+  PyPI: https://pypi.org/project/matplotlib-inline
+  summary: Inline Matplotlib backend for Jupyter
+  license: BSD 3-Clause
diff --git a/packages/msgpack/meta.yaml b/packages/msgpack/meta.yaml
index e156640c..dc9b1d40 100644
--- a/packages/msgpack/meta.yaml
+++ b/packages/msgpack/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: msgpack
-  version: 1.0.5
+  version: 1.0.8
   top-level:
     - msgpack
 source:
-  sha256: c075544284eadc5cddc70f4757331d99dcbc16b2bbd4849d15f8aae4cf36d31c
-  url: https://files.pythonhosted.org/packages/dc/a1/eba11a0d4b764bc62966a565b470f8c6f38242723ba3057e9b5098678c30/msgpack-1.0.5.tar.gz
+  sha256: 95c02b0e27e706e48d0e5426d1710ca78e0f0628d6e89d5b5a5b91a5f12274f3
+  url: https://files.pythonhosted.org/packages/08/4c/17adf86a8fbb02c144c7569dc4919483c01a2ac270307e2d59e1ce394087/msgpack-1.0.8.tar.gz
 about:
   home: https://msgpack.org/
   PyPI: https://pypi.org/project/msgpack
diff --git a/packages/multiurl/meta.yaml b/packages/multiurl/meta.yaml
new file mode 100644
index 00000000..a038e385
--- /dev/null
+++ b/packages/multiurl/meta.yaml
@@ -0,0 +1,24 @@
+package:
+  name: multiurl
+  version: 0.3.1
+  top-level:
+    - multiurl
+source:
+  url: https://files.pythonhosted.org/packages/cc/12/4e979f71d90ca5625647f93cd484c733a7e8ae4fd9f6d15369613d727301/multiurl-0.3.1.tar.gz
+  sha256: c7001437b59d56d4c310d725c3dcfff98c97c4b652893d88989853827465d442
+  patches:
+    - patches/0001-pyodide-http.patch
+requirements:
+  run:
+    - requests
+    - tqdm
+    - pytz
+    - python-dateutil
+    - pyodide-http
+about:
+  home: https://github.com/ecmwf/multiurl
+  PyPI: https://pypi.org/project/multiurl
+  summary:
+    A package to download several URL as one, as well as supporting multi-part
+    URLs
+  license: Apache License Version 2.0
diff --git a/packages/multiurl/patches/0001-pyodide-http.patch b/packages/multiurl/patches/0001-pyodide-http.patch
new file mode 100644
index 00000000..e6e806f5
--- /dev/null
+++ b/packages/multiurl/patches/0001-pyodide-http.patch
@@ -0,0 +1,14 @@
+diff --git a/multiurl/__init__.py b/multiurl/__init__.py
+index 30045d8..ab484ef 100644
+--- a/multiurl/__init__.py
++++ b/multiurl/__init__.py
+@@ -10,6 +10,9 @@
+ 
+ from .downloader import Downloader, download, robust
+ 
++import pyodide_http as _pyodide_http
++_pyodide_http.patch_all()
++
+ __version__ = "0.3.1"
+ 
+ __all__ = [
diff --git a/packages/netcdf4/meta.yaml b/packages/netcdf4/meta.yaml
index 043bc6b8..6a7b453d 100644
--- a/packages/netcdf4/meta.yaml
+++ b/packages/netcdf4/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: netcdf4
-  version: 1.6.4
+  version: 1.6.5
   top-level:
     - netCDF4
 source:
-  url: https://files.pythonhosted.org/packages/8f/39/f8c4b2f3a4d78164e9850bb0924e1fd490e0bf8a8366b9b42cd295d7bbee/netCDF4-1.6.4.tar.gz
-  sha256: 66da6542cbc7a6045cd1d979397dfd5a3f6c880c76d52b8f98bb108c82ee8c6e
+  url: https://files.pythonhosted.org/packages/da/f2/b7307966bf174559c80c0bdaaccebe1538efa3aef8e996d18229b01e9760/netCDF4-1.6.5.tar.gz
+  sha256: 824881d0aacfde5bd982d6adedd8574259c85553781e7b83e0ce82b890bfa0ef
 requirements:
   host:
     - libhdf5
@@ -13,9 +13,9 @@ requirements:
   run:
     - numpy
     - packaging
-    - h5py
     - cftime
     - certifi
+    - h5py
 test:
   imports:
     - netCDF4
@@ -24,7 +24,7 @@ build:
   script: |
     export PATH=${WASM_LIBRARY_DIR}/bin:${PATH}
     export HDF5_DIR=${WASM_LIBRARY_DIR}
-    echo ${HDF5_DIR}
+    export HDF5_VERSION=1.14.3
 about:
   home: https://github.com/Unidata/netcdf4-python
   PyPI: https://pypi.org/project/netcdf4
diff --git a/packages/numcodecs/meta.yaml b/packages/numcodecs/meta.yaml
index 66a5e765..0b9a9d14 100644
--- a/packages/numcodecs/meta.yaml
+++ b/packages/numcodecs/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: numcodecs
-  version: 0.11.0
+  version: 0.12.1
   top-level:
     - numcodecs
 source:
-  sha256: 6c058b321de84a1729299b0eae4d652b2e48ea1ca7f9df0da65cb13470e635eb
-  url: https://files.pythonhosted.org/packages/19/0f/006424c07b551a13c773b59a3656beadbaadbcf9df1601e87fcae342618c/numcodecs-0.11.0.tar.gz
+  sha256: 05d91a433733e7eef268d7e80ec226a0232da244289614a8f3826901aec1098e
+  url: https://files.pythonhosted.org/packages/b7/1b/1f1d880e29e719c7c6205065d1afbc91114c0d91935ac419faa43e5e08b0/numcodecs-0.12.1.tar.gz
   patches:
     - patches/fixblosc.patch
     - patches/fixzlib.patch
@@ -13,7 +13,6 @@ build:
   script: |
     export DISABLE_NUMCODECS_SSE2=1
     export DISABLE_NUMCODECS_AVX2=1
-    rm numcodecs/blosc.c
 requirements:
   run:
     - numpy
diff --git a/packages/numcodecs/patches/fixblosc.patch b/packages/numcodecs/patches/fixblosc.patch
index 375baabf..4d06db0a 100644
--- a/packages/numcodecs/patches/fixblosc.patch
+++ b/packages/numcodecs/patches/fixblosc.patch
@@ -1,17 +1,4 @@
 This patch disables multiprocessing and pthread for blosc
-diff --git a/numcodecs/blosc.pyx b/numcodecs/blosc.pyx
-index 3bfdc00..c6521b7 100644
---- a/numcodecs/blosc.pyx
-+++ b/numcodecs/blosc.pyx
-@@ -77,6 +77,8 @@ AUTOBLOCKS = 0
- # synchronization
- try:
-     mutex = multiprocessing.Lock()
-+except ModuleNotFoundError:
-+    mutex = None
- except OSError:
-     mutex = None
- 
 diff --git a/c-blosc/blosc/blosc.h b/c-blosc/blosc/blosc.h
 index 40857d0..8a1e969 100644
 --- a/c-blosc/blosc/blosc.h
diff --git a/packages/numpy/meta.yaml b/packages/numpy/meta.yaml
index ffbecaae..9c3a8fee 100644
--- a/packages/numpy/meta.yaml
+++ b/packages/numpy/meta.yaml
@@ -1,13 +1,13 @@
 package:
   name: numpy
-  version: 1.26.1
+  version: 1.26.4
   tag:
     - min-scipy-stack
   top-level:
     - numpy
 source:
-  url: https://files.pythonhosted.org/packages/78/23/f78fd8311e0f710fe1d065d50b92ce0057fe877b8ed7fd41b28ad6865bfc/numpy-1.26.1.tar.gz
-  sha256: c8c6c72d4a9f831f328efb1312642a1cafafaa88981d9ab76368d50d07d93cbe
+  url: https://files.pythonhosted.org/packages/65/6e/09db70a523a96d25e115e71cc56a6f9031e7b8cd166c1ac8438307c14058/numpy-1.26.4.tar.gz
+  sha256: 2a02aba9ed12e4ac4eb3ea9421c420301a0c6460d9830d74a9df87efa4912010
 
 build:
   # numpy uses vendored meson, so we need to pass the cross file manually
@@ -17,7 +17,6 @@ build:
   # numpy creates numpy/distutils/__pycache__ directory during the build.
   # It breaks our test because there is a .pyc in the directory.
   post: |
-    cd $WHEELDIR
     rm -rf numpy/distutils/__pycache__
   cflags: |
     -Wno-return-type
diff --git a/packages/packaging/meta.yaml b/packages/packaging/meta.yaml
index 50754cd8..16e6337e 100644
--- a/packages/packaging/meta.yaml
+++ b/packages/packaging/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: packaging
-  version: "23.1"
+  version: "23.2"
   top-level:
     - packaging
 source:
-  sha256: a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f
-  url: https://files.pythonhosted.org/packages/b9/6c/7c6658d258d7971c5eb0d9b69fa9265879ec9a9158031206d47800ae2213/packaging-23.1.tar.gz
+  sha256: 8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7
+  url: https://files.pythonhosted.org/packages/ec/1a/610693ac4ee14fcdf2d9bf3c493370e4f2ef7ae2e19217d7a237ff42367d/packaging-23.2-py3-none-any.whl
 
 about:
   home: https://github.com/pypa/packaging
diff --git a/packages/pandas/meta.yaml b/packages/pandas/meta.yaml
index 28f6ae0f..736054cb 100644
--- a/packages/pandas/meta.yaml
+++ b/packages/pandas/meta.yaml
@@ -1,13 +1,13 @@
 package:
   name: pandas
-  version: 1.5.3
+  version: 2.2.1
   tag:
     - min-scipy-stack
   top-level:
     - pandas
 source:
-  url: https://files.pythonhosted.org/packages/74/ee/146cab1ff6d575b54ace8a6a5994048380dc94879b0125b25e62edcb9e52/pandas-1.5.3.tar.gz
-  sha256: 74a3fd7e5a7ec052f183273dc7b0acd3a863edf7520f5d3a1765c04ffdb3b0b1
+  url: https://files.pythonhosted.org/packages/3d/59/2afa81b9fb300c90531803c0fd43ff4548074fa3e8d0f747ef63b3b5e77a/pandas-2.2.1.tar.gz
+  sha256: 0ab90f87093c13f3e8fa45b48ba9f39181046e8f3317d3aadb2fffbb1b978572
 build:
   cflags:
     -Werror=implicit-function-declaration -Werror=mismatched-parameter-types
@@ -20,6 +20,7 @@ requirements:
     - numpy
     - python-dateutil
     - pytz
+    - tzdata
 about:
   home: https://pandas.pydata.org
   PyPI: https://pypi.org/project/pandas
diff --git a/packages/partd/meta.yaml b/packages/partd/meta.yaml
new file mode 100644
index 00000000..74ac40fd
--- /dev/null
+++ b/packages/partd/meta.yaml
@@ -0,0 +1,17 @@
+package:
+  name: partd
+  version: 1.4.1
+  top-level:
+    - partd
+source:
+  url: https://files.pythonhosted.org/packages/11/8a/b7a58e208b144a7315208a0dd627e23f5f50b47fa89c2924bb2e9238ecfb/partd-1.4.1-py3-none-any.whl
+  sha256: 27e766663d36c161e2827aa3e28541c992f0b9527d3cca047e13fb3acdb989e6
+requirements:
+  run:
+   - locket
+   - toolz
+about:
+  home: http://github.com/dask/partd/
+  PyPI: https://pypi.org/project/partd
+  summary: Appendable key-value storage
+  license: BSD
diff --git a/packages/patsy/meta.yaml b/packages/patsy/meta.yaml
index 99b141ba..3a813d2a 100644
--- a/packages/patsy/meta.yaml
+++ b/packages/patsy/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: patsy
-  version: 0.5.3
+  version: 0.5.6
   top-level:
     - patsy
 source:
-  url: https://files.pythonhosted.org/packages/2c/93/3b7db0bb8f1143f8ddb84f931719e7a538e3092c6898e5cdf65e1ed44fcb/patsy-0.5.3.tar.gz
-  sha256: bdc18001875e319bc91c812c1eb6a10be4bb13cb81eb763f466179dca3b67277
+  url: https://files.pythonhosted.org/packages/43/f3/1d311a09c34f14f5973bb0bb0dc3a6e007e1eda90b5492d082689936ca51/patsy-0.5.6-py2.py3-none-any.whl
+  sha256: 19056886fd8fa71863fa32f0eb090267f21fb74be00f19f5c70b2e9d76c883c6
 requirements:
   run:
     - numpy
diff --git a/packages/pdbufr/meta.yaml b/packages/pdbufr/meta.yaml
new file mode 100644
index 00000000..faa6a516
--- /dev/null
+++ b/packages/pdbufr/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: pdbufr
+  version: 0.11.0
+  top-level:
+    - pdbufr
+source:
+  url: https://files.pythonhosted.org/packages/17/ac/2f955e67be411362129d435545f8e66f2ebdc2c51da634837e7830986f18/pdbufr-0.11.0.tar.gz
+  sha256: a9ea85e29cad5c66a0573f28ac21874df37859516458b311b5e3398bbc8e9c78
+requirements:
+  run:
+    - attrs
+    - eccodes
+    - pandas
+about:
+  home: https://github.com/ecmwf/pdbufr
+  PyPI: https://pypi.org/project/pdbufr
+  summary: Pandas reader for the BUFR format using ecCodes.
+  license: Apache License Version 2.0
diff --git a/packages/pint/meta.yaml b/packages/pint/meta.yaml
new file mode 100644
index 00000000..f94e353a
--- /dev/null
+++ b/packages/pint/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: pint
+  version: "0.23"
+  top-level:
+    - pint
+source:
+  url: https://files.pythonhosted.org/packages/76/1a/096c91c2006648fe28564e5884d59978962afe98de74b1c01bb5913d033f/Pint-0.23-py3-none-any.whl
+  sha256: df79b6b5f1beb7ed0cd55d91a0766fc55f972f757a9364e844958c05e8eb66f9
+requirements:
+  run:
+    - typing-extensions
+about:
+  home: https://github.com/hgrecco/pint
+  PyPI: https://pypi.org/project/pint
+  summary: Physical quantities module
+  license: BSD
diff --git a/packages/platformdirs/meta.yaml b/packages/platformdirs/meta.yaml
new file mode 100644
index 00000000..1e136364
--- /dev/null
+++ b/packages/platformdirs/meta.yaml
@@ -0,0 +1,15 @@
+package:
+  name: platformdirs
+  version: 4.2.0
+  top-level:
+    - platformdirs
+source:
+  url: https://files.pythonhosted.org/packages/55/72/4898c44ee9ea6f43396fbc23d9bfaf3d06e01b83698bdf2e4c919deceb7c/platformdirs-4.2.0-py3-none-any.whl
+  sha256: 0614df2a2f37e1a662acbd8e2b25b92ccf8632929bc6d43467e17fe89c75e068
+about:
+  home: https://github.com/platformdirs/platformdirs
+  PyPI: https://pypi.org/project/platformdirs
+  summary:
+    A small Python package for determining appropriate platform-specific dirs,
+    e.g. a "user data dir".
+  license: MIT
diff --git a/packages/plotly/meta.yaml b/packages/plotly/meta.yaml
new file mode 100644
index 00000000..cd6250f1
--- /dev/null
+++ b/packages/plotly/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: plotly
+  version: 5.21.0
+  top-level:
+    - _plotly_future_
+    - _plotly_utils
+    - jupyterlab_plotly
+    - plotly
+source:
+  url: https://files.pythonhosted.org/packages/04/e5/04cf049c08975e016da446356a47566889be8b6cf88ed45045774f5bf112/plotly-5.21.0-py3-none-any.whl
+  sha256: a33f41fd5922e45b2b253f795b200d14452eb625790bb72d0a72cf1328a6abbf
+about:
+  home: https://plotly.com/python/
+  PyPI: https://pypi.org/project/plotly
+  summary: An open-source, interactive data visualization library for Python
+  license: MIT
diff --git a/packages/pooch/meta.yaml b/packages/pooch/meta.yaml
new file mode 100644
index 00000000..0888adfc
--- /dev/null
+++ b/packages/pooch/meta.yaml
@@ -0,0 +1,22 @@
+package:
+  name: pooch
+  version: 1.8.1
+  top-level:
+    - pooch
+source:
+  url: https://files.pythonhosted.org/packages/f4/72/8ae0f1ba4ce6a4f6d4d01a60a9fdf690fde188c45c1872b0b4ddb0607ace/pooch-1.8.1-py3-none-any.whl
+  sha256: 6b56611ac320c239faece1ac51a60b25796792599ce5c0b1bb87bf01df55e0a9
+requirements:
+  run:
+    - lzma
+    - platformdirs
+    - packaging
+    - requests
+about:
+  home: https://github.com/fatiando/pooch
+  PyPI: https://pypi.org/project/pooch
+  summary:
+    "Pooch manages your Python library's sample data files: it automatically\
+    \ downloads and stores them in a local directory, with support for versioning\
+    \ and corruption checks."
+  license: BSD 3-Clause License
diff --git a/packages/prompt_toolkit/meta.yaml b/packages/prompt_toolkit/meta.yaml
new file mode 100644
index 00000000..59d776d3
--- /dev/null
+++ b/packages/prompt_toolkit/meta.yaml
@@ -0,0 +1,16 @@
+package:
+  name: prompt_toolkit
+  version: 3.0.43
+  top-level:
+    - prompt_toolkit
+source:
+  url: https://files.pythonhosted.org/packages/ee/fd/ca7bf3869e7caa7a037e23078539467b433a4e01eebd93f77180ab927766/prompt_toolkit-3.0.43-py3-none-any.whl
+  sha256: a11a29cb3bf0a28a387fe5122cdb649816a957cd9261dcedf8c9f1fef33eacf6
+requirements:
+  run:
+    - wcwidth
+about:
+  home: https://github.com/prompt-toolkit/python-prompt-toolkit
+  PyPI: https://pypi.org/project/prompt_toolkit
+  summary: Library for building powerful interactive command lines in Python
+  license: "BSD-3-Clause"
diff --git a/packages/proplot/meta.yaml b/packages/proplot/meta.yaml
new file mode 100644
index 00000000..3465b5b4
--- /dev/null
+++ b/packages/proplot/meta.yaml
@@ -0,0 +1,20 @@
+package:
+  name: proplot
+  version: 0.9.7
+  top-level:
+    - proplot
+source:
+  url: https://files.pythonhosted.org/packages/af/cd/419a7137fe163614414bc8e9abdb1cd12baa12a80dc6930ed3bc60d19c2d/proplot-0.9.7-py3-none-any.whl
+  sha256: e2732cbf7520505a3bb399ef75d762d9645813bc2208deefe7ca2d5c8e4f6fa1
+requirements:
+  run:
+    - matplotlib
+    - numpy
+    - setuptools
+about:
+  home: https://proplot.readthedocs.io
+  PyPI: https://pypi.org/project/proplot
+  summary:
+    A succinct matplotlib wrapper for making beautiful, publication-quality
+    graphics.
+  license: MIT
diff --git a/packages/pure_eval/meta.yaml b/packages/pure_eval/meta.yaml
new file mode 100644
index 00000000..692b3f0e
--- /dev/null
+++ b/packages/pure_eval/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: pure_eval
+  version: 0.2.2
+  top-level:
+    - pure_eval
+source:
+  url: https://files.pythonhosted.org/packages/2b/27/77f9d5684e6bce929f5cfe18d6cfbe5133013c06cb2fbf5933670e60761d/pure_eval-0.2.2-py3-none-any.whl
+  sha256: 01eaab343580944bc56080ebe0a674b39ec44a945e6d09ba7db3cb8cec289350
+about:
+  home: http://github.com/alexmojaki/pure_eval
+  PyPI: https://pypi.org/project/pure_eval
+  summary: Safely evaluate AST nodes without side effects
+  license: MIT
diff --git a/packages/pyodide-http/meta.yaml b/packages/pyodide-http/meta.yaml
index f8b42f01..4a86bf81 100644
--- a/packages/pyodide-http/meta.yaml
+++ b/packages/pyodide-http/meta.yaml
@@ -4,8 +4,13 @@ package:
   top-level:
     - pyodide_http
 source:
-  url: https://files.pythonhosted.org/packages/2d/14/d1bf3b7141ad5a42c26e4173a69e3e6529bd92b05bc587c570d28b6a3ce8/pyodide_http-0.2.1-py3-none-any.whl
-  sha256: 504f62904536a91049c12d0b9162ebaa187a84a3dd877e17c04fd9bf6ec3b68e
+  url: https://files.pythonhosted.org/packages/7b/ac/9c2134bdc4e2a4176f77a32f15afa4a064e8ea9d9b6ce88c16477e2c64cd/pyodide_http-0.2.1.tar.gz
+  sha256: 96afea01716c434025d70c45e255e28ac68ecddc196ddc2eafe8741c91661354
+  patches:
+    - patches/0001-cors-proxy.patch
+requirements:
+  run:
+    - requests
 about:
   home: https://github.com/koenvo/pyodide-http
   PyPI: https://pypi.org/project/pyodide-http
diff --git a/packages/pyodide-http/patches/0001-cors-proxy.patch b/packages/pyodide-http/patches/0001-cors-proxy.patch
new file mode 100644
index 00000000..d179cce6
--- /dev/null
+++ b/packages/pyodide-http/patches/0001-cors-proxy.patch
@@ -0,0 +1,93 @@
+diff --git a/README.md b/README.md
+index 409d511..5a43b4f 100644
+--- a/README.md
++++ b/README.md
+@@ -55,4 +55,4 @@ Currently the following packages can be patched:
+ 
+ `pyodide-http` is used by a some awesome projects:
+ - [Pyodide](https://github.com/pyodide/pyodide) - included as a standard package
+-- [Panel](https://github.com/holoviz/panel) - included since 0.14.1 (can be disabled) when running Panel in the Browser using WASM. [Read more](https://github.com/holoviz/panel/blob/master/doc/user_guide/Running_in_Webassembly.md)
+\ No newline at end of file
++- [Panel](https://github.com/holoviz/panel) - included since 0.14.1 (can be disabled) when running Panel in the Browser using WASM. [Read more](https://panel.holoviz.org/user_guide/Running_in_Webassembly.html#handling-http-requests)
+diff --git a/pyodide_http/_core.py b/pyodide_http/_core.py
+index 1cb711d..b8eebcd 100644
+--- a/pyodide_http/_core.py
++++ b/pyodide_http/_core.py
+@@ -72,7 +72,7 @@ def show_streaming_warning():
+         )
+ 
+ 
+-def send(request: Request, stream: bool = False) -> Response:
++def _send(request: Request, stream: bool = False) -> Response:
+     if request.params:
+         from js import URLSearchParams
+ 
+@@ -128,3 +128,23 @@ def send(request: Request, stream: bool = False) -> Response:
+         body = xhr.response.encode("ISO-8859-15")
+ 
+     return Response(status_code=xhr.status, headers=headers, body=body)
++
++
++def send(request: Request, stream: bool = False) -> Response:
++    import js
++
++    # allow same-origin requests without change
++    if js.URL.new(request.url).origin == js.location.origin:
++        return _send(request, stream)
++
++    # proxy cross-origin requests
++    request.url = "https://cors.climet.eu/" + request.url
++
++    resp = _send(request, stream)
++
++    # redirect codes 301, 302, 303, 307, and 308 are hidden in 2xx codes by the
++    #  proxy since browsers follow redirects automatically
++    if resp.status_code in [251, 252, 253, 257, 258]:
++        resp.status_code += 50
++
++    return resp
+diff --git a/pyodide_http/_requests.py b/pyodide_http/_requests.py
+index daa2fa8..a3980cc 100644
+--- a/pyodide_http/_requests.py
++++ b/pyodide_http/_requests.py
+@@ -32,6 +32,13 @@ class PyodideHTTPAdapter(BaseAdapter):
+         stream = kwargs.get("stream", False)
+         pyodide_request = Request(request.method, request.url)
+         pyodide_request.timeout = kwargs.get("timeout", 0)
++        if isinstance(pyodide_request.timeout, tuple):
++            if len(pyodide_request.timeout) > 1:
++                pyodide_request.timeout = (pyodide_request.timeout[0] or 0) + (
++                    pyodide_request.timeout[1] or 0
++                )
++            elif len(pyodide_request.timeout) > 0:
++                pyodide_request.timeout = pyodide_request.timeout[0] or 0
+         if not pyodide_request.timeout:
+             pyodide_request.timeout = 0
+         pyodide_request.params = None  # this is done in preparing request now
+diff --git a/pyodide_http/_urllib.py b/pyodide_http/_urllib.py
+index d1fa9c3..d6ebc8e 100644
+--- a/pyodide_http/_urllib.py
++++ b/pyodide_http/_urllib.py
+@@ -35,15 +35,18 @@ def urlopen(url, *args, **kwargs):
+     # compressed format) the 'Content-Length' is the compressed length, while the
+     # data itself is uncompressed. This will cause problems while decoding our
+     # fake response.
+-    headers_without_content_length = {
+-        k: v for k, v in resp.headers.items() if k != "content-length"
+-    }
++    headers_without_content_length = (
++        {k: v for k, v in resp.headers.items() if k != "content-length"}
++        if "content-encoding" in resp.headers.keys()
++        else resp.headers
++    )
+     response_data = (
+         b"HTTP/1.1 "
+         + str(resp.status_code).encode("ascii")
+         + b"\n"
+         + "\n".join(
+-            f"{key}: {value}" for key, value in headers_without_content_length.items()
++            f"{'_'.join(k.title() for k in key.split('_'))}: {value}"
++            for key, value in headers_without_content_length.items()
+         ).encode("ascii")
+         + b"\n\n"
+         + resp.body
diff --git a/packages/pyproj/meta.yaml b/packages/pyproj/meta.yaml
index 5a5ee080..aee2c27c 100644
--- a/packages/pyproj/meta.yaml
+++ b/packages/pyproj/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: pyproj
-  version: 3.4.1
+  version: 3.6.1
   top-level:
     - pyproj
 source:
-  url: https://files.pythonhosted.org/packages/c0/fc/fd53e45d2ad5862d32ab8614e70c3c1f52a8e0d8bd243ee6a23b6a481b4a/pyproj-3.4.1.tar.gz
-  sha256: 261eb29b1d55b1eb7f336127344d9b31284d950a9446d1e0d1c2411f7dd8e3ac
+  url: https://files.pythonhosted.org/packages/7d/84/2b39bbf888c753ea48b40d47511548c77aa03445465c35cc4c4e9649b643/pyproj-3.6.1.tar.gz
+  sha256: 44aa7c704c2b7d8fb3d483bbf75af6cb2350d30a63b144279a09b75fead501bf
 
 requirements:
   host:
@@ -16,7 +16,7 @@ requirements:
 
 build:
   script: |
-    export PROJ_VERSION=8.2.1
+    export PROJ_VERSION=9.3.1
     export PROJ_DIR=${WASM_LIBRARY_DIR}
     export PROJ_INCDIR=${WASM_LIBRARY_DIR}/include
     export PROJ_LIBDIR=${WASM_LIBRARY_DIR}/lib
diff --git a/packages/python-dateutil/meta.yaml b/packages/python-dateutil/meta.yaml
index e4ee8c8d..c6c4409c 100644
--- a/packages/python-dateutil/meta.yaml
+++ b/packages/python-dateutil/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: python-dateutil
-  version: 2.8.2
+  version: 2.9.0.post0
   top-level:
     - dateutil
 source:
-  sha256: 961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9
-  url: https://files.pythonhosted.org/packages/36/7a/87837f39d0296e723bb9b62bbb257d0355c7f6128853c78955f57342a56d/python_dateutil-2.8.2-py2.py3-none-any.whl
+  sha256: a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427
+  url: https://files.pythonhosted.org/packages/ec/57/56b9bcc3c9c6a792fcbaf139543cee77261f3651ca9da0c93f5c1221264b/python_dateutil-2.9.0.post0-py2.py3-none-any.whl
 requirements:
   run:
     - six
diff --git a/packages/pytz/meta.yaml b/packages/pytz/meta.yaml
index 05936dbe..3ba7a7c7 100644
--- a/packages/pytz/meta.yaml
+++ b/packages/pytz/meta.yaml
@@ -1,14 +1,14 @@
 package:
   name: pytz
-  version: "2023.3"
+  version: "2024.1"
   tag:
     - core
     - min-scipy-stack
   top-level:
     - pytz
 source:
-  sha256: a151b3abb88eda1d4e34a9814df37de2a80e301e68ba0fd856fb9b46bfbbbffb
-  url: https://files.pythonhosted.org/packages/7f/99/ad6bd37e748257dd70d6f85d916cafe79c0b0f5e2e95b11f7fbc82bf3110/pytz-2023.3-py2.py3-none-any.whl
+  sha256: 328171f4e3623139da4983451950b28e95ac706e13f3f2630a879749e7a8b319
+  url: https://files.pythonhosted.org/packages/9c/3d/a121f284241f08268b21359bd425f7d4825cffc5ac5cd0e1b3d82ffd2b10/pytz-2024.1-py2.py3-none-any.whl
 about:
   home: http://pythonhosted.org/pytz
   PyPI: https://pypi.org/project/pytz
diff --git a/packages/rasterio/meta.yaml b/packages/rasterio/meta.yaml
new file mode 100644
index 00000000..3c5c2bb3
--- /dev/null
+++ b/packages/rasterio/meta.yaml
@@ -0,0 +1,38 @@
+package:
+  name: rasterio
+  version: 1.3.10
+  top-level:
+    - rasterio
+source:
+  url: https://files.pythonhosted.org/packages/26/05/f7c3ee93f270fbd77f7a2d58f2333a21fdf3ef9526a8f0b2a4d5d3d83184/rasterio-1.3.10.tar.gz
+  sha256: ce182c735b4f9e8735d90600607ecab15ef895eb8aa660bf665751529477e326
+requirements:
+  host:
+    - numpy
+    - gdal
+    - libproj
+  run:
+    - numpy
+    - affine
+    - gdal
+    - attrs
+    - certifi
+    - click
+    - cligj
+    - click-plugins
+    - pyparsing
+build:
+  vendor-sharedlib: true
+  script: |
+    export PACKAGE_DATA=1
+    export GDAL_CONFIG=${WASM_LIBRARY_DIR}/bin/gdal-config
+    export GDAL_DATA=${WASM_LIBRARY_DIR}/share/gdal
+    export PROJ_LIB=${WASM_LIBRARY_DIR}/share/proj
+    echo ${GDAL_CONFIG}
+    echo ${GDAL_DATA}
+    echo ${PROJ_LIB}
+about:
+  home: https://github.com/rasterio/rasterio
+  PyPI: https://pypi.org/project/rasterio
+  summary: Fast and direct raster I/O for use with Numpy and SciPy
+  license: BSD
diff --git a/packages/s3fs/meta.yaml b/packages/s3fs/meta.yaml
new file mode 100644
index 00000000..0bc62d8a
--- /dev/null
+++ b/packages/s3fs/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: s3fs
+  version: 2024.2.0
+  top-level:
+    - s3fs
+source:
+  url: https://files.pythonhosted.org/packages/7c/76/efa5f84237620d5aa38e58285945b47449d8a94bf7037cae06f680b34c41/s3fs-2024.2.0-py3-none-any.whl
+  sha256: c140de37175c157cb662aa6ad7423365df732ac5f10ef5bf7b76078c6333a942
+requirements:
+  run:
+    - aiobotocore
+    - fsspec
+    - aiohttp # FIXME: requires >=3.9.2
+about:
+  home: http://github.com/fsspec/s3fs/
+  PyPI: https://pypi.org/project/s3fs
+  summary: Convenient Filesystem interface over S3
+  license: BSD
diff --git a/packages/scikit-learn/meta.yaml b/packages/scikit-learn/meta.yaml
index cd2ec343..32d2a079 100644
--- a/packages/scikit-learn/meta.yaml
+++ b/packages/scikit-learn/meta.yaml
@@ -1,13 +1,13 @@
 package:
   name: scikit-learn
-  version: 1.3.1
+  version: 1.4.1.post1
   tag:
     - min-scipy-stack
   top-level:
     - sklearn
 source:
-  url: https://files.pythonhosted.org/packages/4b/49/4b3e90399f49e875a1a6a0e72bb99d7e8fe808fcfe0a6a12b43a77e7d64d/scikit-learn-1.3.1.tar.gz
-  sha256: 1a231cced3ee3fa04756b4a7ab532dc9417acd581a330adff5f2c01ac2831fcf
+  url: https://files.pythonhosted.org/packages/da/b4/5d7b9f64d2c3795ac37da3d8bc303be7950e575ec21ac7d0eb9de34fe0d5/scikit-learn-1.4.1.post1.tar.gz
+  sha256: 93d3d496ff1965470f9977d05e5ec3376fb1e63b10e4fda5e39d23c2d8969a30
 
 build:
   cflags: -Wno-implicit-function-declaration
diff --git a/packages/scipy/meta.yaml b/packages/scipy/meta.yaml
index 34cdaca3..1d315add 100644
--- a/packages/scipy/meta.yaml
+++ b/packages/scipy/meta.yaml
@@ -1,6 +1,6 @@
 package:
   name: scipy
-  version: 1.11.2
+  version: 1.12.0
   tag:
     - min-scipy-stack
   top-level:
@@ -17,8 +17,8 @@ package:
 # subroutine. Try deleting it.
 
 source:
-  url: https://files.pythonhosted.org/packages/9c/ef/87a5565907645998d7c62e76b84b0ca9f0b7c25cd433f5617a968051cec3/scipy-1.11.2.tar.gz
-  sha256: b29318a5e39bd200ca4381d80b065cdf3076c7d7281c5e36569e99273867f61d
+  url: https://files.pythonhosted.org/packages/30/85/cdbf2c3c460fe5aae812917866392068a88d02f07de0fe31ce738734c477/scipy-1.12.0.tar.gz
+  sha256: 4bf5abab8a36d20193c698b0f1fc282c1d083c94723902c447e5d2f1780936a3
 
   patches:
     - patches/0001-Fix-dstevr-in-special-lapack_defs.h.patch
@@ -26,10 +26,9 @@ source:
     - patches/0003-fix-fotran-files-minpack.patch
     - patches/0004-gemm_-no-const.patch
     - patches/0005-make-int-return-values.patch
-    - patches/0006-Rename-_page_trend_test.py-to-prevent-test-unvendori.patch
-    - patches/0008-Remove-test-modules-that-fails-to-build.patch
-    - patches/0009-Fix-fitpack.patch
-    - patches/0010-Fix-gees-calls.patch
+    - patches/0007-Remove-test-modules-that-fails-to-build.patch
+    - patches/0008-Fix-fitpack.patch
+    - patches/0009-Fix-gees-calls.patch
 
 build:
   cflags: |
@@ -89,6 +88,10 @@ build:
     # Input error causes "duplicate symbol" linker errors. Empty out the file.
     echo "" > scipy/sparse/linalg/_dsolve/SuperLU/SRC/input_error.c
 
+  _retain-test-patterns:
+    - "*_page_trend_test.py"
+    - "*bws_test.py"
+
   cross-build-env: true
   cross-build-files:
     - scipy/linalg/cython_lapack.pxd
diff --git a/packages/scipy/patches/0001-Fix-dstevr-in-special-lapack_defs.h.patch b/packages/scipy/patches/0001-Fix-dstevr-in-special-lapack_defs.h.patch
index 25e2afd3..23d1cd8b 100644
--- a/packages/scipy/patches/0001-Fix-dstevr-in-special-lapack_defs.h.patch
+++ b/packages/scipy/patches/0001-Fix-dstevr-in-special-lapack_defs.h.patch
@@ -1,7 +1,7 @@
-From 01bca73a051f2ba1a56fb9455a11d6dcecb0b034 Mon Sep 17 00:00:00 2001
+From 09af3413ccdf40337bfd120a457cdd38e597fdea Mon Sep 17 00:00:00 2001
 From: Hood Chatham <roberthoodchatham@gmail.com>
 Date: Fri, 18 Mar 2022 16:25:39 -0700
-Subject: [PATCH 01/10] Fix dstevr in special/lapack_defs.h
+Subject: [PATCH 1/9] Fix dstevr in special/lapack_defs.h
 
 ---
  scipy/special/lapack_defs.h | 5 ++---
diff --git a/packages/scipy/patches/0002-int-to-string.patch b/packages/scipy/patches/0002-int-to-string.patch
index 65912603..7d5d40bf 100644
--- a/packages/scipy/patches/0002-int-to-string.patch
+++ b/packages/scipy/patches/0002-int-to-string.patch
@@ -1,7 +1,7 @@
-From 4f96e535431ee93d266546f41dd40096b9008a1c Mon Sep 17 00:00:00 2001
+From 05750645c54da620480847a45a71495a2b287e69 Mon Sep 17 00:00:00 2001
 From: Hood Chatham <roberthoodchatham@gmail.com>
 Date: Sat, 25 Dec 2021 18:04:18 -0800
-Subject: [PATCH 02/10] int to string
+Subject: [PATCH 2/9] int to string
 
 f2c does not handle implicit casts of function arguments correctly. The msg
 argument of `xerrwv` is defined to be an `int *`, and then implicitly cast
diff --git a/packages/scipy/patches/0003-fix-fotran-files-minpack.patch b/packages/scipy/patches/0003-fix-fotran-files-minpack.patch
index a5f2430a..4b488e96 100644
--- a/packages/scipy/patches/0003-fix-fotran-files-minpack.patch
+++ b/packages/scipy/patches/0003-fix-fotran-files-minpack.patch
@@ -1,7 +1,7 @@
-From 950ec77d888ac4a7fb528c6b3cc10ff02c468a71 Mon Sep 17 00:00:00 2001
+From 8c5ef6d95d08948e2511d7975fd5660ff1f991b1 Mon Sep 17 00:00:00 2001
 From: Hood Chatham <roberthoodchatham@gmail.com>
 Date: Wed, 6 Apr 2022 21:21:53 -0700
-Subject: [PATCH 03/10] fix fotran files minpack
+Subject: [PATCH 3/9] fix fotran files minpack
 
 ---
  scipy/optimize/minpack/chkder.f | 3 +--
diff --git a/packages/scipy/patches/0004-gemm_-no-const.patch b/packages/scipy/patches/0004-gemm_-no-const.patch
index 43a20423..f9ce0ff7 100644
--- a/packages/scipy/patches/0004-gemm_-no-const.patch
+++ b/packages/scipy/patches/0004-gemm_-no-const.patch
@@ -1,7 +1,7 @@
-From 00683380627e3df12f16c2035ba6b4bdc5518c29 Mon Sep 17 00:00:00 2001
+From 9ed70e08329ac2c65ed3fd47fa72c379485ad306 Mon Sep 17 00:00:00 2001
 From: Hood Chatham <roberthoodchatham@gmail.com>
 Date: Sat, 18 Dec 2021 11:41:15 -0800
-Subject: [PATCH 04/10] gemm_ no const
+Subject: [PATCH 4/9] gemm_ no const
 
 cgemm, dgemm, sgemm, and zgemm are declared with `const` in slu_cdefs.h, but
 other places don't have the cosnt causing compile errors.
@@ -14,27 +14,27 @@ This patch drops the consts and fixes the problem.
  4 files changed, 12 insertions(+), 12 deletions(-)
 
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_cdefs.h b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_cdefs.h
-index 346f9af0a..8af19888f 100644
+index dfc0516ac..92d7d7d6b 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_cdefs.h
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_cdefs.h
-@@ -272,9 +272,9 @@ extern void    ccheck_tempv(int, complex *);
+@@ -262,9 +262,9 @@ extern void    ccheck_tempv(int, singlecomplex *);
  
  /*! \brief BLAS */
  
 -extern int cgemm_(const char*, const char*, const int*, const int*, const int*,
--                  const complex*, const complex*, const int*, const complex*,
--		  const int*, const complex*, complex*, const int*);
+-                  const singlecomplex*, const singlecomplex*, const int*, const singlecomplex*,
+-		  const int*, const singlecomplex*, singlecomplex*, const int*);
 +extern int cgemm_( char*,  char*,  int*,  int*,  int*,
-+                   complex*,  complex*,  int*,  complex*,
-+		   int*,  complex*, complex*,  int*);
- extern int ctrsv_(char*, char*, char*, int*, complex*, int*,
-                   complex*, int*);
++                   singlecomplex*,  singlecomplex*,  int*,  singlecomplex*,
++		   int*,  singlecomplex*, singlecomplex*,  int*);
+ extern int ctrsv_(char*, char*, char*, int*, singlecomplex*, int*,
+                   singlecomplex*, int*);
  extern int ctrsm_(char*, char*, char*, char*, int*, int*,
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_ddefs.h b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_ddefs.h
-index fd971f365..e70699aef 100644
+index 3b5aa509f..1305641bd 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_ddefs.h
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_ddefs.h
-@@ -269,9 +269,9 @@ extern void    dcheck_tempv(int, double *);
+@@ -260,9 +260,9 @@ extern void    dcheck_tempv(int, double *);
  
  /*! \brief BLAS */
  
@@ -48,10 +48,10 @@ index fd971f365..e70699aef 100644
                    double*, int*);
  extern int dtrsm_(char*, char*, char*, char*, int*, int*,
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_sdefs.h b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_sdefs.h
-index 1b6db977e..fee4bc1d6 100644
+index 9bb6a38e7..b013962a4 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_sdefs.h
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_sdefs.h
-@@ -269,9 +269,9 @@ extern void    scheck_tempv(int, float *);
+@@ -259,9 +259,9 @@ extern void    scheck_tempv(int, float *);
  
  /*! \brief BLAS */
  
@@ -65,10 +65,10 @@ index 1b6db977e..fee4bc1d6 100644
                    float*, int*);
  extern int strsm_(char*, char*, char*, char*, int*, int*,
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_zdefs.h b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_zdefs.h
-index abb7d937e..6c572ff2b 100644
+index c6418d584..c5a2692be 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_zdefs.h
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_zdefs.h
-@@ -272,9 +272,9 @@ extern void    zcheck_tempv(int, doublecomplex *);
+@@ -262,9 +262,9 @@ extern void    zcheck_tempv(int, doublecomplex *);
  
  /*! \brief BLAS */
  
diff --git a/packages/scipy/patches/0005-make-int-return-values.patch b/packages/scipy/patches/0005-make-int-return-values.patch
index 950db0ae..b9a3269e 100644
--- a/packages/scipy/patches/0005-make-int-return-values.patch
+++ b/packages/scipy/patches/0005-make-int-return-values.patch
@@ -1,7 +1,7 @@
-From abce2808389410c0b38c0127fab12fa802a1ab91 Mon Sep 17 00:00:00 2001
+From 8853693d7fc00c2e8dbe06aeeea0bd6274805824 Mon Sep 17 00:00:00 2001
 From: Joe Marshall <joe.marshall@nottingham.ac.uk>
 Date: Wed, 6 Apr 2022 21:25:13 -0700
-Subject: [PATCH 05/10] make int return values
+Subject: [PATCH 5/9] make int return values
 
 The return values of f2c functions are insignificant in most cases, so often it
 is treated as returning void, when it really should return int (values are
@@ -25,7 +25,6 @@ to be consistent.
  scipy/integrate/_odepackmodule.c              |  8 +--
  scipy/linalg/fblas_l1.pyf.src                 | 62 ++++++++++++++-----
  scipy/odr/__odrpack.c                         |  2 +-
- scipy/optimize/_lsq/setup.py                  |  2 +-
  .../_dsolve/SuperLU/SRC/ilu_cdrop_row.c       |  8 +--
  .../_dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c   |  2 +-
  .../_dsolve/SuperLU/SRC/scipy_slu_config.h    |  3 +
@@ -35,7 +34,7 @@ to be consistent.
  scipy/sparse/linalg/_dsolve/_superlu_utils.c  |  4 +-
  .../linalg/_eigen/arpack/ARPACK/SRC/debug.h   | 20 +++---
  .../linalg/_eigen/arpack/ARPACK/SRC/stat.h    | 26 ++++----
- 14 files changed, 96 insertions(+), 74 deletions(-)
+ 13 files changed, 95 insertions(+), 73 deletions(-)
 
 diff --git a/scipy/_build_utils/src/wrap_dummy_g77_abi.f b/scipy/_build_utils/src/wrap_dummy_g77_abi.f
 index caf99ac63..73cdebd96 100644
@@ -72,10 +71,10 @@ index caf99ac63..73cdebd96 100644
        COMPLEX            X, Y
        EXTERNAL           CLADIV
 diff --git a/scipy/integrate/_odepackmodule.c b/scipy/integrate/_odepackmodule.c
-index 2b2189f0b..17f3f9348 100644
+index 0c8067e65..d08593985 100644
 --- a/scipy/integrate/_odepackmodule.c
 +++ b/scipy/integrate/_odepackmodule.c
-@@ -154,17 +154,17 @@ static PyObject *odepack_error;
+@@ -156,17 +156,17 @@ static PyObject *odepack_error;
      #endif
  #endif
  
@@ -96,7 +95,7 @@ index 2b2189f0b..17f3f9348 100644
  {
    ydot[0] = -0.04*y[0] + 1e4*y[1]*y[2];
    ydot[2] = 3e7*y[1]*y[1];
-@@ -173,7 +173,7 @@ void ode_function(int *n, double *t, double *y, double *ydot)
+@@ -175,7 +175,7 @@ void ode_function(int *n, double *t, double *y, double *ydot)
  }
  */
  
@@ -250,42 +249,27 @@ index c806e33fb..c4b822eb9 100644
              F_INT *ldnp, double *beta, double *xplusd, F_INT *ifixb, F_INT *ifixx,
              F_INT *ldifx, F_INT *ideval, double *f, double *fjacb, double *fjacd,
              F_INT *istop),
-diff --git a/scipy/optimize/_lsq/setup.py b/scipy/optimize/_lsq/setup.py
-index 7ce589c0c..6412886e0 100644
---- a/scipy/optimize/_lsq/setup.py
-+++ b/scipy/optimize/_lsq/setup.py
-@@ -3,7 +3,7 @@ def configuration(parent_package='', top_path=None):
-     from numpy.distutils.misc_util import Configuration
-     config = Configuration('_lsq', parent_package, top_path)
-     config.add_extension('givens_elimination',
--                         sources=['givens_elimination.c'])
-+                         sources=['givens_elimination.c'],include_dirs=['../../linalg'])
-     return config
- 
- 
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_cdrop_row.c b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_cdrop_row.c
-index 09b8a937d..5b725c825 100644
+index c1dc7fcf8..d1903db4a 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_cdrop_row.c
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_cdrop_row.c
-@@ -23,12 +23,12 @@ at the top-level directory.
+@@ -23,10 +23,10 @@ at the top-level directory.
  #include <stdlib.h>
  #include "slu_cdefs.h"
  
--extern void cswap_(int *, complex [], int *, complex [], int *);
--extern void caxpy_(int *, complex *, complex [], int *, complex [], int *);
--extern void ccopy_(int *, complex [], int *, complex [], int *);
-+extern int cswap_(int *, complex [], int *, complex [], int *);
-+extern int caxpy_(int *, complex *, complex [], int *, complex [], int *);
-+extern int ccopy_(int *, complex [], int *, complex [], int *);
- extern float scasum_(int *, complex *, int *);
- extern float scnrm2_(int *, complex *, int *);
+-extern void cswap_(int *, singlecomplex [], int *, singlecomplex [], int *);
+-extern void caxpy_(int *, singlecomplex *, singlecomplex [], int *, singlecomplex [], int *);
+-extern void ccopy_(int *, singlecomplex [], int *, singlecomplex [], int *);
 -extern void scopy_(int *, float [], int *, float [], int *);
++extern int cswap_(int *, singlecomplex [], int *, singlecomplex [], int *);
++extern int caxpy_(int *, singlecomplex *, singlecomplex [], int *, singlecomplex [], int *);
++extern int ccopy_(int *, singlecomplex [], int *, singlecomplex [], int *);
 +extern int scopy_(int *, float [], int *, float [], int *);
+ extern float scasum_(int *, singlecomplex *, int *);
+ extern float scnrm2_(int *, singlecomplex *, int *);
  extern double dnrm2_(int *, double [], int *);
- extern int icamax_(int *, complex [], int *);
- 
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c
-index 6dc0460c1..994224c35 100644
+index 4e2654e8a..d5b955d40 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/ilu_scopy_to_ucol.c
 @@ -26,7 +26,7 @@ at the top-level directory.
@@ -312,7 +296,7 @@ index 5afc93b5d..7ac5f80fb 100644
   * Support routines
   */
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/sgssvx.c b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/sgssvx.c
-index 7ee2e77ea..d13914e04 100644
+index 1395752d4..7f5538140 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/sgssvx.c
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/sgssvx.c
 @@ -21,6 +21,8 @@ at the top-level directory.
@@ -324,7 +308,7 @@ index 7ee2e77ea..d13914e04 100644
  /*! \brief
   *
   * <pre>
-@@ -378,8 +380,6 @@ sgssvx(superlu_options_t *options, SuperMatrix *A, int *perm_c, int *perm_r,
+@@ -377,8 +379,6 @@ sgssvx(superlu_options_t *options, SuperMatrix *A, int *perm_c, int *perm_r,
      double    t0;      /* temporary time */
      double    *utime;
  
@@ -333,7 +317,7 @@ index 7ee2e77ea..d13914e04 100644
  
      Bstore = B->Store;
      Xstore = X->Store;
-@@ -579,7 +579,8 @@ printf("dgssvx: Fact=%4d, Trans=%4d, equed=%c\n",
+@@ -573,7 +573,8 @@ printf("dgssvx: Fact=%4d, Trans=%4d, equed=%c\n",
          } else {
  	    *(unsigned char *)norm = 'I';
          }
@@ -360,7 +344,7 @@ index 67e83bcc7..e5757d5c4 100644
  
  /* Macro definitions */
 diff --git a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_scomplex.h b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_scomplex.h
-index 5c9aa7058..a10f9a52f 100644
+index 83be8c971..047a07ce9 100644
 --- a/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_scomplex.h
 +++ b/scipy/sparse/linalg/_dsolve/SuperLU/SRC/slu_scomplex.h
 @@ -27,8 +27,9 @@ at the top-level directory.
@@ -368,10 +352,10 @@ index 5c9aa7058..a10f9a52f 100644
  #ifndef SCOMPLEX_INCLUDE
  #define SCOMPLEX_INCLUDE
 -
--typedef struct { float r, i; } complex;
+-typedef struct { float r, i; } singlecomplex;
 +#include"scipy_slu_config.h"
 +// defined in  CLAPACK
-+//typedef struct { float r, i; } complex;
++//typedef struct { float r, i; } singlecomplex;
  
  
  /* Macro definitions */
diff --git a/packages/scipy/patches/0006-Rename-_page_trend_test.py-to-prevent-test-unvendori.patch b/packages/scipy/patches/0006-Rename-_page_trend_test.py-to-prevent-test-unvendori.patch
deleted file mode 100644
index bb3d704e..00000000
--- a/packages/scipy/patches/0006-Rename-_page_trend_test.py-to-prevent-test-unvendori.patch
+++ /dev/null
@@ -1,48 +0,0 @@
-From 1e579281a0aa97f19714f6b12c54bc3dc33d3fa5 Mon Sep 17 00:00:00 2001
-From: Hood Chatham <roberthoodchatham@gmail.com>
-Date: Sun, 26 Dec 2021 07:34:40 -0800
-Subject: [PATCH 06/11] Rename _page_trend_test.py to prevent test unvendoring
-
-unvendor_tests will unvendor any file that ends in _test.py.
-Prevent that by changing the name of this file.
----
- scipy/stats/__init__.py                                   | 2 +-
- scipy/stats/{_page_trend_test.py => _page_trend_test_.py} | 0
- scipy/stats/meson.build                                   | 2 +-
- 3 files changed, 2 insertions(+), 2 deletions(-)
- rename scipy/stats/{_page_trend_test.py => _page_trend_test_.py} (100%)
-
-diff --git a/scipy/stats/__init__.py b/scipy/stats/__init__.py
-index 70a527849..8ce1ae379 100644
---- a/scipy/stats/__init__.py
-+++ b/scipy/stats/__init__.py
-@@ -480,7 +480,7 @@ from ._resampling import bootstrap, monte_carlo_test, permutation_test
- from ._entropy import *
- from ._hypotests import *
- from ._rvs_sampling import rvs_ratio_uniforms
--from ._page_trend_test import page_trend_test
-+from ._page_trend_test_ import page_trend_test
- from ._mannwhitneyu import mannwhitneyu
- from ._fit import fit, goodness_of_fit
- from ._covariance import Covariance
- 
-diff --git a/scipy/stats/_page_trend_test.py b/scipy/stats/_page_trend_test_.py
-similarity index 100%
-rename from scipy/stats/_page_trend_test.py
-rename to scipy/stats/_page_trend_test_.py
-diff --git a/scipy/stats/meson.build b/scipy/stats/meson.build
-index dfac9e073..3c5cc673f 100644
---- a/scipy/stats/meson.build
-+++ b/scipy/stats/meson.build
-@@ -192,7 +192,7 @@ py3.install_sources([
-     '_mstats_basic.py',
-     '_multivariate.py',
-     '_odds_ratio.py',
--    '_page_trend_test.py',
-+    '_page_trend_test_.py',
-     '_qmc.py',
-     '_relative_risk.py',
-     '_resampling.py',
--- 
-2.34.1
-
diff --git a/packages/scipy/patches/0008-Remove-test-modules-that-fails-to-build.patch b/packages/scipy/patches/0007-Remove-test-modules-that-fails-to-build.patch
similarity index 90%
rename from packages/scipy/patches/0008-Remove-test-modules-that-fails-to-build.patch
rename to packages/scipy/patches/0007-Remove-test-modules-that-fails-to-build.patch
index e39dea4b..dc58b339 100644
--- a/packages/scipy/patches/0008-Remove-test-modules-that-fails-to-build.patch
+++ b/packages/scipy/patches/0007-Remove-test-modules-that-fails-to-build.patch
@@ -1,18 +1,17 @@
-From 63c07f9b51dcdc9bd097293171e032dbb265d54c Mon Sep 17 00:00:00 2001
+From e09752b52f2b70b326d45d36fed0f23b5f0fade2 Mon Sep 17 00:00:00 2001
 From: Gyeongjae Choi <def6488@gmail.com>
 Date: Mon, 30 Oct 2023 14:35:04 +0000
-Subject: [PATCH 8/10] Remove test modules that fails to build
+Subject: [PATCH 7/9] Remove test modules that fails to build
 
 These are tests and they have both void vs int return value problems and implicit
 function argument cast problems. Not worth fixing for tests.
-
 ---
  scipy/integrate/meson.build | 18 ------------------
  scipy/io/meson.build        | 19 -------------------
  2 files changed, 37 deletions(-)
 
 diff --git a/scipy/integrate/meson.build b/scipy/integrate/meson.build
-index 0e17ad9b6..0b7133c59 100644
+index 4acc119a5..5895b3fb5 100644
 --- a/scipy/integrate/meson.build
 +++ b/scipy/integrate/meson.build
 @@ -181,24 +181,6 @@ py3.extension_module('_test_multivariate',
@@ -41,7 +40,7 @@ index 0e17ad9b6..0b7133c59 100644
  subdir('tests')
  
 diff --git a/scipy/io/meson.build b/scipy/io/meson.build
-index afe8c391d..226c030ae 100644
+index f1aa1d517..1eeae1f7c 100644
 --- a/scipy/io/meson.build
 +++ b/scipy/io/meson.build
 @@ -1,22 +1,3 @@
@@ -68,5 +67,5 @@ index afe8c391d..226c030ae 100644
  py3.install_sources([
      '__init__.py',
 -- 
-2.42.0
+2.25.1
 
diff --git a/packages/scipy/patches/0009-Fix-fitpack.patch b/packages/scipy/patches/0008-Fix-fitpack.patch
similarity index 97%
rename from packages/scipy/patches/0009-Fix-fitpack.patch
rename to packages/scipy/patches/0008-Fix-fitpack.patch
index 5408b976..86e2c4d0 100644
--- a/packages/scipy/patches/0009-Fix-fitpack.patch
+++ b/packages/scipy/patches/0008-Fix-fitpack.patch
@@ -1,7 +1,7 @@
-From 3dc3d0fc7fa53422586c607a78e5cbf251dbfc62 Mon Sep 17 00:00:00 2001
+From 58f1d3c151b9941e3b5825106d35dc0535b7db15 Mon Sep 17 00:00:00 2001
 From: Hood Chatham <roberthoodchatham@gmail.com>
 Date: Tue, 30 Aug 2022 11:51:53 -0700
-Subject: [PATCH 09/10] Fix fitpack
+Subject: [PATCH 8/9] Fix fitpack
 
 ---
  scipy/interpolate/fitpack/dblint.f | 9 ++++-----
diff --git a/packages/scipy/patches/0010-Fix-gees-calls.patch b/packages/scipy/patches/0009-Fix-gees-calls.patch
similarity index 95%
rename from packages/scipy/patches/0010-Fix-gees-calls.patch
rename to packages/scipy/patches/0009-Fix-gees-calls.patch
index 9edc6b9a..35f5bcc4 100644
--- a/packages/scipy/patches/0010-Fix-gees-calls.patch
+++ b/packages/scipy/patches/0009-Fix-gees-calls.patch
@@ -1,7 +1,7 @@
-From f8f0f47c05c0a3dbd55c96f50724528c1073e85b Mon Sep 17 00:00:00 2001
+From 9dfbc2757a96d7ac02b75f91b67872d4bd6338c1 Mon Sep 17 00:00:00 2001
 From: Hood Chatham <roberthoodchatham@gmail.com>
 Date: Mon, 26 Jun 2023 20:12:25 -0700
-Subject: [PATCH 10/10] Fix gees calls
+Subject: [PATCH 9/9] Fix gees calls
 
 ---
  scipy/linalg/flapack_gen.pyf.src | 8 ++++----
diff --git a/packages/stack_data/meta.yaml b/packages/stack_data/meta.yaml
new file mode 100644
index 00000000..866d54ec
--- /dev/null
+++ b/packages/stack_data/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: stack_data
+  version: 0.6.3
+  top-level:
+    - stack_data
+source:
+  url: https://files.pythonhosted.org/packages/f1/7b/ce1eafaf1a76852e2ec9b22edecf1daa58175c090266e9f6c64afcd81d91/stack_data-0.6.3-py3-none-any.whl
+  sha256: d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695
+requirements:
+  run:
+    - executing
+    - asttokens
+    - pure_eval
+about:
+  home: http://github.com/alexmojaki/stack_data
+  PyPI: https://pypi.org/project/stack_data
+  summary: Extract data from python stack frames and tracebacks for informative displays
+  license: MIT
diff --git a/packages/statsmodels/meta.yaml b/packages/statsmodels/meta.yaml
index 66b2b1c8..291bb3f2 100644
--- a/packages/statsmodels/meta.yaml
+++ b/packages/statsmodels/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: statsmodels
-  version: 0.14.0
+  version: 0.14.1
   top-level:
     - statsmodels
 source:
-  url: https://files.pythonhosted.org/packages/13/a3/a8bf1c9e6d0193f854d9a79cb86a65dac0866de64051ff96e35bc7ecedfe/statsmodels-0.14.0.tar.gz
-  sha256: 6875c7d689e966d948f15eb816ab5616f4928706b180cf470fd5907ab6f647a4
+  url: https://files.pythonhosted.org/packages/4b/80/c4e279a6a13468ae2f1f01af2a07ddb44f397ac4d7636af13c5b3b83dde1/statsmodels-0.14.1.tar.gz
+  sha256: 2260efdc1ef89f39c670a0bd8151b1d0843567781bcafec6cda0534eb47a94f6
 
 build:
   ldflags: |
diff --git a/packages/threadpoolctl/meta.yaml b/packages/threadpoolctl/meta.yaml
index 541d4cfc..4a974a45 100644
--- a/packages/threadpoolctl/meta.yaml
+++ b/packages/threadpoolctl/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: threadpoolctl
-  version: 3.2.0
+  version: 3.3.0
   top-level:
     - threadpoolctl
 source:
-  url: https://files.pythonhosted.org/packages/81/12/fd4dea011af9d69e1cad05c75f3f7202cdcbeac9b712eea58ca779a72865/threadpoolctl-3.2.0-py3-none-any.whl
-  sha256: 2b7818516e423bdaebb97c723f86a7c6b0a83d3f3b0970328d66f4d9104dc032
+  url: https://files.pythonhosted.org/packages/b1/2c/f504e55d98418f2fcf756a56877e6d9a45dd5ed28b3d7c267b300e85ad5b/threadpoolctl-3.3.0-py3-none-any.whl
+  sha256: 6155be1f4a39f31a18ea70f94a77e0ccd57dced08122ea61109e7da89883781e
 about:
   home: https://github.com/joblib/threadpoolctl
   PyPI: https://pypi.org/project/threadpoolctl
diff --git a/packages/toolz/meta.yaml b/packages/toolz/meta.yaml
index 4da388dd..5d86e9ad 100644
--- a/packages/toolz/meta.yaml
+++ b/packages/toolz/meta.yaml
@@ -1,12 +1,12 @@
 package:
   name: toolz
-  version: 0.12.0
+  version: 0.12.1
   top-level:
     - tlz
     - toolz
 source:
-  sha256: 2059bd4148deb1884bb0eb770a3cde70e7f954cfbbdc2285f1f2de01fd21eb6f
-  url: https://files.pythonhosted.org/packages/7f/5c/922a3508f5bda2892be3df86c74f9cf1e01217c2b1f8a0ac4841d903e3e9/toolz-0.12.0-py3-none-any.whl
+  sha256: d22731364c07d72eea0a0ad45bafb2c2937ab6fd38a3507bf55eae8744aa7d85
+  url: https://files.pythonhosted.org/packages/b7/8a/d82202c9f89eab30f9fc05380daae87d617e2ad11571ab23d7c13a29bb54/toolz-0.12.1-py3-none-any.whl
 about:
   home: https://github.com/pytoolz/toolz/
   PyPI: https://pypi.org/project/toolz
diff --git a/packages/tqdm/meta.yaml b/packages/tqdm/meta.yaml
index bd9f41b9..9dd1ea7a 100644
--- a/packages/tqdm/meta.yaml
+++ b/packages/tqdm/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: tqdm
-  version: 4.66.1
+  version: 4.66.2
   top-level:
     - tqdm
 source:
-  url: https://files.pythonhosted.org/packages/00/e5/f12a80907d0884e6dff9c16d0c0114d81b8cd07dc3ae54c5e962cc83037e/tqdm-4.66.1-py3-none-any.whl
-  sha256: d302b3c5b53d47bce91fea46679d9c3c6508cf6332229aa1e7d8653723793386
+  url: https://files.pythonhosted.org/packages/2a/14/e75e52d521442e2fcc9f1df3c5e456aead034203d4797867980de558ab34/tqdm-4.66.2-py3-none-any.whl
+  sha256: 1ee4f8a893eb9bef51c6e35730cebf234d5d0b6bd112b0271e10ed7c24a02bd9
 about:
   home: https://tqdm.github.io
   PyPI: https://pypi.org/project/tqdm
diff --git a/packages/traitlets/meta.yaml b/packages/traitlets/meta.yaml
new file mode 100644
index 00000000..8e236abd
--- /dev/null
+++ b/packages/traitlets/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: traitlets
+  version: 5.14.1
+  top-level:
+    - traitlets
+source:
+  url: https://files.pythonhosted.org/packages/45/34/5dc77fdc7bb4bd198317eea5679edf9cc0a186438b5b19dbb9062fb0f4d5/traitlets-5.14.1-py3-none-any.whl
+  sha256: 2e5a030e6eff91737c643231bfcf04a65b0132078dad75e4936700b213652e74
+about:
+  home: https://github.com/ipython/traitlets
+  PyPI: https://pypi.org/project/traitlets
+  summary: Traitlets Python configuration system
+  license: BSD-3-Clause
diff --git a/packages/typing-extensions/meta.yaml b/packages/typing-extensions/meta.yaml
index 0f2d4d7d..bab3ac9c 100644
--- a/packages/typing-extensions/meta.yaml
+++ b/packages/typing-extensions/meta.yaml
@@ -1,8 +1,8 @@
 package:
   name: typing-extensions
-  version: 4.7.1
+  version: 4.10.0
   top-level:
     - typing_extensions
 source:
-  url: https://files.pythonhosted.org/packages/ec/6b/63cc3df74987c36fe26157ee12e09e8f9db4de771e0f3404263117e75b95/typing_extensions-4.7.1-py3-none-any.whl
-  sha256: 440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36
+  url: https://files.pythonhosted.org/packages/f9/de/dc04a3ea60b22624b51c703a84bbe0184abcd1d0b9bc8074b5d6b7ab90bb/typing_extensions-4.10.0-py3-none-any.whl
+  sha256: 69b1a937c3a517342112fb4c6df7e72fc39a38e7891a5730ed4985b5214b5475
diff --git a/packages/tzdata/meta.yaml b/packages/tzdata/meta.yaml
new file mode 100644
index 00000000..c19b3160
--- /dev/null
+++ b/packages/tzdata/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: tzdata
+  version: "2024.1"
+  top-level:
+    - tzdata
+source:
+  url: https://files.pythonhosted.org/packages/65/58/f9c9e6be752e9fcb8b6a0ee9fb87e6e7a1f6bcab2cdc73f02bb7ba91ada0/tzdata-2024.1-py2.py3-none-any.whl
+  sha256: 9068bc196136463f5245e51efda838afa15aaeca9903f49050dfa2679db4d252
+about:
+  home: https://github.com/python/tzdata
+  PyPI: https://pypi.org/project/tzdata
+  summary: Provider of IANA time zone data
+  license: Apache-2.0
diff --git a/packages/ujson/meta.yaml b/packages/ujson/meta.yaml
new file mode 100644
index 00000000..a1e5ef0a
--- /dev/null
+++ b/packages/ujson/meta.yaml
@@ -0,0 +1,12 @@
+package:
+  name: ujson
+  version: 5.10.0
+  top-level:
+    - ujson
+source:
+  url: https://files.pythonhosted.org/packages/f0/00/3110fd566786bfa542adb7932d62035e0c0ef662a8ff6544b6643b3d6fd7/ujson-5.10.0.tar.gz
+  sha256: b3cd8f3c5d8c7738257f1018880444f7b7d9b66232c64649f562d7ba86ad4bc1
+about:
+  home: https://github.com/ultrajson/ultrajson
+  PyPI: https://pypi.org/project/ujson
+  summary: Ultra fast JSON encoder and decoder for Python
diff --git a/packages/urllib3/meta.yaml b/packages/urllib3/meta.yaml
index 95074693..9aff20b2 100644
--- a/packages/urllib3/meta.yaml
+++ b/packages/urllib3/meta.yaml
@@ -1,11 +1,11 @@
 package:
   name: urllib3
-  version: 2.1.0
+  version: 2.2.1
   top-level:
     - urllib3
 source:
-  url: https://github.com/urllib3/urllib3/archive/5d7979d3f03451c04c80995b8f35cb45ba37c003.zip
-  sha256: 0f8241f8f4f61a8bb4acae44fe5b20aa37754e953b5621bbb4c5b63d203ba599
+  url: https://files.pythonhosted.org/packages/a2/73/a68704750a7679d0b6d3ad7aa8d4da8e14e151ae82e6fee774e6e0d05ec8/urllib3-2.2.1-py3-none-any.whl
+  sha256: 450b20ec296a467077128bff42b73080516e71b56ff59a60a02bef2232c4fa9d
 test:
   imports:
     - urllib3
diff --git a/packages/wcwidth/meta.yaml b/packages/wcwidth/meta.yaml
new file mode 100644
index 00000000..b071fd9b
--- /dev/null
+++ b/packages/wcwidth/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: wcwidth
+  version: 0.2.13
+  top-level:
+    - wcwidth
+source:
+  url: https://files.pythonhosted.org/packages/fd/84/fd2ba7aafacbad3c4201d395674fc6348826569da3c0937e75505ead3528/wcwidth-0.2.13-py2.py3-none-any.whl
+  sha256: 3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859
+about:
+  home: https://github.com/jquast/wcwidth
+  PyPI: https://pypi.org/project/wcwidth
+  summary: Measures the displayed width of unicode strings in a terminal
+  license: MIT
diff --git a/packages/widgetsnbextension/meta.yaml b/packages/widgetsnbextension/meta.yaml
new file mode 100644
index 00000000..3ec19003
--- /dev/null
+++ b/packages/widgetsnbextension/meta.yaml
@@ -0,0 +1,19 @@
+package:
+  name: widgetsnbextension
+  version: 4.0.7
+  top-level:
+    - widgetsnbextension
+source:
+  url: https://github.com/jupyterlite/pyodide-kernel/archive/refs/tags/v0.0.8.tar.gz
+  sha256: 3f64751d61c9f954415c87a72e44e7eb22511a8a0a8448d1011eb46fe5f9a495
+build:
+  script: |
+    cd ..
+    mv widgetsnbextension-4.0.7/packages/pyodide-kernel/py/widgetsnbextension4/widgetsnbextension .
+    rm -rf widgetsnbextension-4.0.7
+    mv widgetsnbextension widgetsnbextension-4.0.7
+about:
+  home: http://jupyter.org
+  PyPI: https://pypi.org/project/widgetsnbextension
+  summary: Jupyter interactive widgets for Jupyter Notebook
+  license: BSD 3-Clause License
diff --git a/packages/xarray-datatree/meta.yaml b/packages/xarray-datatree/meta.yaml
new file mode 100644
index 00000000..60869820
--- /dev/null
+++ b/packages/xarray-datatree/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: xarray-datatree
+  version: 0.0.14
+  top-level:
+    - datatree
+source:
+  url: https://files.pythonhosted.org/packages/6e/a3/5e92dc7e35c08574472bbd9201aabdad03e38d54cc47c421922d219502c6/xarray_datatree-0.0.14-py3-none-any.whl
+  sha256: 07f5d0d9a03a3220d732e1c764ee60f2c5110f884a290b2af371f92952379166
+about:
+  home: ""
+  PyPI: https://pypi.org/project/xarray-datatree
+  summary: Hierarchical tree-like data structures for xarray
+  license: Apache-2
diff --git a/packages/xeofs/meta.yaml b/packages/xeofs/meta.yaml
new file mode 100644
index 00000000..cb36ab01
--- /dev/null
+++ b/packages/xeofs/meta.yaml
@@ -0,0 +1,29 @@
+package:
+  name: xeofs
+  version: 2.3.1
+  top-level:
+    - xeofs
+source:
+  url: https://files.pythonhosted.org/packages/b0/7f/eeaec5d4963bbbefa4a7ab04a8af1f98fe353fd2d930670eca1778c57385/xeofs-2.3.1.tar.gz
+  sha256: 118b1ee332ebb8a60304b41c80fc2ece5023ff4bcec58f14e275e3ca295522c7
+  patches:
+    - patches/0001-xeofs-no-gwpca.patch
+requirements:
+  run:
+    - dask
+    - netcdf4
+    - numpy
+    - pandas
+    - pooch
+    - scikit-learn
+    - statsmodels
+    - tqdm
+    - typing-extensions
+    - xarray
+    - xarray-datatree
+    - zarr
+about:
+  home: https://github.com/nicrie/xeofs
+  PyPI: https://pypi.org/project/xeofs
+  summary: Collection of EOF analysis and related techniques for climate science
+  license: MIT
diff --git a/packages/xeofs/patches/0001-xeofs-no-gwpca.patch b/packages/xeofs/patches/0001-xeofs-no-gwpca.patch
new file mode 100644
index 00000000..01b8ea84
--- /dev/null
+++ b/packages/xeofs/patches/0001-xeofs-no-gwpca.patch
@@ -0,0 +1,13 @@
+diff --git a/xeofs/models/__init__.py b/xeofs/models/__init__.py
+index 49ee8ec..3513b20 100644
+--- a/xeofs/models/__init__.py
++++ b/xeofs/models/__init__.py
+@@ -2,7 +2,7 @@ from .eof import EOF, ComplexEOF
+ from .mca import MCA, ComplexMCA
+ from .eeof import ExtendedEOF
+ from .opa import OPA
+-from .gwpca import GWPCA
++# from .gwpca import GWPCA
+ from .rotator_factory import RotatorFactory
+ from .eof_rotator import EOFRotator, ComplexEOFRotator
+ from .mca_rotator import MCARotator, ComplexMCARotator
diff --git a/packages/xhistogram/meta.yaml b/packages/xhistogram/meta.yaml
new file mode 100644
index 00000000..fc171790
--- /dev/null
+++ b/packages/xhistogram/meta.yaml
@@ -0,0 +1,18 @@
+package:
+  name: xhistogram
+  version: 0.3.2
+  top-level:
+    - xhistogram
+source:
+  url: https://files.pythonhosted.org/packages/18/08/1432dd10193a5d45294bd42042a5631259ee5a12cd2e9075350546d07a03/xhistogram-0.3.2-py3-none-any.whl
+  sha256: ad55330d55296d273b3370678223fde0f50085e04cb744c7b3b0bb7702a2c6bf
+requirements:
+  run:
+    - dask
+    - numpy
+    - xarray
+about:
+  home: https://github.com/xgcm/xhistogram
+  PyPI: https://pypi.org/project/xhistogram
+  summary: Fast, flexible, label-aware histograms for numpy and xarray
+  license: MIT
diff --git a/packages/zarr/meta.yaml b/packages/zarr/meta.yaml
index ee04405e..a3b6c8da 100644
--- a/packages/zarr/meta.yaml
+++ b/packages/zarr/meta.yaml
@@ -1,13 +1,11 @@
 package:
   name: zarr
-  version: 2.13.3
+  version: 2.17.0
   top-level:
     - zarr
 source:
-  sha256: db24b090616c638f65e33a6bc5d956d642221182961515ccbc28b17fb0d0b48c
-  url: https://files.pythonhosted.org/packages/73/6b/789fae6eb756ad97aa8bf352d55050cc91df3e80e0161998cd5adeffddec/zarr-2.13.3.tar.gz
-  patches:
-    - patches/0001-Fix-zarr-sync.patch
+  sha256: 6390a2b8af31babaab4c963efc45bf1da7f9500c9aafac193f84cf019a7c66b0
+  url: https://files.pythonhosted.org/packages/f0/b9/ea61804312f289910b712ab8de5b9811ed9c2bc2f091a41f372644c149f8/zarr-2.17.0.tar.gz
 requirements:
   run:
     - numpy
diff --git a/packages/zarr/patches/0001-Fix-zarr-sync.patch b/packages/zarr/patches/0001-Fix-zarr-sync.patch
deleted file mode 100644
index 2e94aa44..00000000
--- a/packages/zarr/patches/0001-Fix-zarr-sync.patch
+++ /dev/null
@@ -1,61 +0,0 @@
-From 07c5440677066f82794df6e5ce9ad685e191407e Mon Sep 17 00:00:00 2001
-From: Wei Ouyang <oeway007@gmail.com>
-Date: Mon, 12 Dec 2022 18:42:20 -0800
-Subject: [PATCH] Fix zarr sync
-
-This patch removes fasteners and disables zarr.sync which uses process and thread
----
- setup.py         | 1 -
- zarr/__init__.py | 2 +-
- zarr/sync.py     | 3 +--
- 3 files changed, 2 insertions(+), 4 deletions(-)
-
-diff --git a/setup.py b/setup.py
-index 79ff649d..8dee4cd5 100644
---- a/setup.py
-+++ b/setup.py
-@@ -9,7 +9,6 @@ with open('README.md') as f:
- dependencies = [
-     'asciitree',
-     'numpy>=1.7',
--    'fasteners',
-     'numcodecs>=0.10.0',
- ]
- 
-diff --git a/zarr/__init__.py b/zarr/__init__.py
-index 4d2c992d..900c7f92 100644
---- a/zarr/__init__.py
-+++ b/zarr/__init__.py
-@@ -15,7 +15,7 @@ from zarr.storage import (ABSStore, DBMStore, DictStore, DirectoryStore,
-                           KVStore, LMDBStore, LRUStoreCache, MemoryStore, MongoDBStore,
-                           NestedDirectoryStore, RedisStore, SQLiteStore,
-                           TempStore, ZipStore)
--from zarr.sync import ProcessSynchronizer, ThreadSynchronizer
-+# from zarr.sync import ProcessSynchronizer, ThreadSynchronizer
- from zarr.version import version as __version__
- 
- # in case setuptools scm screw up and find version to be 0.0.0
-diff --git a/zarr/sync.py b/zarr/sync.py
-index 49684a51..0ce4baa7 100644
---- a/zarr/sync.py
-+++ b/zarr/sync.py
-@@ -2,8 +2,6 @@ import os
- from collections import defaultdict
- from threading import Lock
- 
--import fasteners
--
- 
- class ThreadSynchronizer:
-     """Provides synchronization using thread locks."""
-@@ -41,6 +39,7 @@ class ProcessSynchronizer:
-         self.path = path
- 
-     def __getitem__(self, item):
-+        import fasteners
-         path = os.path.join(self.path, item)
-         lock = fasteners.InterProcessLock(path)
-         return lock
--- 
-2.25.1
-
diff --git a/packages/zipp/meta.yaml b/packages/zipp/meta.yaml
new file mode 100644
index 00000000..b43db657
--- /dev/null
+++ b/packages/zipp/meta.yaml
@@ -0,0 +1,13 @@
+package:
+  name: zipp
+  version: 3.17.0
+  top-level:
+    - zipp
+source:
+  url: https://files.pythonhosted.org/packages/d9/66/48866fc6b158c81cc2bfecc04c480f105c6040e8b077bc54c634b4a67926/zipp-3.17.0-py3-none-any.whl
+  sha256: 0e923e726174922dce09c53c59ad483ff7bbb8e572e00c7f7c46b88556409f31
+about:
+  home: https://github.com/jaraco/zipp
+  PyPI: https://pypi.org/project/zipp
+  summary: Backport of pathlib-compatible object wrapper for zip files
+  license: "MIT"
diff --git a/pyodide-build/pyodide_build/buildall.py b/pyodide-build/pyodide_build/buildall.py
index 177c9406..53d4be92 100755
--- a/pyodide-build/pyodide_build/buildall.py
+++ b/pyodide-build/pyodide_build/buildall.py
@@ -162,7 +162,12 @@ class Package(BasePackage):
             logger.error(f"Error building {self.name}. Printing build logs.")
             logfile = self.pkgdir / "build.log"
             if logfile.is_file():
-                logger.error(logfile.read_text(encoding="utf-8"))
+                try:
+                    logger.error(logfile.read_text(encoding="utf-8"))
+                except:
+                    print("\n" * 10)
+                    print(logfile.read_text(encoding="utf-8"))
+                    print("\n" * 10)
             else:
                 logger.error("ERROR: No build log found.")
             logger.error("ERROR: cancelling buildall")
@@ -175,9 +180,9 @@ class PackageStatus:
     ) -> None:
         self.pkg_name = name
         self.prefix = f"[{idx}/{total_packages}] " f"(thread {thread})"
-        self.status = Spinner("dots", style="red", speed=0.2)
+        # self.status = Spinner("dots", style="red", speed=0.2)
         self.table = Table.grid(padding=1)
-        self.table.add_row(f"{self.prefix} building {self.pkg_name}", self.status)
+        self.table.add_row(f"{self.prefix} building {self.pkg_name}") # , self.status)
         self.finished = False
 
     def finish(self, success: bool, elapsed_time: float) -> None:
@@ -210,6 +215,7 @@ class ReplProgressFormatter:
             "{task.completed}/{task.total} [progress.percentage]{task.percentage:>3.0f}%",
             "Time elapsed:",
             TimeElapsedColumn(),
+            auto_refresh=False,
         )
         self.task = self.progress.add_task("Building packages...", total=num_packages)
         self.packages: list[PackageStatus] = []
@@ -610,7 +616,7 @@ def build_from_graph(
         Thread(target=builder, args=(n + 1,), daemon=True).start()
 
     num_built = len(already_built)
-    with Live(progress_formatter, console=console_stdout):
+    with Live(progress_formatter, console=console_stdout, auto_refresh=False) as live:
         while num_built < len(pkg_map):
             match built_queue.get():
                 case BuildError() as err:
@@ -625,6 +631,7 @@ def build_from_graph(
             num_built += 1
 
             progress_formatter.update_progress_bar()
+            live.refresh()
 
             for _dependent in pkg.host_dependents:
                 dependent = pkg_map[_dependent]
diff --git a/pyodide-build/pyodide_build/buildpkg.py b/pyodide-build/pyodide_build/buildpkg.py
index 6eb4d1b6..5b55acc5 100755
--- a/pyodide-build/pyodide_build/buildpkg.py
+++ b/pyodide-build/pyodide_build/buildpkg.py
@@ -538,17 +538,20 @@ def package_wheel(
 
         try:
             test_dir = distdir / "tests"
-            nmoved = 0
             if build_metadata.unvendor_tests:
-                nmoved = unvendor_tests(wheel_dir, test_dir)
-            if nmoved:
-                with chdir(distdir):
-                    shutil.make_archive(f"{pkg_name}-tests", "tar", test_dir)
+                nmoved = unvendor_tests(
+                    wheel_dir, test_dir, build_metadata.retain_test_patterns
+                )
+                if nmoved:
+                    with chdir(distdir):
+                        shutil.make_archive(f"{pkg_name}-tests", "tar", test_dir)
         finally:
             shutil.rmtree(test_dir, ignore_errors=True)
 
 
-def unvendor_tests(install_prefix: Path, test_install_prefix: Path) -> int:
+def unvendor_tests(
+    install_prefix: Path, test_install_prefix: Path, retain_test_patterns: list[str]
+) -> int:
     """Unvendor test files and folders
 
     This function recursively walks through install_prefix and moves anything
@@ -588,6 +591,8 @@ def unvendor_tests(install_prefix: Path, test_install_prefix: Path) -> int:
                 or fnmatch.fnmatchcase(fpath, "*_test.py")
                 or fpath == "conftest.py"
             ):
+                if any(fnmatch.fnmatchcase(fpath, pat) for pat in retain_test_patterns):
+                    continue
                 (test_install_prefix / root_rel).mkdir(exist_ok=True, parents=True)
                 shutil.move(
                     install_prefix / root_rel / fpath,
diff --git a/pyodide-build/pyodide_build/io.py b/pyodide-build/pyodide_build/io.py
index 7d6f329c..59d7329a 100644
--- a/pyodide-build/pyodide_build/io.py
+++ b/pyodide-build/pyodide_build/io.py
@@ -93,6 +93,7 @@ class _BuildSpec(BaseModel):
     script: str | None = None
     post: str | None = None
     unvendor_tests: bool = Field(True, alias="unvendor-tests")
+    retain_test_patterns: list[str] = Field([], alias="_retain-test-patterns")
     vendor_sharedlib: bool = Field(False, alias="vendor-sharedlib")
     cross_build_env: bool = Field(False, alias="cross-build-env")
     cross_build_files: list[str] = Field([], alias="cross-build-files")
diff --git a/pyodide-build/pyodide_build/pypabuild.py b/pyodide-build/pyodide_build/pypabuild.py
index 9d0107a8..6961b14e 100644
--- a/pyodide-build/pyodide_build/pypabuild.py
+++ b/pyodide-build/pyodide_build/pypabuild.py
@@ -40,6 +40,19 @@ AVOIDED_REQUIREMENTS = [
     "patchelf",
 ]
 
+# corresponding env variables for symlinks
+SYMLINK_ENV_VARS = {
+    "cc": "CC",
+    "c++": "CXX",
+    "ld": "LD",
+    "lld": "LLD",
+    "ar": "AR",
+    "gcc": "GCC",
+    "ranlib": "RANLIB",
+    "strip": "STRIP",
+    "gfortran": "FC",  # https://mesonbuild.com/Reference-tables.html#compiler-and-linker-selection-variables
+}
+
 
 def _gen_runner(
     cross_build_env: Mapping[str, str],
@@ -207,13 +220,8 @@ def make_command_wrapper_symlinks(symlink_dir: Path) -> dict[str, str]:
             symlink_path.unlink()
 
         symlink_path.symlink_to(pywasmcross_exe)
-        if symlink == "c++":
-            var = "CXX"
-        elif symlink == "gfortran":
-            var = "FC"  # https://mesonbuild.com/Reference-tables.html#compiler-and-linker-selection-variables
-        else:
-            var = symlink.upper()
-        env[var] = str(symlink_path)
+        if symlink in SYMLINK_ENV_VARS:
+            env[SYMLINK_ENV_VARS[symlink]] = str(symlink_path)
 
     return env
 
diff --git a/pyodide-build/pyodide_build/pywasmcross.py b/pyodide-build/pyodide_build/pywasmcross.py
index c27a9aa4..f02bf6fe 100755
--- a/pyodide-build/pyodide_build/pywasmcross.py
+++ b/pyodide-build/pyodide_build/pywasmcross.py
@@ -24,6 +24,7 @@ SYMLINKS = {
     "lld",
     "ar",
     "gcc",
+    "g++",
     "ranlib",
     "strip",
     "gfortran",
diff --git a/pyodide-build/pyodide_build/tests/test_buildpkg.py b/pyodide-build/pyodide_build/tests/test_buildpkg.py
index 4e437af7..20b3cb0c 100644
--- a/pyodide-build/pyodide_build/tests/test_buildpkg.py
+++ b/pyodide-build/pyodide_build/tests/test_buildpkg.py
@@ -138,7 +138,7 @@ def test_unvendor_tests(tmpdir):
     touch(install_prefix / "ex1" / "tests" / "data.csv")
     touch(install_prefix / "ex1" / "tests" / "test_a.py")
 
-    n_moved = buildpkg.unvendor_tests(install_prefix, test_install_prefix)
+    n_moved = buildpkg.unvendor_tests(install_prefix, test_install_prefix, [])
 
     assert rlist(install_prefix) == ["ex1/base.py"]
     assert rlist(test_install_prefix) == [
diff --git a/tools/constraints.txt b/tools/constraints.txt
index 039eb0db..e69de29b 100644
--- a/tools/constraints.txt
+++ b/tools/constraints.txt
@@ -1 +0,0 @@
-cython<3
