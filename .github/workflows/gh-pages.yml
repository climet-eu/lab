name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install the dependencies
        run: |
          python -m pip install -r requirements.txt
      - name: Check the Pyodide version
        run: |
          echo "PYODIDE_SHA_SHORT=$(git submodule status pyodide | cut -c 2-8)" >> $GITHUB_ENV
      - name: Cache the Pyodide build
        uses: actions/cache@v4
        with:
          path: ./pyodide
          key: pyodide-${{ github.ref }}-${{ env.PYODIDE_SHA_SHORT }}
          restore-keys: |
            pyodide-${{ github.ref }}-${{ env.PYODIDE_SHA_SHORT }}
            pyodide-${{ github.ref }}
            pyodide-refs/heads/main
      - name: Ensure Pyodide source files are fresh
        run: |
          cd pyodide
          git status
          git diff --name-only | xargs git checkout --
      - name: Build Pyodide and all required packages
        run: |
          cd pyodide
          PYODIDE_DOCKER_IMAGE=$(docker build . -q) \
            ./run_docker \
            --non-interactive \
            PYODIDE_PACKAGES="aiohttp,basemap,cdsapi,cfgrib,cf-units,cmcrameri,dask,earthkit,ecmwf-api-client,ecmwf-opendata,field-compression-benchmark,fsspec,git2,h5netcdf,intake,ipyfilite,ipython,kerchunk,lzma,matplotlib,MetPy,netcdf4,numcodecs,numpy,pandas,pint,proplot,requests,scipy,sympy,s3fs,xarray,xeofs,zarr" \
            make
      - name: Clean up the pyodide build
        run: |
          cd pyodide
          find . -name jupyter-lite.json -delete
          find . -name jupyter_lite_config.json -delete
          cd ..
          mkdir -p static
          cp -r pyodide/dist static/pyodide
          rm -rf static/pyodide/*-tests.tar
          rm -f static/pyodide/tsconfig.tsbuildinfo
      - name: Build the JupyterLite site
        run: |
          rm -f files/README.md && cp ./README.md files/
          jupyter lite build --output-dir dist
          cp ./_headers dist/
          cp -r data dist/
          cp static/favicons/favicon.ico dist/
          find dist/ -name favicon.ico | xargs -L1 cp -f static/favicons/favicon.ico
          rm -rf static
      - name: Deploy to dist branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: dist
          publish_dir: ./dist
          force_orphan: true
